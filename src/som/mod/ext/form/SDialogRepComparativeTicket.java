/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.ext.form;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanDialogReport;
import som.gui.SGuiClientSessionCustom;
import som.gui.prt.SPrtUtils;
import som.mod.SModConsts;
import som.mod.ext.db.SDbTicketRevuelta;
import som.mod.som.db.SSomUtils;
import som.mod.som.view.SPaneUserInputCategory;

/**
 *
 * @author Juan Barajas, Alfredo Pérez, Sergio Flores, Isabel Servín
 */
public class SDialogRepComparativeTicket extends SBeanDialogReport {

    private Connection moConnectionRevuelta;

    /**
     * Creates new form SDialogRepComparativeTicket
     * @param client
     * @param subType
     * @param title
     */
    public SDialogRepComparativeTicket(SGuiClient client, int subType, String title) {
        setFormSettings(client, SModConsts.SR_TIC_COMP, subType, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        moDateDateStart = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel12 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        moDateDateEnd = new sa.lib.gui.bean.SBeanFieldDate();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros del reporte:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateStart.setText("Fecha inicial:*");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlDateStart);
        jPanel11.add(moDateDateStart);

        jPanel2.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEnd.setText("Fecha final:*");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlDateEnd);
        jPanel12.add(moDateDateEnd);

        jPanel2.add(jPanel12);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        attendWindowClosed();
    }//GEN-LAST:event_formWindowClosed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private sa.lib.gui.bean.SBeanFieldDate moDateDateEnd;
    private sa.lib.gui.bean.SBeanFieldDate moDateDateStart;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 400, 250);

        moDateDateStart.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateStart.getText()), true);
        moDateDateEnd.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateEnd.getText()), true);

        moConnectionRevuelta = SSomUtils.openConnectionRevueltaJdbc(miClient.getSession());

        moFields.addField(moDateDateStart);
        moFields.addField(moDateDateEnd);

        moFields.setFormButton(jbPrint);

        moDateDateStart.setValue(SLibTimeUtils.getBeginOfMonth(miClient.getSession().getWorkingDate()));
        moDateDateEnd.setValue(SLibTimeUtils.getEndOfMonth(miClient.getSession().getWorkingDate()));

        reloadCatalogues();
    }
    
    private void attendWindowClosed() {
        if (moConnectionRevuelta != null) {
            try {
                if (!moConnectionRevuelta.isClosed()) {
                    moConnectionRevuelta.close();
                }
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
        }
    }

    private Vector<SDbTicketRevuelta> readTicketsRevuelta(Date start, Date end) {
        String sql = "";
        String sqlMapItems = "";
        String revueltaId = "";
        Statement statement = null;
        ResultSet resulset = null;
        Vector<SDbTicketRevuelta> vTicRev = new Vector<>();
        SimpleDateFormat datetimeParser = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss a");
        //SimpleDateFormat DateFormatDateShort = new SimpleDateFormat("MM/dd/yyyy");    // XXX used when ODBC was supported by JVM (Sergio Flores 2015-06-24)

        sqlMapItems = SSomUtils.mapItemSomRevuelta(miClient.getSession());
        revueltaId = ((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getCompany().getRevueltaId();
        try {
            statement = moConnectionRevuelta.createStatement();

            /* XXX used when ODBC was supported by JVM (Sergio Flores 2015-06-24)
            sql = "SELECT be.clave_e, DateValue(be.fecha_e) + TimeValue(be.hora_e), DateValue(bs.fecha_s) + TimeValue(bs.hora_s), be.placas, be.observa_e, be.conductor, be.peso_e, bs.peso_s, bs.peso_n, " + // 9
                    "p.clave_p, p.nombre_p, c.clave_c, c.nombre_c, u.nombre_u, be.clave_o, be.nombre_oe, be.turno_oe, be.bascula_e, be.completo " + // 19
                    "FROM (((boleto_ent AS be " +
                    "INNER JOIN boleto_sal AS bs ON be.clave_e = bs.clave_e) " +
                    "INNER JOIN producto AS p ON be.clave_p = p.clave_p) " +
                    "INNER JOIN cliente AS c ON be.clave_c = c.clave_c) " +
                    "INNER JOIN usuario AS u ON be.clave_u = u.clave_u " +
                    "WHERE be.fecha_e BETWEEN #" + dateFormatDateShort.format(start) + "# AND #" + dateFormatDateShort.format(end) + "# AND be.clave_u = '" + revueltaId + "' " +
                    (sqlMapItems.isEmpty() ? "" : ("AND p.clave_p IN (" + sqlMapItems + ") "));
            */
            /* Deprecation due to change of DBMS of Revuelta's scale software (Alfredo Pérez, 2018-02-19)
            sql = "SELECT be.clave_e, CAST(DATE(be.fecha_e) AS SQL_CHAR) + ' ' + be.hora_e, CAST(DATE(bs.fecha_s) AS SQL_CHAR) + ' ' + bs.hora_s, be.placas, be.observa_e, be.conductor, be.peso_e, bs.peso_s, bs.peso_n, " + // 9
                    "p.clave_p, p.nombre_p, c.clave_c, c.nombre_c, u.nombre_u, be.clave_o, be.nombre_oe, be.turno_oe, be.bascula_e, be.completo " + // 19
                    "FROM (((boleto_ent AS be " +
                    "INNER JOIN boleto_sal AS bs ON be.clave_e = bs.clave_e) " +
                    "INNER JOIN producto AS p ON be.clave_p = p.clave_p) " +
                    "INNER JOIN cliente AS c ON be.clave_c = c.clave_c) " +
                    "INNER JOIN usuario AS u ON be.clave_u = u.clave_u " +
                    "WHERE be.fecha_e BETWEEN '" + SLibUtils.DbmsDateFormatDate.format(start) + "' AND '" + SLibUtils.DbmsDateFormatDate.format(end) + 
                    "' AND be.clave_u = '" + revueltaId + "' " +
                    (sqlMapItems.isEmpty() ? "" : ("AND p.clave_p IN (" + sqlMapItems + ") "));
            */

            sql = "SELECT Usu_Clave, Pes_ID, Pro_ID, Emp_ID, Pes_Placas, Pes_Chofer, Pes_Completo, Pes_FecHorPri, Pes_FecHorSeg, Usb_Nombre, Emp_Nombre, Pro_Nombre, Pes_BasPri, Pes_OpeNomPri, Pes_ObsPri, Pes_PesoPri, Pes_PesoSeg, Pes_FecHorSeg, Pes_BasSeg, Pes_Bruto, Pes_Tara, Pes_Neto, Pes_OpeNomSeg, Pes_ObsSeg, Pes_Neto " + 
                    "FROM dba.Pesadas as P INNER JOIN dba.Usuarios as U ON U.Usu_Nombre = P.Pes_OpeNomPri " + 
                    "WHERE Pes_FecHorPri BETWEEN '" + SLibUtils.DbmsDateFormatDate.format(start) + "' AND '" + SLibUtils.DbmsDateFormatDate.format(end) +  "' AND Usb_ID = '" +  revueltaId + "' " +
                    (sqlMapItems.isEmpty() ? "" : ("AND Pro_ID IN (" + sqlMapItems + ") "));
            resulset = statement.executeQuery(sql);
            while (resulset.next()) {
                SDbTicketRevuelta ticketRevuelta = new SDbTicketRevuelta();

                /* Deprecation due to change of DBMS of Revuelta's scale software (Alfredo Pérez, 2018-02-19)
                ticketRevuelta.setPkTicketRevueltaId(resulset.getInt(1));
                ticketRevuelta.setPlate(resulset.getString(4));
                ticketRevuelta.setDriver(resulset.getString(6));
                ticketRevuelta.setNote(resulset.getString(5));
                ticketRevuelta.setDatetimeArrival(SLibUtils.DbmsDateFormatDatetime.parse(resulset.getString(2)));
                ticketRevuelta.setDatetimeArrival(datetimeParser.parse(resulset.getString(2).replaceAll("a.m.", "AM").replaceAll("p.m.", "PM")));
                ticketRevuelta.setDatetimeDeparture(SLibUtils.DbmsDateFormatDatetime.parse(resulset.getString(3)));
                ticketRevuelta.setDatetimeDeparture(datetimeParser.parse(resulset.getString(3).replaceAll("a.m.", "AM").replaceAll("p.m.", "PM")));
                ticketRevuelta.setWeightArrival(resulset.getInt(7));
                ticketRevuelta.setWeightDeparture(resulset.getInt(8));
                ticketRevuelta.setWeightNet_r(resulset.getInt(9));
                ticketRevuelta.setProducer(resulset.getString(13));
                ticketRevuelta.setProducerId(resulset.getString(12));
                ticketRevuelta.setItem(resulset.getString(11));
                ticketRevuelta.setItemId(resulset.getString(10));
                ticketRevuelta.setOperator(resulset.getString(16));
                ticketRevuelta.setOperatorId(resulset.getString(15));
                ticketRevuelta.setTurn(resulset.getString(17));
                ticketRevuelta.setScaleId(resulset.getString(18));
                ticketRevuelta.setTared(resulset.getBoolean(19));
                */
                ticketRevuelta.setPkTicketRevueltaId(resulset.getInt("Pes_ID"));
                ticketRevuelta.setPlate(resulset.getString("Pes_Placas"));
                ticketRevuelta.setDriver(resulset.getString("Pes_Chofer"));
                ticketRevuelta.setNote(resulset.getString("Pes_ObsPri"));
                ticketRevuelta.setDatetimeArrival(resulset.getTimestamp("Pes_FecHorPri"));
                ticketRevuelta.setDatetimeDeparture(resulset.getTimestamp("Pes_FecHorSeg"));
                ticketRevuelta.setWeightArrival(resulset.getInt("Pes_PesoPri"));
                ticketRevuelta.setWeightDeparture(resulset.getInt("Pes_PesoSeg"));
                ticketRevuelta.setWeightNet_r(resulset.getInt("Pes_Neto"));
                ticketRevuelta.setProducer(resulset.getString("Emp_Nombre"));
                ticketRevuelta.setProducerId(resulset.getString("Emp_ID"));
                ticketRevuelta.setItem(resulset.getString("Pro_Nombre"));
                ticketRevuelta.setItemId(resulset.getString("Pro_ID"));
                ticketRevuelta.setOperator(resulset.getString("Pes_OpeNomPri"));
                ticketRevuelta.setOperatorId(resulset.getString("Usu_Clave"));
                ticketRevuelta.setTurn("");
                ticketRevuelta.setScaleId(resulset.getString("Pes_BasPri"));
                ticketRevuelta.setTared(resulset.getBoolean("Pes_Completo"));
                ticketRevuelta.setSystem(true);

                ticketRevuelta.setDateStart(start);
                ticketRevuelta.setDateEnd(SLibTimeUtils.createDate(SLibTimeUtils.digestDate(end)[0], SLibTimeUtils.digestDate(end)[1], SLibTimeUtils.digestDate(end)[2] + 1));

                vTicRev.add(ticketRevuelta);
            }

            /* XXX used when ODBC was supported by JVM (Sergio Flores 2015-06-24)
            sql = "SELECT be.clave_e, DateValue(be.fecha_e) + TimeValue(be.hora_e), DateValue(be.fecha_e) + TimeValue(be.hora_e), be.placas, be.observa_e, be.conductor, be.peso_e, be.peso_e, " + // 8
                    "p.clave_p, p.nombre_p, c.clave_c, c.nombre_c, u.nombre_u, be.clave_o, be.nombre_oe, be.turno_oe, be.bascula_e, be.completo " + // 18
                    "FROM ((boleto_ent AS be " +
                    "INNER JOIN producto AS p ON be.clave_p = p.clave_p) " +
                    "INNER JOIN cliente AS c ON be.clave_c = c.clave_c) " +
                    "INNER JOIN usuario AS u ON be.clave_u = u.clave_u " +
                    "WHERE be.completo = no AND be.fecha_e BETWEEN #" + dateFormatDateShort.format(start) + "# AND #" + dateFormatDateShort.format(end) + "# AND be.clave_u = '" + revueltaId + "' " +
                    (sqlMapItems.isEmpty() ? "" : ("AND p.clave_p IN (" + sqlMapItems + ") "));
            */
            /* Deprecation due to change of DBMS of Revuelta's scale software (Alfredo Pérez, 2018-02-19)
            sql = "SELECT be.clave_e, CAST(DATE(be.fecha_e) AS SQL_CHAR) + ' ' + be.hora_e, CAST(DATE(be.fecha_e) AS SQL_CHAR) + ' ' + be.hora_e, be.placas, be.observa_e, be.conductor, be.peso_e, be.peso_e, " + // 8
                    "p.clave_p, p.nombre_p, c.clave_c, c.nombre_c, u.nombre_u, be.clave_o, be.nombre_oe, be.turno_oe, be.bascula_e, be.completo " + // 18
                    "FROM ((boleto_ent AS be " +
                    "INNER JOIN producto AS p ON be.clave_p = p.clave_p) " +
                    "INNER JOIN cliente AS c ON be.clave_c = c.clave_c) " +
                    "INNER JOIN usuario AS u ON be.clave_u = u.clave_u " +
                    "WHERE be.completo = 0 AND be.fecha_e BETWEEN '" + SLibUtils.DbmsDateFormatDate.format(start) + "' AND '" + SLibUtils.DbmsDateFormatDate.format(end) + "' AND be.clave_u =" + revueltaId + " " +
                    (sqlMapItems.isEmpty() ? "" : ("AND p.clave_p IN (" + sqlMapItems + ") "));
            */
            
            sql = "SELECT Usu_Clave, Pes_ID, Pro_ID, Emp_ID, Pes_Placas, Pes_Chofer, Pes_Completo, Pes_FecHorPri, Pes_FecHorSeg, Usb_Nombre, Emp_Nombre, Pro_Nombre, Pes_BasPri, Pes_OpeNomPri, Pes_ObsPri, Pes_PesoPri, Pes_PesoSeg, Pes_FecHorSeg, Pes_BasSeg, Pes_Bruto, Pes_Tara, Pes_Neto, Pes_OpeNomSeg, Pes_ObsSeg, Pes_Neto " + 
                    "FROM dba.Pesadas as P INNER JOIN dba.Usuarios as U ON U.Usu_Nombre = P.Pes_OpeNomPri " + 
                    "WHERE Pes_FecHorPri BETWEEN '" + SLibUtils.DbmsDateFormatDate.format(start) + "' AND '" + SLibUtils.DbmsDateFormatDate.format(end) +  "' " +
                    (sqlMapItems.isEmpty() ? "" : ("AND Pro_ID IN (" + sqlMapItems + ") "));
            
            resulset = statement.executeQuery(sql);
            while (resulset.next()) {
                SDbTicketRevuelta ticketRevuelta = new SDbTicketRevuelta();

                ticketRevuelta.setPkTicketRevueltaId(resulset.getInt("Pes_ID"));
                ticketRevuelta.setPlate(resulset.getString("Pes_Placas"));
                ticketRevuelta.setDriver(resulset.getString("Pes_Chofer"));
                ticketRevuelta.setNote(resulset.getString("Pes_ObsPri"));
                ticketRevuelta.setDatetimeArrival(resulset.getTimestamp("Pes_FecHorPri"));
                ticketRevuelta.setDatetimeDeparture(resulset.getTimestamp("Pes_FecHorSeg"));
                ticketRevuelta.setWeightArrival(resulset.getInt("Pes_PesoPri"));
                ticketRevuelta.setWeightDeparture(resulset.getInt("Pes_PesoSeg"));
                ticketRevuelta.setWeightNet_r(resulset.getInt("Pes_Neto"));
                ticketRevuelta.setProducer(resulset.getString("Emp_Nombre"));
                ticketRevuelta.setProducerId(resulset.getString("Emp_ID"));
                ticketRevuelta.setItem(resulset.getString("Pro_Nombre"));
                ticketRevuelta.setItemId(resulset.getString("Pro_ID"));
                ticketRevuelta.setOperator(resulset.getString("Pes_OpeNomPri"));
                ticketRevuelta.setOperatorId(resulset.getString("Usu_Clave"));
                ticketRevuelta.setTurn("");
                ticketRevuelta.setScaleId(resulset.getString("Pes_BasPri"));
                ticketRevuelta.setTared(resulset.getBoolean("Pes_Completo"));
                ticketRevuelta.setSystem(true);

                ticketRevuelta.setDateStart(start);
                ticketRevuelta.setDateEnd(SLibTimeUtils.createDate(SLibTimeUtils.digestDate(end)[0], SLibTimeUtils.digestDate(end)[1], SLibTimeUtils.digestDate(end)[2] + 1));

                vTicRev.add(ticketRevuelta);
            }
        }
        catch (SQLException e) {
            SLibUtils.showException(this, e);
        }

        return vTicRev;
    }

    public void reloadCatalogues() {

    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            validation = SGuiUtils.validateDateRange(moDateDateStart, moDateDateEnd);
        }

        return validation;
    }

    @Override
    public void createParamsMap() {
        String sqlWhere = "";
        moParamsMap = SPrtUtils.createReportParamsMap(miClient.getSession());
        
        SPaneUserInputCategory inputCategory = new SPaneUserInputCategory(miClient, SModConsts.S_TIC, "it");
        String sqlInputCategories = inputCategory.getSqlFilter();
        if (!sqlInputCategories.isEmpty()) {
            sqlWhere += "AND " + sqlInputCategories;
        }

        moParamsMap.put("tDateStart", moDateDateStart.getValue());
        moParamsMap.put("tDateEnd", moDateDateEnd.getValue());
        moParamsMap.put("sSqlWhere", sqlWhere);
        moParamsMap.put("sMessageFilter", inputCategory.getReportMessageFilter());
    }

    @Override
    public void actionPrint() {
        Vector<SDbTicketRevuelta> revuelta = null;
        SGuiValidation validation = validateForm();
        if (SGuiUtils.computeValidation(miClient, validation)) {
            revuelta = readTicketsRevuelta(moDateDateStart.getValue(), moDateDateEnd.getValue());

            try {
                if (!revuelta.isEmpty()) {
                    revuelta.get(0).delete(miClient.getSession());

                    for (SDbTicketRevuelta ticketRevuelta : revuelta) {
                        ticketRevuelta.save(miClient.getSession());
                    }
                    super.actionPrint();
                }
                else {
                    miClient.showMsgBoxInformation("No se encontró ningún boleto para el período indicado.");
                }
            }
            catch (SQLException e) {
                SLibUtils.showException(this, e);
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
        }
    }
}
