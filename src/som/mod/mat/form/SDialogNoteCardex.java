/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.mat.form;

import java.awt.BorderLayout;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;
import som.mod.SModConsts;
import som.mod.mat.db.SDbStockMovement;
import som.mod.mat.db.SRowNoteCardex;
import som.mod.som.db.SDbTicket;

/**
 *
 * @author Isabel Servín
 */
public class SDialogNoteCardex extends SBeanFormDialog implements ListSelectionListener {
    
    public static final int GUI_PARAMS = 1;
    
    private SDbStockMovement moStkMov;
    private SDbTicket moTicket;
    
    private SGridPaneForm moGridRows;
    private ArrayList<SRowNoteCardex> maNotes;

    /**
     * Creates new form SDialogMovementCardex
     * @param client
     * @param title
     */
    public SDialogNoteCardex(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.MX_STK_CARDEX, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The conte
     * dont of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpRegistry = new javax.swing.JPanel();
        jpData = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlTicket = new javax.swing.JLabel();
        moTextTicket = new sa.lib.gui.bean.SBeanFieldText();
        jPanel5 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moKeyItem = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel6 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDateTicDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel7 = new javax.swing.JPanel();
        jlMovDate = new javax.swing.JLabel();
        moDateMovDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel8 = new javax.swing.JPanel();
        jlProducer = new javax.swing.JLabel();
        moKeyProd = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel9 = new javax.swing.JPanel();
        jlMovCl = new javax.swing.JLabel();
        moKeyMovCl = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel10 = new javax.swing.JPanel();
        jlDriver = new javax.swing.JLabel();
        moTextDriver = new sa.lib.gui.bean.SBeanFieldText();
        jPanel11 = new javax.swing.JPanel();
        jlSerNum = new javax.swing.JLabel();
        moTextSerNum = new sa.lib.gui.bean.SBeanFieldText();
        jPanel12 = new javax.swing.JPanel();
        jlPlate = new javax.swing.JLabel();
        moTextPlates = new sa.lib.gui.bean.SBeanFieldText();
        jLabel1 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jpGrid = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaNote = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpRegistry.setLayout(new java.awt.BorderLayout());

        jpData.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpData.setLayout(new java.awt.GridLayout(5, 2, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTicket.setText("Boleto:");
        jlTicket.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlTicket);

        moTextTicket.setEditable(false);
        moTextTicket.setEnabled(false);
        jPanel4.add(moTextTicket);

        jpData.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Ítem:");
        jlItem.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel5.add(jlItem);

        moKeyItem.setEnabled(false);
        moKeyItem.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel5.add(moKeyItem);

        jpData.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha boleto:");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlDate);

        moDateTicDate.setEnabled(false);
        jPanel6.add(moDateTicDate);

        jpData.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMovDate.setText("Fecha movimiento:");
        jlMovDate.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel7.add(jlMovDate);

        moDateMovDate.setEnabled(false);
        jPanel7.add(moDateMovDate);

        jpData.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProducer.setText("Proveedor:");
        jlProducer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlProducer);

        moKeyProd.setEnabled(false);
        moKeyProd.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel8.add(moKeyProd);

        jpData.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMovCl.setText("Clase movimiento:");
        jlMovCl.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel9.add(jlMovCl);

        moKeyMovCl.setEnabled(false);
        moKeyMovCl.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel9.add(moKeyMovCl);

        jpData.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDriver.setText("Chofer:");
        jlDriver.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlDriver);

        moTextDriver.setEnabled(false);
        moTextDriver.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel10.add(moTextDriver);

        jpData.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSerNum.setText("Folio movimiento:");
        jlSerNum.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel11.add(jlSerNum);

        moTextSerNum.setEditable(false);
        moTextSerNum.setEnabled(false);
        jPanel11.add(moTextSerNum);

        jpData.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPlate.setText("Placas:");
        jlPlate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlPlate);

        moTextPlates.setEnabled(false);
        moTextPlates.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel12.add(moTextPlates);

        jLabel1.setForeground(java.awt.SystemColor.textInactiveText);
        jLabel1.setText("Placas y placas caja");
        jPanel12.add(jLabel1);

        jpData.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jpData.add(jPanel13);

        jpRegistry.add(jpData, java.awt.BorderLayout.NORTH);

        jpGrid.setBorder(javax.swing.BorderFactory.createTitledBorder("Comentarios:"));
        jpGrid.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jtaNote.setEditable(false);
        jtaNote.setColumns(20);
        jtaNote.setRows(5);
        jtaNote.setEnabled(false);
        jScrollPane1.setViewportView(jtaNote);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jpGrid.add(jPanel1, java.awt.BorderLayout.SOUTH);

        jpRegistry.add(jpGrid, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpRegistry, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        
    }//GEN-LAST:event_formWindowActivated

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlDriver;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlMovCl;
    private javax.swing.JLabel jlMovDate;
    private javax.swing.JLabel jlPlate;
    private javax.swing.JLabel jlProducer;
    private javax.swing.JLabel jlSerNum;
    private javax.swing.JLabel jlTicket;
    private javax.swing.JPanel jpData;
    private javax.swing.JPanel jpGrid;
    private javax.swing.JPanel jpRegistry;
    private javax.swing.JTextArea jtaNote;
    private sa.lib.gui.bean.SBeanFieldDate moDateMovDate;
    private sa.lib.gui.bean.SBeanFieldDate moDateTicDate;
    private sa.lib.gui.bean.SBeanFieldKey moKeyItem;
    private sa.lib.gui.bean.SBeanFieldKey moKeyMovCl;
    private sa.lib.gui.bean.SBeanFieldKey moKeyProd;
    private sa.lib.gui.bean.SBeanFieldText moTextDriver;
    private sa.lib.gui.bean.SBeanFieldText moTextPlates;
    private sa.lib.gui.bean.SBeanFieldText moTextSerNum;
    private sa.lib.gui.bean.SBeanFieldText moTextTicket;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 880, 550);
        
        moTextTicket.setTextSettings(SGuiUtils.getLabelName(jlTicket), 50);
        moDateTicDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate), false);
        moKeyProd.setKeySettings(miClient, SGuiUtils.getLabelName(jlProducer), false);
        moTextDriver.setTextSettings(SGuiUtils.getLabelName(jlDriver), 150);
        moTextPlates.setTextSettings(SGuiUtils.getLabelName(jlPlate), 50);
        moTextSerNum.setTextSettings(SGuiUtils.getLabelName(jlSerNum), 9);
        moKeyMovCl.setKeySettings(miClient, SGuiUtils.getLabelName(jlMovCl), false);
        moKeyItem.setKeySettings(miClient, SGuiUtils.getLabelName(jlItem), false);
        moDateMovDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlMovDate), false);
        
        moGridRows = new SGridPaneForm(miClient, SModConsts.MX_NOTE_CARDEX, SLibConsts.UNDEFINED, "Cárdex de comentarios") {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public void createGridColumns() {
                int col = 0;
                SGridColumnForm[] columns = new SGridColumnForm[4];
                
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE, SGridConsts.COL_TITLE_DATE + " movimiento");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Clase movimiento");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_REG_NUM, "Folio movimiento");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Comentario", 530);
            
                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };
        
        moGridRows.setForm(null);
        moGridRows.setPaneFormOwner(null);
        mvFormGrids.add(moGridRows);
        jpGrid.add(moGridRows, BorderLayout.CENTER);
        
        jbSave.setVisible(false);
        jbCancel.setText("Cerrar");
    }
    
    private void readMovCardex() {
        maNotes = new ArrayList<>();
        try {
            String sql = "SELECT " +
                    "m.dt, " +
                    "c.name cl_mvt, " +
                    "CONCAT(m.ser, '-', LPAD(m.num, 6, '0')) folio, " +
                    "n.note " +
                    "FROM m_note n " +
                    "INNER JOIN m_mvt m ON n.fk_mvt_n = m.id_mvt " +
                    "INNER JOIN ms_mvt_cl c ON m.fk_iog_ct = c.id_iog_ct AND m.fk_mvt_cl = c.id_mvt_cl " +
                    "WHERE NOT m.b_del " +
                    "AND m.fk_tic_n = " + moTicket.getPkTicketId() + " " +
                    (moStkMov != null ? "AND n.fk_mvt_n = " + moStkMov.getPkStockMovementId() + " " : " ") +
                    "ORDER BY n.id_note, m.dt, c.name, m.ser, m.num;";
            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
            while (resultSet.next()) {
                SRowNoteCardex row = new SRowNoteCardex();
                row.setDate(resultSet.getTimestamp("dt"));
                row.setClassMov(resultSet.getString("cl_mvt"));
                row.setNumMov(resultSet.getString("folio"));
                row.setNote(resultSet.getString("note"));
                maNotes.add(row);
            }
            
            populateGridRows();
        }
        catch (Exception e) {
            SLibUtils.printException(this, e);
        }
    }
    
    private void populateGridRows() {
        ArrayList<SRowNoteCardex> aux = new ArrayList<>();
        Vector<SGridRow> rows = new Vector<>();
        if (maNotes.size() > 0) {
            for (SRowNoteCardex row : maNotes) {
                aux.add(row);
            }
            rows.addAll(aux);
        }
        moGridRows.populateGrid(rows, this);
    }
    
    private void readParams(SGuiParams params) {
        removeAllListeners();
        moStkMov = null;
        if (params != null) {
            if (params.getParamsMap().get(SModConsts.M_MVT) != null) {
                readStkMov(new int[] { (int) params.getParamsMap().get(SModConsts.M_MVT) });
            }
            readTicket(new int[] { (int) params.getParamsMap().get(SModConsts.S_TIC) });
        }
        reloadCatalogues();
        addAllListeners();
        setTicketData();
        readMovCardex();
    }
    
    private void readTicket(int[] pk) {
        try {
            moTicket = new SDbTicket();
            moTicket.read(miClient.getSession(), pk);
        }
        catch (Exception e) {
            SLibUtils.printException(this, e);
        }
    }
    
    private void readStkMov(int[] pk) {
        try {
            moStkMov = new SDbStockMovement();
            moStkMov.read(miClient.getSession(), pk);
        }
        catch (Exception e) {
            SLibUtils.printException(this, e);
        }
    }
    
    private void setTicketData() {
        moTextTicket.setValue(moTicket.getXtaScaleCode() + " " + moTicket.getNumber());
        moDateTicDate.setValue(moTicket.getDate());
        moKeyProd.setValue(new int[] { moTicket.getFkProducerId() });
        moTextDriver.setValue(moTicket.getDriver());
        moTextPlates.setValue(moTicket.getPlate() + ", " + moTicket.getPlateCage());
        moKeyItem.setValue(new int[] { moTicket.getFkItemId() });
        if (moStkMov != null) {
            moTextSerNum.setText(moStkMov.getSeries() + "-" + String.format("%06d", moStkMov.getNumber()));
            moKeyMovCl.setValue(new int[] { moStkMov.getFkMovementCategoryId(), moStkMov.getFkMovementClassId() });
            moDateMovDate.setValue(moStkMov.getDate()); 
        }
        jtaNote.setText("");
    }
    
    @Override
    public void setVisible(boolean visible) {
        if (maNotes.isEmpty()) {
            if (visible) {
                miClient.showMsgBoxInformation("El registro no tiene comentarios.");
            }
        }
        else {
            super.setVisible(visible);
        }
    }
    
    @Override
    public void addAllListeners() {
        
    }

    @Override
    public void removeAllListeners() {
        
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyItem, SModConsts.SU_ITEM, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyProd, SModConsts.SU_PROD, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyMovCl, SModConsts.MS_MVT_CL, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SGuiValidation validateForm() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    @Override
    public void setValue(final int type, final Object value) {
        switch (type) {
            case GUI_PARAMS:
                readParams((SGuiParams) value);
                break;
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            if (moGridRows.getSelectedGridRow() != null) {
                jtaNote.setText(((SRowNoteCardex) moGridRows.getSelectedGridRow()).getNote());
            }
        }
        else {
            jtaNote.setText("");
        }
    }
}
