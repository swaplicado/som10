/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.mat.form;

import erp.lib.SLibUtilities;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiDate;
import sa.lib.gui.SGuiFields;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;
import som.mod.SModConsts;
import som.mod.SModSysConsts;
import som.mod.mat.db.SDbNote;
import som.mod.mat.db.SDbStock;
import som.mod.mat.db.SDbStockMovement;
import som.mod.mat.db.SDbStockMovementEntry;
import som.mod.mat.db.SMaterialUtils;
import som.mod.mat.db.SRowReferencePicker;
import som.mod.som.db.SDbTicket;
import som.mod.som.db.SDbUnit;

/**
 *
 * @author Isabel Servín
 */
public class SFormWarehouseMovements extends SBeanForm implements ActionListener, FocusListener {

    public static final int GUI_PARAMS = 1;
    
    private SDbStockMovement moRegistry;
    private SDbTicket moTicket;
    private SDbStock moStock;
    private SDbUnit moUnit;
    
    private SGridPaneForm moGridEntries;
    private ArrayList<SDbStockMovementEntry> maStockMovEty;
    
    private int[] maMovementClass;
    private Date mtDateCutOff;
    
    private SDialogTicketPicker moTicketsPicker;
    private SDialogReferencePicker moReferencePicker;
    
    private SGuiFields moFieldsEty;
    
    private boolean mbUserHasSupAdmRig;
    private boolean mbAskToClose;
    
    private int mnShiftId;
    private int mnEmpWahId;
    private int mnEmpProdId;
    
    private ArrayList<SRowReferencePicker> maReferences;
    
    /**
     * Creates new form SFormTicketMovements
     * @param client
     * @param title
     */
    public SFormWarehouseMovements(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.M_MVT, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpRegistry = new javax.swing.JPanel();
        jpMov = new javax.swing.JPanel();
        jpTicData = new javax.swing.JPanel();
        jpTicRow1 = new javax.swing.JPanel();
        jlTicket = new javax.swing.JLabel();
        moTextTicket = new sa.lib.gui.bean.SBeanFieldText();
        jpTicRow2 = new javax.swing.JPanel();
        jlTicDate = new javax.swing.JLabel();
        moDateTicDate = new sa.lib.gui.bean.SBeanFieldDate();
        jpTicRow3 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moKeyItem = new sa.lib.gui.bean.SBeanFieldKey();
        jpTicRow4 = new javax.swing.JPanel();
        jlProd = new javax.swing.JLabel();
        moKeyProd = new sa.lib.gui.bean.SBeanFieldKey();
        jpTicRow5 = new javax.swing.JPanel();
        jlDriver = new javax.swing.JLabel();
        moTextDriver = new sa.lib.gui.bean.SBeanFieldText();
        jpTicRow6 = new javax.swing.JPanel();
        jlPlates = new javax.swing.JLabel();
        moTextPlates = new sa.lib.gui.bean.SBeanFieldText();
        jLabel1 = new javax.swing.JLabel();
        jpMovData = new javax.swing.JPanel();
        jpMovRow1 = new javax.swing.JPanel();
        jlMovTp = new javax.swing.JLabel();
        moKeyMovCl = new sa.lib.gui.bean.SBeanFieldKey();
        jpMovRow2 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDate = new sa.lib.gui.bean.SBeanFieldDate();
        jpMovRow3 = new javax.swing.JPanel();
        jlReference = new javax.swing.JLabel();
        moDateReference = new sa.lib.gui.bean.SBeanFieldDate();
        moIntHourReference = new sa.lib.gui.bean.SBeanFieldInteger();
        jlTwoPoints = new javax.swing.JLabel();
        moIntMinuteReference = new sa.lib.gui.bean.SBeanFieldInteger();
        jl24h = new javax.swing.JLabel();
        jbEditReference = new javax.swing.JButton();
        jbSearchReference = new javax.swing.JButton();
        jpMovRow4 = new javax.swing.JPanel();
        jlShift = new javax.swing.JLabel();
        moKeyShift = new sa.lib.gui.bean.SBeanFieldKey();
        jpMovRow5 = new javax.swing.JPanel();
        jlEmpWah = new javax.swing.JLabel();
        moKeyEmpWah = new sa.lib.gui.bean.SBeanFieldKey();
        jpMovRow6 = new javax.swing.JPanel();
        jlEmpSuprProd = new javax.swing.JLabel();
        moKeyEmpSuprProd = new sa.lib.gui.bean.SBeanFieldKey();
        jpMovRow7 = new javax.swing.JPanel();
        jlMatStatusRef = new javax.swing.JLabel();
        moKeyMatCondRef = new sa.lib.gui.bean.SBeanFieldKey();
        jlCantMatCondRef = new javax.swing.JLabel();
        moIntCantMatCondRef = new sa.lib.gui.bean.SBeanFieldInteger();
        jlUnitRef = new javax.swing.JLabel();
        jpMovEty = new javax.swing.JPanel();
        jpDataEty = new javax.swing.JPanel();
        jpEtyRow1 = new javax.swing.JPanel();
        jlMatStatusMov = new javax.swing.JLabel();
        moKeyMatCondMov = new sa.lib.gui.bean.SBeanFieldKey();
        jlCantMatRefMov = new javax.swing.JLabel();
        moIntCantMatCondMov = new sa.lib.gui.bean.SBeanFieldInteger();
        jlUnitMov = new javax.swing.JLabel();
        jpEtyRow2 = new javax.swing.JPanel();
        jbAdd = new javax.swing.JButton();
        jbClean = new javax.swing.JButton();
        jbDelete = new javax.swing.JButton();
        jpGrid = new javax.swing.JPanel();
        jpQuantities = new javax.swing.JPanel();
        jpQtyRow1 = new javax.swing.JPanel();
        jlCantRef = new javax.swing.JLabel();
        moIntCantRef = new sa.lib.gui.bean.SBeanFieldInteger();
        jlUnitCantRef = new javax.swing.JLabel();
        jpQtyRow2 = new javax.swing.JPanel();
        jlCantMov = new javax.swing.JLabel();
        moIntCantMov = new sa.lib.gui.bean.SBeanFieldInteger();
        jlUnitCantMov = new javax.swing.JLabel();
        jpQtyRow3 = new javax.swing.JPanel();
        jlCantPend = new javax.swing.JLabel();
        moIntCantPend = new sa.lib.gui.bean.SBeanFieldInteger();
        jlUnitCantPend = new javax.swing.JLabel();
        jpQtyRow4 = new javax.swing.JPanel();
        jlNotes = new javax.swing.JLabel();
        moTextNotes = new sa.lib.gui.bean.SBeanFieldText();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jpRegistry.setLayout(new java.awt.BorderLayout());

        jpMov.setLayout(new java.awt.BorderLayout());

        jpTicData.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del boleto:"));
        jpTicData.setLayout(new java.awt.GridLayout(7, 0, 0, 5));

        jpTicRow1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTicket.setText("Boleto:");
        jlTicket.setPreferredSize(new java.awt.Dimension(100, 23));
        jpTicRow1.add(jlTicket);

        moTextTicket.setEditable(false);
        moTextTicket.setEnabled(false);
        jpTicRow1.add(moTextTicket);

        jpTicData.add(jpTicRow1);

        jpTicRow2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTicDate.setText("Fecha boleto:");
        jlTicDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jpTicRow2.add(jlTicDate);

        moDateTicDate.setEnabled(false);
        jpTicRow2.add(moDateTicDate);

        jpTicData.add(jpTicRow2);

        jpTicRow3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Ítem:");
        jlItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jpTicRow3.add(jlItem);

        moKeyItem.setEnabled(false);
        moKeyItem.setPreferredSize(new java.awt.Dimension(300, 23));
        jpTicRow3.add(moKeyItem);

        jpTicData.add(jpTicRow3);

        jpTicRow4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProd.setText("Proveedor:");
        jlProd.setPreferredSize(new java.awt.Dimension(100, 23));
        jpTicRow4.add(jlProd);

        moKeyProd.setEnabled(false);
        moKeyProd.setPreferredSize(new java.awt.Dimension(300, 23));
        jpTicRow4.add(moKeyProd);

        jpTicData.add(jpTicRow4);

        jpTicRow5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDriver.setText("Chofer:");
        jlDriver.setPreferredSize(new java.awt.Dimension(100, 23));
        jpTicRow5.add(jlDriver);

        moTextDriver.setEnabled(false);
        moTextDriver.setPreferredSize(new java.awt.Dimension(200, 23));
        jpTicRow5.add(moTextDriver);

        jpTicData.add(jpTicRow5);

        jpTicRow6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPlates.setText("Placas:");
        jlPlates.setPreferredSize(new java.awt.Dimension(100, 23));
        jpTicRow6.add(jlPlates);

        moTextPlates.setEnabled(false);
        moTextPlates.setPreferredSize(new java.awt.Dimension(200, 23));
        jpTicRow6.add(moTextPlates);

        jLabel1.setForeground(java.awt.SystemColor.textInactiveText);
        jLabel1.setText("Placas y placas caja");
        jpTicRow6.add(jLabel1);

        jpTicData.add(jpTicRow6);

        jpMov.add(jpTicData, java.awt.BorderLayout.CENTER);

        jpMovData.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del movimiento de almacén:"));
        jpMovData.setLayout(new java.awt.GridLayout(7, 1, 0, 5));

        jpMovRow1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMovTp.setText("Clase movimiento:");
        jlMovTp.setPreferredSize(new java.awt.Dimension(140, 23));
        jpMovRow1.add(jlMovTp);

        moKeyMovCl.setEnabled(false);
        moKeyMovCl.setPreferredSize(new java.awt.Dimension(300, 23));
        jpMovRow1.add(moKeyMovCl);

        jpMovData.add(jpMovRow1);

        jpMovRow2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha:*");
        jlDate.setPreferredSize(new java.awt.Dimension(140, 23));
        jpMovRow2.add(jlDate);
        jpMovRow2.add(moDate);

        jpMovData.add(jpMovRow2);

        jpMovRow3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlReference.setText("Referencia:*");
        jlReference.setPreferredSize(new java.awt.Dimension(140, 23));
        jpMovRow3.add(jlReference);

        moDateReference.setEnabled(false);
        jpMovRow3.add(moDateReference);

        moIntHourReference.setText("23");
        moIntHourReference.setEnabled(false);
        moIntHourReference.setPreferredSize(new java.awt.Dimension(30, 23));
        jpMovRow3.add(moIntHourReference);

        jlTwoPoints.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlTwoPoints.setText(":");
        jlTwoPoints.setPreferredSize(new java.awt.Dimension(5, 23));
        jpMovRow3.add(jlTwoPoints);

        moIntMinuteReference.setText("59");
        moIntMinuteReference.setEnabled(false);
        moIntMinuteReference.setPreferredSize(new java.awt.Dimension(30, 23));
        jpMovRow3.add(moIntMinuteReference);

        jl24h.setText("24:00 hrs");
        jl24h.setPreferredSize(new java.awt.Dimension(60, 23));
        jpMovRow3.add(jl24h);

        jbEditReference.setIcon(new javax.swing.ImageIcon(getClass().getResource("/som/gui/img/icon_std_edit.gif"))); // NOI18N
        jbEditReference.setToolTipText("Modificar referencia");
        jbEditReference.setEnabled(false);
        jbEditReference.setPreferredSize(new java.awt.Dimension(23, 23));
        jpMovRow3.add(jbEditReference);

        jbSearchReference.setIcon(new javax.swing.ImageIcon(getClass().getResource("/som/gui/img/icon_std_look.gif"))); // NOI18N
        jbSearchReference.setToolTipText("Seleccionar referencia previa");
        jbSearchReference.setEnabled(false);
        jbSearchReference.setPreferredSize(new java.awt.Dimension(23, 23));
        jpMovRow3.add(jbSearchReference);

        jpMovData.add(jpMovRow3);

        jpMovRow4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlShift.setText("Turno almacén:*");
        jlShift.setPreferredSize(new java.awt.Dimension(140, 23));
        jpMovRow4.add(jlShift);

        moKeyShift.setPreferredSize(new java.awt.Dimension(300, 23));
        jpMovRow4.add(moKeyShift);

        jpMovData.add(jpMovRow4);

        jpMovRow5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEmpWah.setText("Encargado almacén:*");
        jlEmpWah.setPreferredSize(new java.awt.Dimension(140, 23));
        jpMovRow5.add(jlEmpWah);

        moKeyEmpWah.setPreferredSize(new java.awt.Dimension(300, 23));
        jpMovRow5.add(moKeyEmpWah);

        jpMovData.add(jpMovRow5);

        jpMovRow6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEmpSuprProd.setText("Supervisor producción:*");
        jlEmpSuprProd.setPreferredSize(new java.awt.Dimension(140, 23));
        jpMovRow6.add(jlEmpSuprProd);

        moKeyEmpSuprProd.setPreferredSize(new java.awt.Dimension(300, 23));
        jpMovRow6.add(moKeyEmpSuprProd);

        jpMovData.add(jpMovRow6);

        jpMovRow7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMatStatusRef.setText("Estado MP referencia:*");
        jlMatStatusRef.setPreferredSize(new java.awt.Dimension(140, 23));
        jpMovRow7.add(jlMatStatusRef);

        moKeyMatCondRef.setEnabled(false);
        moKeyMatCondRef.setPreferredSize(new java.awt.Dimension(200, 23));
        jpMovRow7.add(moKeyMatCondRef);

        jlCantMatCondRef.setText("Cant.:");
        jlCantMatCondRef.setPreferredSize(new java.awt.Dimension(40, 23));
        jpMovRow7.add(jlCantMatCondRef);

        moIntCantMatCondRef.setEnabled(false);
        moIntCantMatCondRef.setPreferredSize(new java.awt.Dimension(50, 23));
        jpMovRow7.add(moIntCantMatCondRef);

        jlUnitRef.setText("Cajas");
        jlUnitRef.setPreferredSize(new java.awt.Dimension(35, 23));
        jpMovRow7.add(jlUnitRef);

        jpMovData.add(jpMovRow7);

        jpMov.add(jpMovData, java.awt.BorderLayout.WEST);

        jpRegistry.add(jpMov, java.awt.BorderLayout.NORTH);

        jpMovEty.setBorder(javax.swing.BorderFactory.createTitledBorder("Partidas del movimiento de almacén:"));
        jpMovEty.setLayout(new java.awt.BorderLayout());

        jpDataEty.setLayout(new java.awt.GridLayout(2, 0, 0, 5));

        jpEtyRow1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMatStatusMov.setText("Estado MP movimiento:*");
        jlMatStatusMov.setPreferredSize(new java.awt.Dimension(140, 23));
        jpEtyRow1.add(jlMatStatusMov);

        moKeyMatCondMov.setPreferredSize(new java.awt.Dimension(300, 23));
        jpEtyRow1.add(moKeyMatCondMov);

        jlCantMatRefMov.setText("   Cantidad:*");
        jlCantMatRefMov.setPreferredSize(new java.awt.Dimension(80, 23));
        jpEtyRow1.add(jlCantMatRefMov);
        jpEtyRow1.add(moIntCantMatCondMov);

        jlUnitMov.setText("Cajas");
        jlUnitMov.setPreferredSize(new java.awt.Dimension(35, 23));
        jpEtyRow1.add(jlUnitMov);

        jpDataEty.add(jpEtyRow1);

        jpEtyRow2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbAdd.setText("Agregar");
        jbAdd.setPreferredSize(new java.awt.Dimension(100, 23));
        jpEtyRow2.add(jbAdd);

        jbClean.setText("Limpiar");
        jbClean.setPreferredSize(new java.awt.Dimension(100, 23));
        jpEtyRow2.add(jbClean);

        jbDelete.setText("Eliminar");
        jbDelete.setPreferredSize(new java.awt.Dimension(100, 23));
        jpEtyRow2.add(jbDelete);

        jpDataEty.add(jpEtyRow2);

        jpMovEty.add(jpDataEty, java.awt.BorderLayout.NORTH);

        jpGrid.setLayout(new java.awt.BorderLayout());
        jpMovEty.add(jpGrid, java.awt.BorderLayout.CENTER);

        jpQuantities.setLayout(new java.awt.GridLayout(4, 0, 0, 5));

        jpQtyRow1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCantRef.setText("Cantidad referencia:");
        jlCantRef.setPreferredSize(new java.awt.Dimension(140, 23));
        jpQtyRow1.add(jlCantRef);

        moIntCantRef.setEnabled(false);
        jpQtyRow1.add(moIntCantRef);

        jlUnitCantRef.setText("Cajas");
        jlUnitCantRef.setPreferredSize(new java.awt.Dimension(35, 23));
        jpQtyRow1.add(jlUnitCantRef);

        jpQuantities.add(jpQtyRow1);

        jpQtyRow2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCantMov.setText("Cantidad movimiento:");
        jlCantMov.setPreferredSize(new java.awt.Dimension(140, 23));
        jpQtyRow2.add(jlCantMov);

        moIntCantMov.setEnabled(false);
        jpQtyRow2.add(moIntCantMov);

        jlUnitCantMov.setText("Cajas");
        jlUnitCantMov.setPreferredSize(new java.awt.Dimension(35, 23));
        jpQtyRow2.add(jlUnitCantMov);

        jpQuantities.add(jpQtyRow2);

        jpQtyRow3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCantPend.setText("Cantidad pendiente:");
        jlCantPend.setPreferredSize(new java.awt.Dimension(140, 23));
        jpQtyRow3.add(jlCantPend);

        moIntCantPend.setEnabled(false);
        jpQtyRow3.add(moIntCantPend);

        jlUnitCantPend.setText("Cajas");
        jlUnitCantPend.setPreferredSize(new java.awt.Dimension(35, 23));
        jpQtyRow3.add(jlUnitCantPend);

        jpQuantities.add(jpQtyRow3);

        jpQtyRow4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNotes.setText("Comentarios:");
        jlNotes.setPreferredSize(new java.awt.Dimension(140, 23));
        jpQtyRow4.add(jlNotes);

        moTextNotes.setPreferredSize(new java.awt.Dimension(750, 23));
        jpQtyRow4.add(moTextNotes);

        jpQuantities.add(jpQtyRow4);

        jpMovEty.add(jpQuantities, java.awt.BorderLayout.SOUTH);

        jpRegistry.add(jpMovEty, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpRegistry, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        actionCancel();
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton jbAdd;
    private javax.swing.JButton jbClean;
    private javax.swing.JButton jbDelete;
    private javax.swing.JButton jbEditReference;
    private javax.swing.JButton jbSearchReference;
    private javax.swing.JLabel jl24h;
    private javax.swing.JLabel jlCantMatCondRef;
    private javax.swing.JLabel jlCantMatRefMov;
    private javax.swing.JLabel jlCantMov;
    private javax.swing.JLabel jlCantPend;
    private javax.swing.JLabel jlCantRef;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlDriver;
    private javax.swing.JLabel jlEmpSuprProd;
    private javax.swing.JLabel jlEmpWah;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlMatStatusMov;
    private javax.swing.JLabel jlMatStatusRef;
    private javax.swing.JLabel jlMovTp;
    private javax.swing.JLabel jlNotes;
    private javax.swing.JLabel jlPlates;
    private javax.swing.JLabel jlProd;
    private javax.swing.JLabel jlReference;
    private javax.swing.JLabel jlShift;
    private javax.swing.JLabel jlTicDate;
    private javax.swing.JLabel jlTicket;
    private javax.swing.JLabel jlTwoPoints;
    private javax.swing.JLabel jlUnitCantMov;
    private javax.swing.JLabel jlUnitCantPend;
    private javax.swing.JLabel jlUnitCantRef;
    private javax.swing.JLabel jlUnitMov;
    private javax.swing.JLabel jlUnitRef;
    private javax.swing.JPanel jpDataEty;
    private javax.swing.JPanel jpEtyRow1;
    private javax.swing.JPanel jpEtyRow2;
    private javax.swing.JPanel jpGrid;
    private javax.swing.JPanel jpMov;
    private javax.swing.JPanel jpMovData;
    private javax.swing.JPanel jpMovEty;
    private javax.swing.JPanel jpMovRow1;
    private javax.swing.JPanel jpMovRow2;
    private javax.swing.JPanel jpMovRow3;
    private javax.swing.JPanel jpMovRow4;
    private javax.swing.JPanel jpMovRow5;
    private javax.swing.JPanel jpMovRow6;
    private javax.swing.JPanel jpMovRow7;
    private javax.swing.JPanel jpQtyRow1;
    private javax.swing.JPanel jpQtyRow2;
    private javax.swing.JPanel jpQtyRow3;
    private javax.swing.JPanel jpQtyRow4;
    private javax.swing.JPanel jpQuantities;
    private javax.swing.JPanel jpRegistry;
    private javax.swing.JPanel jpTicData;
    private javax.swing.JPanel jpTicRow1;
    private javax.swing.JPanel jpTicRow2;
    private javax.swing.JPanel jpTicRow3;
    private javax.swing.JPanel jpTicRow4;
    private javax.swing.JPanel jpTicRow5;
    private javax.swing.JPanel jpTicRow6;
    private sa.lib.gui.bean.SBeanFieldDate moDate;
    private sa.lib.gui.bean.SBeanFieldDate moDateReference;
    private sa.lib.gui.bean.SBeanFieldDate moDateTicDate;
    private sa.lib.gui.bean.SBeanFieldInteger moIntCantMatCondMov;
    private sa.lib.gui.bean.SBeanFieldInteger moIntCantMatCondRef;
    private sa.lib.gui.bean.SBeanFieldInteger moIntCantMov;
    private sa.lib.gui.bean.SBeanFieldInteger moIntCantPend;
    private sa.lib.gui.bean.SBeanFieldInteger moIntCantRef;
    private sa.lib.gui.bean.SBeanFieldInteger moIntHourReference;
    private sa.lib.gui.bean.SBeanFieldInteger moIntMinuteReference;
    private sa.lib.gui.bean.SBeanFieldKey moKeyEmpSuprProd;
    private sa.lib.gui.bean.SBeanFieldKey moKeyEmpWah;
    private sa.lib.gui.bean.SBeanFieldKey moKeyItem;
    private sa.lib.gui.bean.SBeanFieldKey moKeyMatCondMov;
    private sa.lib.gui.bean.SBeanFieldKey moKeyMatCondRef;
    private sa.lib.gui.bean.SBeanFieldKey moKeyMovCl;
    private sa.lib.gui.bean.SBeanFieldKey moKeyProd;
    private sa.lib.gui.bean.SBeanFieldKey moKeyShift;
    private sa.lib.gui.bean.SBeanFieldText moTextDriver;
    private sa.lib.gui.bean.SBeanFieldText moTextNotes;
    private sa.lib.gui.bean.SBeanFieldText moTextPlates;
    private sa.lib.gui.bean.SBeanFieldText moTextTicket;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 960, 600);
        
        mbUserHasSupAdmRig = miClient.getSession().getUser().hasPrivilege(new int[] { SModSysConsts.CS_RIG_RMES, SModSysConsts.CS_RIG_RMEA });
        
        moFieldsEty = new SGuiFields();
        
        mnShiftId = 0;
        mnEmpWahId = 0;
        mnEmpProdId = 0;
        
        moTextTicket.setTextSettings(SGuiUtils.getLabelName(jlTicket), 10, 1);
        moDateTicDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlTicDate), false);
        moKeyItem.setKeySettings(miClient, SGuiUtils.getLabelName(jlItem), false);
        moKeyProd.setKeySettings(miClient, SGuiUtils.getLabelName(jlProd), false);
        moTextDriver.setTextSettings(SGuiUtils.getLabelName(jlDriver), 150);
        moTextPlates.setTextSettings(SGuiUtils.getLabelName(jlPlates), 50);
        
        moKeyMovCl.setKeySettings(miClient, SGuiUtils.getLabelName(jlMovTp), true);
        moDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate), true);
        moDateReference.setDateSettings(miClient, SGuiUtils.getLabelName(jlReference), true);
        moIntHourReference.setIntegerSettings(SGuiUtils.getLabelName(jlReference), SGuiConsts.GUI_TYPE_INT_CAL_MONTH, false);
        moIntMinuteReference.setIntegerSettings(SGuiUtils.getLabelName(jlReference), SGuiConsts.GUI_TYPE_INT_CAL_MONTH, false);
        moKeyMatCondRef.setKeySettings(miClient, SGuiUtils.getLabelName(jlMatStatusRef), true);
        moIntCantMatCondRef.setIntegerSettings(SGuiUtils.getLabelName(jlCantMatCondRef), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moKeyShift.setKeySettings(miClient, SGuiUtils.getLabelName(jlShift), true);
        moKeyEmpWah.setKeySettings(miClient, SGuiUtils.getLabelName(jlEmpWah), true);
        moKeyEmpSuprProd.setKeySettings(miClient, SGuiUtils.getLabelName(jlEmpSuprProd), true);
        moTextNotes.setTextSettings(SGuiUtils.getLabelName(jlNotes), 255, 0);
        
        moKeyMatCondMov.setKeySettings(miClient, SGuiUtils.getLabelName(jlMatStatusMov), false);
        moIntCantMatCondMov.setIntegerSettings(SGuiUtils.getLabelName(jlCantMatRefMov), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        
        moFields.addField(moKeyMovCl);
        moFields.addField(moDate);
        moFields.addField(moDateReference);
        moFields.addField(moIntHourReference);
        moFields.addField(moIntMinuteReference);
        moFields.addField(moKeyMatCondRef);
        moFields.addField(moIntCantMatCondRef);
        moFields.addField(moKeyShift);
        moFields.addField(moKeyEmpWah);
        moFields.addField(moKeyEmpSuprProd);
        moFields.addField(moKeyMatCondMov);
        moFields.addField(moIntCantMatCondMov);
        moFields.addField(moTextNotes);
        moFields.setFormButton(jbSave);
        
        moFieldsEty.addField(moKeyMatCondMov);
        moFieldsEty.addField(moIntCantMatCondMov);
        moIntCantMatCondMov.setNextButton(jbAdd);
        moTextNotes.setNextButton(jbSave);
        
        moGridEntries = new SGridPaneForm(miClient, SModConsts.M_MVT_ETY, SLibConsts.UNDEFINED, "Entradas de movimientos") {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public void createGridColumns() {
                int col = 0;
                SGridColumnForm[] columns = new SGridColumnForm[3];
                
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Estado MP movimiento", 300);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_0D, "Cantidad", 100);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad", 70);
                
                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };
        
        moGridEntries.setForm(null);
        moGridEntries.setPaneFormOwner(null);
        mvFormGrids.add(moGridEntries);
        jpGrid.add(moGridEntries, BorderLayout.CENTER);
        
        jbEdit.setVisible(false);
        jbReadInfo.setVisible(false);
    }
    
    private void readParams(SGuiParams params) {
        if (params != null) {
            if (params.getParamsMap().get(SModConsts.MS_MVT_CL) != null) {
                maMovementClass = (int[]) params.getParamsMap().get(SModConsts.MS_MVT_CL);
            }
            if (SLibUtils.compareKeys(maMovementClass, SModSysConsts.MS_MVT_CL_IN_CNV) ||
                    SLibUtils.compareKeys(maMovementClass, SModSysConsts.MS_MVT_CL_OUT_PRD) || 
                    SLibUtils.compareKeys(maMovementClass, SModSysConsts.MS_MVT_CL_OUT_REC) || 
                    SLibUtils.compareKeys(maMovementClass, SModSysConsts.MS_MVT_CL_OUT_ADJ)) {
                if (params.getParamsMap().get(SModConsts.M_STK) != null) {
                    moStock = (SDbStock) params.getParamsMap().get(SModConsts.M_STK);
                    readTicket(new int[] { moStock.getFkTicketId_n() });
                }
                if (params.getParamsMap().get(SGridConsts.FILTER_DATE) != null) {
                    mtDateCutOff = (SGuiDate) params.getParamsMap().get(SGridConsts.FILTER_DATE);
                }
                else {
                    mtDateCutOff = null;
                }
            }
            else {
                if (params.getParamsMap().get(SModConsts.S_TIC) != null) {
                    readTicket((int[]) params.getParamsMap().get(SModConsts.S_TIC));
                }
                else {
                    moTicket = null;
                }
                mtDateCutOff = null;
            }
            if (SLibUtils.compareKeys(maMovementClass, SModSysConsts.MS_MVT_CL_OUT_PRD) || 
                    SLibUtils.compareKeys(maMovementClass, SModSysConsts.MS_MVT_CL_OUT_REC) || 
                    SLibUtils.compareKeys(maMovementClass, SModSysConsts.MS_MVT_CL_OUT_ADJ)) {
                this.setTitle("Salida de almacén");
            }
            else {
                this.setTitle("Entrada de almacén");
            }
        }
    }
    
    private void readTicket(int[] pk) {
        try {
            moTicket = new SDbTicket();
            moTicket.read(miClient.getSession(), pk);
        }
        catch (Exception e) {
            SLibUtils.printException(this, e);
        }
    }
    
    private void readUnitDefault() throws Exception {
        try {
            moUnit = new SDbUnit();
            moUnit.read(miClient.getSession(), new int[] { SMaterialUtils.getParamUnitDefault(miClient.getSession()) });
        }
        catch (Exception e) {
            throw new Exception("No se encontró la unidad predeterminada.\nContactar a soporte.");
        }
    }
    
    private boolean validateHasTicket() throws Exception {
        boolean ticket = false;
        if (moTicket == null) {
            moTicketsPicker = SMaterialUtils.getOptionTicketPicker(miClient);
            moTicketsPicker.setVisible(true);
            if (moTicketsPicker.getPickerResult() == SGuiConsts.FORM_RESULT_OK) {
                readTicket((int[]) moTicketsPicker.getOption());
                ticket = true;
            }
            else {
                mbCanShowForm = false;
            }
        }
        else ticket = true;
        return ticket;
    }
    
    private SGuiValidation validateEntry() {
        SGuiValidation validation = moFieldsEty.validateFields();
        
        if (validation.isValid()) {
            if (moKeyMatCondMov.getSelectedIndex() <= 0) {
                validation.setMessage("Debe seleccionar un " + SGuiUtils.getLabelName(jlMatStatusMov) + ".");
                validation.setComponent(moKeyMatCondMov);
            }
        }
        if (validation.isValid()) {
            if (moIntCantMatCondMov.getValue() <= 0) {
                validation.setMessage("La cantidad debe ser mayor a 0.");
                validation.setComponent(moIntCantMatCondMov);
            }
        }
        if (validation.isValid()) {
            if (SLibUtils.compareKeys(moKeyMovCl.getValue(), SModSysConsts.MS_MVT_CL_IN_CNV)) {
                if (SLibUtils.compareKeys(moKeyMatCondRef.getValue(), moKeyMatCondMov.getValue())) {
                    validation.setMessage("El " + SGuiUtils.getLabelName(jlMatStatusMov) + " no puede ser el mismo que el " + SGuiUtils.getLabelName(jlMatStatusRef) + ".\n"
                            + "Favor de seleccionar otro estado MP movimiento.");
                    validation.setComponent(moKeyMatCondMov);
                }
            }
        }
        
        return validation;
    }
    
    private void populateGridEntries() throws Exception {
        ArrayList<SDbStockMovementEntry> aux = new ArrayList<>();
        Vector<SGridRow> rows = new Vector<>();
        if (maStockMovEty.size() > 0) {
            for (SDbStockMovementEntry ety : maStockMovEty) {
                aux.add(ety);
            }
            rows.addAll(aux);
        }
        moGridEntries.populateGrid(rows);
    }
    
    private SDbStockMovementEntry setEtyValues(SDbStockMovementEntry ety) throws Exception {
        ety.setQuantity(moIntCantMatCondMov.getValue());
        ety.setFkItemId(moTicket.getFkItemId());
        ety.setFkUnitId(moUnit.getPkUnitId());
        ety.readXtaUnit(miClient.getSession());
        ety.setFkMaterialConditionId(moKeyMatCondMov.getValue()[0]);
        ety.readXtaMatCond(miClient.getSession());
        ety.setFkTicketId_n(moTicket.getPkTicketId());
        ety.readXtaTicNum(miClient.getSession());
        
        return ety;
    }
    
    private void updCants() {
        int cantTotal = 0;
        for (SDbStockMovementEntry ety : maStockMovEty) {
            cantTotal += ety.getQuantity();
        }
        moIntCantMov.setValue(cantTotal);
        if (SLibUtils.compareKeys(moKeyMovCl.getValue(), SModSysConsts.MS_MVT_CL_IN_REC) ||
                SLibUtils.compareKeys(moKeyMovCl.getValue(), SModSysConsts.MS_MVT_CL_IN_CNV) ||
                SLibUtils.compareKeys(moKeyMovCl.getValue(), SModSysConsts.MS_MVT_CL_OUT_PRD) ||
                SLibUtils.compareKeys(moKeyMovCl.getValue(), SModSysConsts.MS_MVT_CL_OUT_REC) ||
                SLibUtils.compareKeys(moKeyMovCl.getValue(), SModSysConsts.MS_MVT_CL_OUT_ADJ)) {
            int cantPend = moIntCantRef.getValue() - moIntCantMov.getValue();
            moIntCantPend.setValue(cantPend >= 0 ? cantPend : 0);
        }
    }
    
    private void actionEditReference() {
        SimpleDateFormat hour = new SimpleDateFormat("HH");
        SimpleDateFormat min = new SimpleDateFormat("mm");
        Date now = new Date();
        moDateReference.setValue(now);
        moIntHourReference.setValue(SLibUtilities.parseInt(hour.format(now)));
        moIntMinuteReference.setValue(SLibUtilities.parseInt(min.format(now)));
        moDateReference.setEnabled(true);
        moIntHourReference.setEnabled(true);
        moIntMinuteReference.setEnabled(true);
        moDateReference.requestFocus();
    }
    
    private void actionSearchReference() {
        if (moReferencePicker == null) {
            moReferencePicker = new SDialogReferencePicker(miClient, "Seleccionar referencia previa");
            moReferencePicker.setValue(SDialogReferencePicker.ARRAY_REFERENCE, maReferences);
        }
        moReferencePicker.setVisible(true);
        if (moReferencePicker.getFormResult() == SGuiConsts.FORM_RESULT_OK) {
            SimpleDateFormat hour = new SimpleDateFormat("HH");
            SimpleDateFormat min = new SimpleDateFormat("mm");
            Date date = ((Date) moReferencePicker.getValue(SDialogReferencePicker.SELECTED_OPC));
            moDateReference.setValue(date);
            moIntHourReference.setValue(SLibUtils.parseInt(hour.format(date)));
            moIntMinuteReference.setValue(SLibUtils.parseInt(min.format(date)));  
            moDateReference.setEnabled(false);
            moIntHourReference.setEnabled(false);
            moIntMinuteReference.setEnabled(false);
        }
    }
    
    private void actionAdd() {
        try {
            SGuiValidation validation = validateEntry();
            
            if (SGuiUtils.computeValidation(miClient, validation)) {
                boolean isNewEty = true;
                for (SDbStockMovementEntry ety : maStockMovEty) {
                    if (moKeyMatCondMov.getValue()[0] == ety.getFkMaterialConditionId()) {
                        ety.setQuantity(ety.getQuantity() + moIntCantMatCondMov.getValue());
                        isNewEty = false;
                    }
                }
                if (isNewEty) {
                    SDbStockMovementEntry ety = new SDbStockMovementEntry();

                    ety = setEtyValues(ety);
                    ety.setRegistryNew(true);
                    maStockMovEty.add(ety);
                }
                
                populateGridEntries();
                updCants();
                actionCleanEtyControls();
                moKeyMatCondMov.requestFocus();
            }
        } 
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void actionCleanEtyControls() {
        moKeyMatCondMov.setValue(new int[] { 0 });
        moIntCantMatCondMov.setValue(0);
    }
    
    private void actionDelete() {
        try {
            maStockMovEty.remove((SDbStockMovementEntry) moGridEntries.getSelectedGridRow());
            populateGridEntries();
            updCants();
        } 
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void focusLostHourReference() {
        if (moIntHourReference.isEnabled()) {
            if (moIntHourReference.getValue() > 23) {
                moIntHourReference.setValue(23);
            }
        }
    }
    
    private void focusLostMinuteReference() {
        if (moIntMinuteReference.isEnabled()) {
            if (moIntMinuteReference.getValue() > 59) {
                moIntMinuteReference.setValue(59);
            }
        }
    }
    
    @Override
    public void addAllListeners() {
        jbEditReference.addActionListener(this);
        jbSearchReference.addActionListener(this);
        jbAdd.addActionListener(this);
        jbClean.addActionListener(this);
        jbDelete.addActionListener(this);
        moIntHourReference.addFocusListener(this);
        moIntMinuteReference.addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbEditReference.removeActionListener(this);
        jbSearchReference.removeActionListener(this);
        jbAdd.removeActionListener(this);
        jbClean.removeActionListener(this);
        jbDelete.removeActionListener(this);
        moIntHourReference.removeFocusListener(this);
        moIntMinuteReference.removeFocusListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyItem, SModConsts.SU_ITEM, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyProd, SModConsts.SU_PROD, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyMovCl, SModConsts.MS_MVT_CL, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyMatCondRef, SModConsts.MU_MAT_COND, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyShift, SModConsts.MU_SHIFT, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyEmpWah, SModConsts.MU_EMP, SModSysConsts.MS_EMP_TP_WAH_MAN, null);
        miClient.getSession().populateCatalogue(moKeyEmpSuprProd, SModConsts.MU_EMP, SModSysConsts.MS_EMP_TP_MFG_SUP, null);
        miClient.getSession().populateCatalogue(moKeyMatCondMov, SModConsts.MU_MAT_COND, SLibConsts.UNDEFINED, null);        
    }
    
    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbStockMovement) registry;
        
        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;
        moReferencePicker = null;
        mbAskToClose = false;
        readUnitDefault();
        
        if (validateHasTicket()) {
            removeAllListeners();
            reloadCatalogues();
            jtfRegistryKey.setText("");
            mbAskToClose = true;

            if (moRegistry.isRegistryNew()) {
                moRegistry.initPrimaryKey();
                moKeyMovCl.setValue(maMovementClass);
            }
            else {
                moKeyMovCl.setValue(new int[] { moRegistry.getFkMovementClassId(), moRegistry.getFkMovementCategoryId() });
            }

            moTextTicket.setValue(moTicket.getXtaScaleCode() + " " + moTicket.getNumber());
            moDateTicDate.setValue(moTicket.getDate());
            moKeyItem.setValue(new int[] { moTicket.getFkItemId()} );
            moKeyProd.setValue(new int[] { moTicket.getFkProducerId()} );
            moTextDriver.setValue(moTicket.getDriver());
            moTextPlates.setValue(moTicket.getPlate() + (moTicket.getPlateCage().isEmpty() ? "" : ", " + moTicket.getPlateCage()));

            moDate.setValue(SMaterialUtils.getSuggestMovementDate(miClient.getSession()));
            
            SimpleDateFormat hour = new SimpleDateFormat("HH");
            SimpleDateFormat min = new SimpleDateFormat("mm");
            if (SLibUtils.compareKeys(moKeyMovCl.getValue(), SModSysConsts.MS_MVT_CL_IN_REC) || 
                    SLibUtils.compareKeys(moKeyMovCl.getValue(), SModSysConsts.MS_MVT_CL_IN_PRD) || 
                    SLibUtils.compareKeys(moKeyMovCl.getValue(), SModSysConsts.MS_MVT_CL_IN_ADJ)) {
                Date now = new Date();
                
                maReferences = SMaterialUtils.getReferenceTicketRows(miClient.getSession(), moTicket.getPkTicketId());
                if (maReferences.isEmpty()) {
                    if (mtDateCutOff != null) {
                        if (mtDateCutOff.after(miClient.getSession().getSystemDate())) {
                            moDateReference.setValue(now);
                        }
                        else {
                            moDateReference.setValue(mtDateCutOff);
                        }
                    }
                    else {
                        moDateReference.setValue(now);
                    }
                    moIntHourReference.setValue(SLibUtilities.parseInt(hour.format(now)));
                    moIntMinuteReference.setValue(SLibUtilities.parseInt(min.format(now)));
//                    moDateReference.setEnabled(true);
//                    moIntHourReference.setEnabled(true);
//                    moIntMinuteReference.setEnabled(true);
                    jbEditReference.setEnabled(false);
                    jbSearchReference.setEnabled(false);
                }
                else {
                    Date date = maReferences.get(0).getReference();
                    moDateReference.setValue(date);
                    moIntHourReference.setValue(SLibUtilities.parseInt(hour.format(date)));
                    moIntMinuteReference.setValue(SLibUtils.parseInt(min.format(date)));  
                    moDateReference.setEnabled(false);
                    moIntHourReference.setEnabled(false);
                    moIntMinuteReference.setEnabled(false);
//                    jbEditReference.setEnabled(true);
//                    jbSearchReference.setEnabled(true);
                }
            }
            else {
                String[] dateTimeRef = moStock.getReference().split(" ");
                LocalDate fecha = LocalDate.parse(dateTimeRef[0]);
                Date date = Date.from(fecha.atStartOfDay(ZoneId.systemDefault()).toInstant());
                moDateReference.setValue(date);
                String[] timeRef = dateTimeRef.length > 1 ? dateTimeRef[1].split(":") : ":".split(":");
                moIntHourReference.setValue(SLibUtils.parseInt(timeRef[0]));
                moIntMinuteReference.setValue(SLibUtils.parseInt(timeRef[1]));  
                moDateReference.setEnabled(false);
                moIntHourReference.setEnabled(false);
                moIntMinuteReference.setEnabled(false);
                jbEditReference.setEnabled(false);
                jbSearchReference.setEnabled(false);
            }
            
            moIntCantMov.setValue(0);
            moIntCantRef.setValue(0);
            moIntCantPend.setValue(0);
            // Para salidas y conversión
            if (SLibUtils.compareKeys(moKeyMovCl.getValue(), SModSysConsts.MS_MVT_CL_IN_CNV) ||
                    SLibUtils.compareKeys(moKeyMovCl.getValue(), SModSysConsts.MS_MVT_CL_OUT_PRD) || 
                    SLibUtils.compareKeys(moKeyMovCl.getValue(), SModSysConsts.MS_MVT_CL_OUT_REC) ||
                    SLibUtils.compareKeys(moKeyMovCl.getValue(), SModSysConsts.MS_MVT_CL_OUT_ADJ)) {
                moKeyMatCondRef.setValue(new int[] { moStock.getFkMaterialConditionId() });
                HashMap<Integer, Integer> stkTicMatCond = SMaterialUtils.getStockByTicket(miClient.getSession(), 
                        moTicket.getPkTicketId(), mtDateCutOff, moStock.getFkMaterialConditionId()); // fecha de corte
                moIntCantMatCondRef.setValue(stkTicMatCond.get(moStock.getFkMaterialConditionId())); 
                moIntCantRef.setValue(stkTicMatCond.get(moStock.getFkMaterialConditionId()));
            }
            else {
                moKeyMatCondRef.setValue(new int[] { 0 });
            }
            // Entradas de recepción
            if (SLibUtils.compareKeys(moKeyMovCl.getValue(), SModSysConsts.MS_MVT_CL_IN_REC)) {
                int tot = SMaterialUtils.getQtyRecibedByTicket(miClient.getSession(), moTicket.getPkTicketId());
                moIntCantRef.setValue(((int) moTicket.getPackingFullQuantityArrival()) - tot);
            }
            
            maStockMovEty = new ArrayList<>();
            for (SDbStockMovementEntry ety : moRegistry.getChildEntries()) {
                maStockMovEty.add(ety);            
            }
            moIntCantMatCondMov.setValue(0);
            
            moTextNotes.setValue("");
            jlUnitRef.setText(moUnit.getName());
            jlUnitMov.setText(moUnit.getName());        
            jlUnitCantRef.setText(moUnit.getName());        
            jlUnitCantMov.setText(moUnit.getName());        
            jlUnitCantPend.setText(moUnit.getName());
            
            if (mnShiftId == 0) {
                if (moKeyShift.getComponent().getItemCount() == 2) {
                    moKeyShift.setSelectedIndex(1);
                }
            }
            else {
                moKeyShift.setValue(new int[] { mnShiftId });
            }
            
            if (mnEmpWahId == 0) {
                if (moKeyEmpWah.getComponent().getItemCount() == 2) {
                    moKeyEmpWah.setSelectedIndex(1);
                }
            }
            else {
                moKeyEmpWah.setValue(new int[] { mnEmpWahId });
            }
            
            if (mnEmpProdId == 0) {
                if (moKeyEmpSuprProd.getComponent().getItemCount() == 2) {
                    moKeyEmpSuprProd.setSelectedIndex(1);
                }
            }
            else {
                moKeyEmpSuprProd.setValue(new int[] { mnEmpProdId });
            }

            populateGridEntries();
            addAllListeners();
            updCants();
        }
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbStockMovement registry = moRegistry.clone();
        
        if (registry.isRegistryNew()) {}
        
        mnShiftId = moKeyShift.getValue()[0];
        mnEmpWahId = moKeyEmpWah.getValue()[0];
        mnEmpProdId = moKeyEmpSuprProd.getValue()[0];
        
        registry.setSeries(SMaterialUtils.getTicketMovementSerie(miClient.getSession(), moKeyMovCl.getValue()));
        registry.setDate(moDate.getValue());
        registry.setReference(SLibUtils.DbmsDateFormatDate.format(moDateReference.getValue()) + " " + 
                (moIntHourReference.getValue() < 10 ? "0" : "") + moIntHourReference.getValue() + ":" + 
                (moIntMinuteReference.getValue() < 10 ? "0" : "") + moIntMinuteReference.getValue());
        registry.setFkMovementCategoryId(moKeyMovCl.getValue()[0]);
        registry.setFkMovementClassId(moKeyMovCl.getValue()[1]);
        registry.setFkTicketId_n(moTicket.getPkTicketId());
        registry.setFkShiftId(moKeyShift.getValue()[0]);
        registry.setFkEmployeeWarehouseManId(moKeyEmpWah.getValue()[0]);
        registry.setFkEmployeeManufacturingSupId(moKeyEmpSuprProd.getValue()[0]);
        
        registry.getChildEntries().clear();
        for (SDbStockMovementEntry ety : maStockMovEty) {
            registry.getChildEntries().add(ety);
        }
        
        if (!moTextNotes.getValue().isEmpty()) {
            SDbNote note = new SDbNote();
            note.setNote(moTextNotes.getValue());
            note.setNoteType(SModSysConsts.M_NOTE_TP_MVT);
            note.setReference(SLibUtils.DbmsDateFormatDate.format(moDateReference.getValue()) + " " + 
                (moIntHourReference.getValue() < 10 ? "0" : "") + moIntHourReference.getValue() + ":" + 
                (moIntMinuteReference.getValue() < 10 ? "0" : "") + moIntMinuteReference.getValue()); 
            note.setSystem(true);
            note.setFkTicketId_n(moTicket.getPkTicketId());
            registry.setDbNote(note);
        }
        
        if (SLibUtils.compareKeys(moKeyMovCl.getValue(), SModSysConsts.MS_MVT_CL_IN_CNV)) {
            registry.setAuxStockOrig(moStock);
        }
        
        if (SLibUtils.compareKeys(moKeyMovCl.getValue(), SModSysConsts.MS_MVT_CL_OUT_PRD) || 
                SLibUtils.compareKeys(moKeyMovCl.getValue(), SModSysConsts.MS_MVT_CL_OUT_REC) ||
                SLibUtils.compareKeys(moKeyMovCl.getValue(), SModSysConsts.MS_MVT_CL_OUT_ADJ)) {
            SDbStockMovement mvtCnv = registry.clone();
            mvtCnv.setSeries(SMaterialUtils.getTicketMovementSerie(miClient.getSession(), SModSysConsts.MS_MVT_CL_IN_CNV));
            mvtCnv.setFkMovementCategoryId(SModSysConsts.MS_MVT_CL_IN_CNV[0]);
            mvtCnv.setFkMovementClassId(SModSysConsts.MS_MVT_CL_IN_CNV[1]);
            mvtCnv.setSystem(true);
            mvtCnv.setAuxStockOrig(moStock);
            mvtCnv.getChildEntries().clear();
            for (SDbStockMovementEntry ety : maStockMovEty) {
                if (ety.getFkMaterialConditionId() != moKeyMatCondRef.getValue()[0]) {
                    mvtCnv.getChildEntries().add(ety);
                }
            }
            if (mvtCnv.getChildEntries().size() > 0) {
                mvtCnv.setAuxMovOut(registry);
                return mvtCnv;
            }
        }
        return registry;
    }
    
    @Override
    public void setValue(final int type, final Object value) {
        switch (type) {
            case GUI_PARAMS:
                readParams((SGuiParams) value);
                break;
        }
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid() && !mbUserHasSupAdmRig) {
            if (!SLibTimeUtils.isSameDate(SMaterialUtils.getSuggestMovementDate(miClient.getSession()), moDate.getValue())) {
                validation.setMessage("No tiene el permiso de capturar movimientos en una fecha distinta a la actual.");
                validation.setComponent(moDate);
            }
        }
        if (validation.isValid() && maStockMovEty.size() <= 0) {
            validation.setMessage("Debe haber al menos un movimiento."); 
            validation.setComponent(moKeyMatCondMov);
        } 
        if (validation.isValid() && mtDateCutOff != null) {
            if (SLibTimeUtils.digestYear(moDate.getValue())[0] != SLibTimeUtils.digestYear(mtDateCutOff)[0]) {
                validation.setMessage("El año de la fecha debe coincidir con el año de la fecha de origen.\n" + SLibTimeUtils.digestYear(mtDateCutOff)[0]);
                validation.setComponent(moDate);
            }
        }
        if (validation.isValid()) {
            if (moIntCantMov.getValue() > moIntCantRef.getValue()) {
                if (SLibUtils.compareKeys(moKeyMovCl.getValue(), SModSysConsts.MS_MVT_CL_IN_CNV) ||
                        SLibUtils.compareKeys(moKeyMovCl.getValue(), SModSysConsts.MS_MVT_CL_OUT_ADJ) || 
                        SLibUtils.compareKeys(moKeyMovCl.getValue(), SModSysConsts.MS_MVT_CL_OUT_CNV) ||  
                        SLibUtils.compareKeys(moKeyMovCl.getValue(), SModSysConsts.MS_MVT_CL_OUT_INV) ||  
                        SLibUtils.compareKeys(moKeyMovCl.getValue(), SModSysConsts.MS_MVT_CL_OUT_PRD) ||  
                        SLibUtils.compareKeys(moKeyMovCl.getValue(), SModSysConsts.MS_MVT_CL_OUT_REC)) { 
                    validation.setMessage("La " + SGuiUtils.getLabelName(jlCantMov) + " no puede ser mayor a la " + SGuiUtils.getLabelName(jlCantRef) + ".");
                    validation.setComponent(moKeyMatCondMov);                    
                }
                else {
                    if (miClient.showMsgBoxConfirm("La " + SGuiUtils.getLabelName(jlCantMov) + " es mayor a la " + SGuiUtils.getLabelName(jlCantRef) + ".\n ¿Desea continuar?") != JOptionPane.OK_OPTION) {
                        validation.setMessage("Ajustar cantidad movimiento.");
                        validation.setComponent(moKeyMatCondMov);
                    }
                }
            }
        }
        
        return validation;
    }
    
    @Override
    public void actionCancel() {
        if (jbCancel.isEnabled()) {
            if (mbAskToClose) {
                if (miClient.showMsgBoxConfirm("¿Esta seguro(a) que desea cerrar sin guardar?") == JOptionPane.OK_OPTION) {
                    mnFormResult = SGuiConsts.FORM_RESULT_CANCEL;
                    dispose();
                }
            }
            else {
                mnFormResult = SGuiConsts.FORM_RESULT_CANCEL;
                dispose();
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbEditReference) {
                actionEditReference();
            }
            else if (button == jbSearchReference) {
                actionSearchReference();
            }
            else if (button == jbAdd) {
                actionAdd();
            }
            else if (button == jbClean) {
                actionCleanEtyControls();
            }
            else if (button == jbDelete) {
                actionDelete();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
    
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof JTextField) {
            JTextField field = (JTextField) e.getSource();
            
            if (field == moIntHourReference) {
                focusLostHourReference();
            }
            else if (field == moIntMinuteReference) {
                focusLostMinuteReference();
            }
        }
    }
}
