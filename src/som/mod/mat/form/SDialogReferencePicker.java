/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.mat.form;

import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.Vector;
import sa.lib.SLibConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;
import som.mod.SModConsts;
import som.mod.mat.db.SRowReferencePicker;

/**
 *
 * @author Isabel Servín
 */
public class SDialogReferencePicker extends SBeanFormDialog {
    
    public static final int ARRAY_REFERENCE = 1;
    public static final int SELECTED_OPC = 2;
    
    private SGridPaneForm moGridRows;
    private ArrayList<SRowReferencePicker> maReferences;

    /**
     * Creates new form SDialogReferencePicker
     * @param client
     * @param title
     */
    public SDialogReferencePicker(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.MX_REF_PICKER, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpGrid = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jpGrid.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jpGrid, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        actionCancel();
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jpGrid;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 720, 450);
        
        moGridRows = new SGridPaneForm(miClient, SModConsts.MX_REF_PICKER, SLibConsts.UNDEFINED, "Referencia") {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public void createGridColumns() {
                int col = 0;
                SGridColumnForm[] columns = new SGridColumnForm[7];
                
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, "Referencia");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Clase movimiento");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha movimiento");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, SGridConsts.COL_TITLE_USER_INS_NAME);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, SGridConsts.COL_TITLE_USER_INS_TS);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, SGridConsts.COL_TITLE_USER_UPD_NAME);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, SGridConsts.COL_TITLE_USER_UPD_TS);
                
                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
            
            @Override
            public void actionMouseClicked() {
                actionSave();
            }
        };
        
        moGridRows.setForm(null);
        moGridRows.setPaneFormOwner(null);
        mvFormGrids.add(moGridRows);
        jpGrid.add(moGridRows, BorderLayout.CENTER);
    }
    
    private void populateGridRows() {
        ArrayList<SRowReferencePicker> aux = new ArrayList<>();
        Vector<SGridRow> rows = new Vector<>();
        if (maReferences.size() > 0) {
            for (SRowReferencePicker row : maReferences) {
                aux.add(row);
            }
            rows.addAll(aux);
        }
        moGridRows.populateGrid(rows);
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public void setValue(int type, Object value) {
        switch (type) {
            case ARRAY_REFERENCE:
                maReferences = (ArrayList<SRowReferencePicker>) value;
                populateGridRows();
                break;
        }
    }
    
    @Override
    public Object getValue(int type) {
        Object value = null;
        switch(type) {
            case SELECTED_OPC:
                value = ((SRowReferencePicker) moGridRows.getSelectedGridRow()).getReference();
                break;
        }
        return value;
    }
    
    @Override
    public void addAllListeners() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void removeAllListeners() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void reloadCatalogues() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = new SGuiValidation();
        
        if (validation.isValid()) {
            if (moGridRows.getSelectedGridRow() == null) {
                validation.setMessage("Debe seleccionar un renglón de la tabla.");
            }
        }
        
        return validation;
    }
    
    @Override
    public void actionSave() {
        SGuiValidation validation = validateForm();
        if (validation.isValid()) {
            mnFormResult = SGuiConsts.FORM_RESULT_OK;
            dispose();
        }
        else {
            miClient.showMsgBoxWarning(validation.getMessage());
        }
    } 
    
    @Override
    public void actionCancel() {
        mnFormResult = SGuiConsts.FORM_RESULT_CANCEL;
        dispose();
    }
}
