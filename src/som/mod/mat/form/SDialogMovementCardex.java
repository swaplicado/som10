/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.mat.form;

import java.awt.BorderLayout;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JRadioButton;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;
import som.mod.SModConsts;
import som.mod.mat.db.SDbStock;
import som.mod.mat.db.SRowMovementCardex;
import som.mod.som.db.SDbTicket;
import som.mod.som.db.SDbUnit;

/**
 *
 * @author Isabel Servín
 */
public class SDialogMovementCardex extends SBeanFormDialog implements ItemListener {
    
    public static final int GUI_PARAMS = 1;
    
    private SDbStock moStock;
    private SDbTicket moTicket;
    private SDbUnit moUnit;
    
    private SGridPaneForm moGridRows;
    private ArrayList<SRowMovementCardex> maMovCardex;
    
    private int existencia;

    /**
     * Creates new form SDialogMovementCardex
     * @param client
     * @param title
     */
    public SDialogMovementCardex(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.MX_STK_CARDEX, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The conte
     * dont of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jpRegistry = new javax.swing.JPanel();
        jpData = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlTicket = new javax.swing.JLabel();
        moTextTicket = new sa.lib.gui.bean.SBeanFieldText();
        jPanel5 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moKeyItem = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel6 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDateTicDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel7 = new javax.swing.JPanel();
        jlReference = new javax.swing.JLabel();
        moTextReference = new sa.lib.gui.bean.SBeanFieldText();
        jPanel8 = new javax.swing.JPanel();
        jlProducer = new javax.swing.JLabel();
        moKeyProd = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel9 = new javax.swing.JPanel();
        jlMatCond = new javax.swing.JLabel();
        moKeyMatCond = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel10 = new javax.swing.JPanel();
        jlDriver = new javax.swing.JLabel();
        moTextDriver = new sa.lib.gui.bean.SBeanFieldText();
        jPanel11 = new javax.swing.JPanel();
        jlCant = new javax.swing.JLabel();
        moIntCant = new sa.lib.gui.bean.SBeanFieldInteger();
        jlUnitOrig = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jlPlate = new javax.swing.JLabel();
        moTextPlates = new sa.lib.gui.bean.SBeanFieldText();
        jLabel1 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jlDateCutOff = new javax.swing.JLabel();
        moDateCutOff = new sa.lib.gui.bean.SBeanFieldDate();
        jpMovs = new javax.swing.JPanel();
        jpFilters = new javax.swing.JPanel();
        moRadioTicketsMatCond = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadioTicketReference = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadioTicket = new sa.lib.gui.bean.SBeanFieldRadio();
        jpGrid = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpRegistry.setLayout(new java.awt.BorderLayout());

        jpData.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpData.setLayout(new java.awt.GridLayout(5, 2, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTicket.setText("Boleto:");
        jlTicket.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlTicket);

        moTextTicket.setEditable(false);
        moTextTicket.setEnabled(false);
        jPanel4.add(moTextTicket);

        jpData.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Ítem:");
        jlItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlItem);

        moKeyItem.setEnabled(false);
        moKeyItem.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel5.add(moKeyItem);

        jpData.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha boleto:");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlDate);

        moDateTicDate.setEnabled(false);
        jPanel6.add(moDateTicDate);

        jpData.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlReference.setText("Referencia:");
        jlReference.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlReference);

        moTextReference.setEditable(false);
        moTextReference.setEnabled(false);
        moTextReference.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel7.add(moTextReference);

        jpData.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProducer.setText("Proveedor:");
        jlProducer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlProducer);

        moKeyProd.setEnabled(false);
        moKeyProd.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel8.add(moKeyProd);

        jpData.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMatCond.setText("Estado MP:");
        jlMatCond.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlMatCond);

        moKeyMatCond.setEnabled(false);
        moKeyMatCond.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel9.add(moKeyMatCond);

        jpData.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDriver.setText("Chofer:");
        jlDriver.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlDriver);

        moTextDriver.setEnabled(false);
        moTextDriver.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel10.add(moTextDriver);

        jpData.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCant.setText("Existencia:");
        jlCant.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlCant);

        moIntCant.setEnabled(false);
        moIntCant.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel11.add(moIntCant);

        jlUnitOrig.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel11.add(jlUnitOrig);

        jpData.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPlate.setText("Placas:");
        jlPlate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlPlate);

        moTextPlates.setEnabled(false);
        moTextPlates.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel12.add(moTextPlates);

        jLabel1.setForeground(java.awt.SystemColor.textInactiveText);
        jLabel1.setText("Placas y placas caja");
        jPanel12.add(jLabel1);

        jpData.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateCutOff.setText("Fecha corte:");
        jlDateCutOff.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlDateCutOff);

        moDateCutOff.setEnabled(false);
        moDateCutOff.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel13.add(moDateCutOff);

        jpData.add(jPanel13);

        jpRegistry.add(jpData, java.awt.BorderLayout.NORTH);

        jpMovs.setLayout(new java.awt.BorderLayout());

        jpFilters.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtrar por:"));
        jpFilters.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        buttonGroup1.add(moRadioTicketsMatCond);
        moRadioTicketsMatCond.setSelected(true);
        moRadioTicketsMatCond.setText("Boleto + referencia + estado MP");
        moRadioTicketsMatCond.setPreferredSize(new java.awt.Dimension(215, 23));
        jpFilters.add(moRadioTicketsMatCond);

        buttonGroup1.add(moRadioTicketReference);
        moRadioTicketReference.setText("Boleto + referencia");
        moRadioTicketReference.setPreferredSize(new java.awt.Dimension(150, 23));
        jpFilters.add(moRadioTicketReference);

        buttonGroup1.add(moRadioTicket);
        moRadioTicket.setText("Boleto ");
        moRadioTicket.setPreferredSize(new java.awt.Dimension(75, 23));
        jpFilters.add(moRadioTicket);

        jpMovs.add(jpFilters, java.awt.BorderLayout.NORTH);

        jpGrid.setBorder(javax.swing.BorderFactory.createTitledBorder("Movimientos:"));
        jpGrid.setLayout(new java.awt.BorderLayout());
        jpMovs.add(jpGrid, java.awt.BorderLayout.CENTER);

        jpRegistry.add(jpMovs, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpRegistry, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        
    }//GEN-LAST:event_formWindowActivated

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jlCant;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlDateCutOff;
    private javax.swing.JLabel jlDriver;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlMatCond;
    private javax.swing.JLabel jlPlate;
    private javax.swing.JLabel jlProducer;
    private javax.swing.JLabel jlReference;
    private javax.swing.JLabel jlTicket;
    private javax.swing.JLabel jlUnitOrig;
    private javax.swing.JPanel jpData;
    private javax.swing.JPanel jpFilters;
    private javax.swing.JPanel jpGrid;
    private javax.swing.JPanel jpMovs;
    private javax.swing.JPanel jpRegistry;
    private sa.lib.gui.bean.SBeanFieldDate moDateCutOff;
    private sa.lib.gui.bean.SBeanFieldDate moDateTicDate;
    private sa.lib.gui.bean.SBeanFieldInteger moIntCant;
    private sa.lib.gui.bean.SBeanFieldKey moKeyItem;
    private sa.lib.gui.bean.SBeanFieldKey moKeyMatCond;
    private sa.lib.gui.bean.SBeanFieldKey moKeyProd;
    private sa.lib.gui.bean.SBeanFieldRadio moRadioTicket;
    private sa.lib.gui.bean.SBeanFieldRadio moRadioTicketReference;
    private sa.lib.gui.bean.SBeanFieldRadio moRadioTicketsMatCond;
    private sa.lib.gui.bean.SBeanFieldText moTextDriver;
    private sa.lib.gui.bean.SBeanFieldText moTextPlates;
    private sa.lib.gui.bean.SBeanFieldText moTextReference;
    private sa.lib.gui.bean.SBeanFieldText moTextTicket;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 880, 550);
        
        moTextTicket.setTextSettings(SGuiUtils.getLabelName(jlTicket), 50);
        moDateTicDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate), false);
        moKeyProd.setKeySettings(miClient, SGuiUtils.getLabelName(jlProducer), false);
        moTextDriver.setTextSettings(SGuiUtils.getLabelName(jlDriver), 150);
        moTextPlates.setTextSettings(SGuiUtils.getLabelName(jlPlate), 50);
        moKeyItem.setKeySettings(miClient, SGuiUtils.getLabelName(jlItem), false);
        moTextReference.setTextSettings(SGuiUtils.getLabelName(jlReference), 20);
        moKeyMatCond.setKeySettings(miClient, SGuiUtils.getLabelName(jlMatCond), true);
        moIntCant.setIntegerSettings(SGuiUtils.getLabelName(jlCant), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moRadioTicketsMatCond.setBooleanSettings(moRadioTicketsMatCond.getText(), true);
        moRadioTicketReference.setBooleanSettings(moRadioTicketReference.getText(), false);
        moRadioTicket.setBooleanSettings(moRadioTicket.getText(), false);
        
        moGridRows = new SGridPaneForm(miClient, SModConsts.MX_STK_CARDEX, SLibConsts.UNDEFINED, "Cardex de movimientos") {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public void createGridColumns() {
                int col = 0;
                SGridColumnForm[] columns = new SGridColumnForm[10];
                
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, "Referencia");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE, SGridConsts.COL_TITLE_DATE + " movimiento");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Clase movimiento", 135);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_REG_NUM, "Folio movimiento");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Estado MP", 115);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, SGridConsts.COL_TITLE_IS_SYS);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_INT_4B, "Entrada");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_INT_4B, "Salida");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_INT_4B, "Existencia");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad", 50);
            
                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };
        
        moGridRows.setForm(null);
        moGridRows.setPaneFormOwner(null);
        mvFormGrids.add(moGridRows);
        jpGrid.add(moGridRows, BorderLayout.CENTER);
        
        jbSave.setVisible(false);
        jbCancel.setText("Cerrar");
    }
    
    private void readMovCardex() {
        existencia = 0;
        maMovCardex = new ArrayList<>();
        try {
            String sql = "SELECT " +
                    "a.*, " +
                    "@acumulado := @acumulado + a.ent - a.sal AS acum " +
                    "FROM( " +
                    "SELECT " +
                    "m.id_mvt, " +
                    "CONCAT(m.ref, ':00') ref, " +
                    "m.dt, " +
                    "mc.name cl_mvt, " +
                    "CONCAT(m.ser, '-', LPAD(m.num, 6, '0')) folio, " +
                    "mac.name mat_cond, " +
                    "m.b_sys, " +
                    "IF(fk_iog_ct = 1, me.qty, 0) ent, " +
                    "IF(fk_iog_ct = 2, me.qty, 0) sal, " +
                    "u.name unidad " +
                    "FROM " + SModConsts.TablesMap.get(SModConsts.M_MVT) + " m " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.M_MVT_ETY) + " me ON m.id_mvt = me.id_mvt " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.MS_MVT_CL) + " mc ON m.fk_iog_ct = mc.id_iog_ct AND m.fk_mvt_cl = mc.id_mvt_cl " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.MU_MAT_COND) + " mac ON me.fk_mat_cond = mac.id_mat_cond " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.SU_UNIT) + " u ON me.fk_unit = u.id_unit " +
                    "WHERE m.fk_tic_n = " + moTicket.getPkTicketId() + " " +
                    (moRadioTicketsMatCond.isSelected() || moRadioTicketReference.isSelected() ? "AND m.ref = '" + moStock.getReference() + "' " : "") +
                    (moRadioTicketsMatCond.isSelected() ? "AND me.fk_mat_cond = " + moStock.getFkMaterialConditionId() + " " : "") +
                    "AND NOT m.b_del " +
                    "ORDER BY m.dt, m.id_mvt) AS a, " +
                    "(SELECT @acumulado := 0) AS inicializador " +
                    "ORDER BY ref, dt, cl_mvt, folio, mat_cond;";
            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
            while (resultSet.next()) {
                SRowMovementCardex row = new SRowMovementCardex();
                row.setDateReference(resultSet.getTimestamp("ref"));
                row.setDate(resultSet.getTimestamp("dt"));
                row.setClassMov(resultSet.getString("cl_mvt"));
                row.setNumMov(resultSet.getString("folio"));
                row.setMatCond(resultSet.getString("mat_cond"));
                row.setSystem(resultSet.getBoolean("b_sys"));
                row.setIn(resultSet.getInt("ent"));
                row.setOut(resultSet.getInt("sal"));
                row.setUnit(resultSet.getString("unidad"));
                row.setQtyExt(resultSet.getInt("acum"));
                maMovCardex.add(row);
                existencia += resultSet.getInt("ent");
                existencia -= resultSet.getInt("sal");
            }
            
            moIntCant.setValue(existencia);
            populateGridRows();
        }
        catch (Exception e) {
            SLibUtils.printException(this, e);
        }
    }
    
    private void populateGridRows() {
        ArrayList<SRowMovementCardex> aux = new ArrayList<>();
        Vector<SGridRow> rows = new Vector<>();
        if (maMovCardex.size() > 0) {
            for (SRowMovementCardex row : maMovCardex) {
                aux.add(row);
            }
            rows.addAll(aux);
        }
        moGridRows.populateGrid(rows);
    }
    
    private void readParams(SGuiParams params) {
        removeAllListeners();
        moStock = null;
        if (params != null) {
            moStock = (SDbStock) params.getParamsMap().get(SModConsts.M_STK);
            readTicket(new int[] { (int) params.getParamsMap().get(SModConsts.S_TIC) });
            if (moStock != null) {
                readUnit(new int[] { moStock.getPkUnitId() });
            }
        }
        
        if (moStock != null) {
            moRadioTicketsMatCond.setSelected(true);
            moRadioTicket.setEnabled(true);
            moRadioTicketReference.setEnabled(true);
            moRadioTicketsMatCond.setEnabled(true);
        }
        else {
            moRadioTicket.setSelected(true);
            moRadioTicket.setEnabled(false);
            moRadioTicketReference.setEnabled(false);
            moRadioTicketsMatCond.setEnabled(false);
        }
        
        reloadCatalogues();
        addAllListeners();
        setTicketData();
        readMovCardex();
    }
    
    private void readTicket(int[] pk) {
        try {
            moTicket = new SDbTicket();
            moTicket.read(miClient.getSession(), pk);
        }
        catch (Exception e) {
            SLibUtils.printException(this, e);
        }
    }
    
    private void readUnit(int[] pk) {
        try {
            moUnit = new SDbUnit();
            moUnit.read(miClient.getSession(), pk);
        }
        catch (Exception e) {
            SLibUtils.printException(this, e);
        }
    }
        
    private void setTicketData() {
        try {
            moTextTicket.setValue(moTicket.getXtaScaleCode() + " " + moTicket.getNumber());
            moDateTicDate.setValue(moTicket.getDate());
            moKeyProd.setValue(new int[] { moTicket.getFkProducerId() });
            moTextDriver.setValue(moTicket.getDriver());
            moTextPlates.setValue(moTicket.getPlate() + ", " + moTicket.getPlateCage());
            moDateCutOff.setValue(SLibTimeUtils.getEndOfYear(miClient.getSession().getSystemDate()));
            moKeyItem.setValue(new int[] { moTicket.getFkItemId() });
            moTextReference.setValue("  /  /");
            if (moStock != null) {
                moTextReference.setValue(SLibUtils.DateFormatDatetime.format(SLibUtils.DbmsDateFormatDatetime.parse(moStock.getReference() + ":00")));
                if (moRadioTicketsMatCond.isSelected()) {
                    moKeyMatCond.setValue(new int[] { moStock.getFkMaterialConditionId() });
                }
                else moKeyMatCond.setValue(new int[] { 0 });
                jlUnitOrig.setText(moUnit.getName());
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void actionRadioTicket() {
        moTextReference.setValue("  /  /");
        moKeyMatCond.setSelectedIndex(0);
        moIntCant.setValue(0);
    }

    private void actionRadioTicketMatCond() {
        setTicketData();
    }
    
    private void actionRadioTicketReference() {
        setTicketData();
    }
    
    @Override
    public void setVisible(boolean visible) {
        if (maMovCardex.isEmpty()) {
            if (visible) {
                miClient.showMsgBoxInformation("El registro no tiene movimientos.");
            }
        }
        else {
            super.setVisible(visible);
        }
    }
    
    @Override
    public void addAllListeners() {
        moRadioTicketsMatCond.addItemListener(this);
        moRadioTicketReference.addItemListener(this);
        moRadioTicket.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        moRadioTicketsMatCond.removeItemListener(this);
        moRadioTicketReference.removeItemListener(this);
        moRadioTicket.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyItem, SModConsts.SU_ITEM, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyProd, SModConsts.SU_PROD, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyMatCond, SModConsts.MU_MAT_COND, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SGuiValidation validateForm() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    @Override
    public void setValue(final int type, final Object value) {
        switch (type) {
            case GUI_PARAMS:
                readParams((SGuiParams) value);
                break;
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JRadioButton) {
            JRadioButton radioButton = (JRadioButton) e.getSource();
            if (radioButton == moRadioTicket) {
                actionRadioTicket();
            }
            else if (radioButton == moRadioTicketReference) {
                actionRadioTicketMatCond();
            }
            else if (radioButton == moRadioTicketsMatCond) {
                actionRadioTicketReference();
            }
            readMovCardex();
        }
    }
}
