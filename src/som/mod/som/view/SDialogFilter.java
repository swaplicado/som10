/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DDialogSelectBranchEntity.java
 *
 * Created on 30/12/2011, 11:58:52 AM
 */

package som.mod.som.view;

import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.util.Vector;
import javax.swing.JDialog;
import javax.swing.JList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sa.lib.SLibConsts;
import sa.lib.gui.SGuiCatalogueSettings;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiItem;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;

/**
 *
 * @author Néstor Ávalos, Sergio Flores
 */
public class SDialogFilter extends JDialog implements ListSelectionListener {

    private SGuiClient miClient;
    private int mnType;
    private int mnFormResult;
    private boolean mbFirstActivation;

    /** Creates new form SDialogFilter
     * @param client GUI Client.
     * @param type Filter type. Constants defined in class <code>SModConsts</code>.
     */
    public SDialogFilter(SGuiClient client, int type) {
        super(client.getFrame(), true);
        miClient = client;
        mnType = type;
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpEntities = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jspDocumentType = new javax.swing.JScrollPane();
        jltType = new javax.swing.JList<SGuiItem>();
        jpCommands = new javax.swing.JPanel();
        jpCommands1 = new javax.swing.JPanel();
        jbClean = new javax.swing.JButton();
        jpCommands2 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Seleccionar tipo de documento");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpEntities.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleccionar una opción:"));
        jpEntities.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel2.setLayout(new java.awt.BorderLayout());

        jltType.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jltType.setToolTipText(SGuiConsts.MSG_OPTION_DBL_CLICK);
        jltType.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jltTypeMouseClicked(evt);
            }
        });
        jltType.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jltTypeKeyPressed(evt);
            }
        });
        jspDocumentType.setViewportView(jltType);

        jPanel2.add(jspDocumentType, java.awt.BorderLayout.CENTER);

        jpEntities.add(jPanel2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpEntities, java.awt.BorderLayout.CENTER);

        jpCommands.setLayout(new java.awt.BorderLayout());

        jbClean.setText("Limpiar");
        jbClean.setPreferredSize(new java.awt.Dimension(75, 23));
        jbClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCleanActionPerformed(evt);
            }
        });
        jpCommands1.add(jbClean);

        jpCommands.add(jpCommands1, java.awt.BorderLayout.WEST);

        jpCommands2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jbOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbOkActionPerformed(evt);
            }
        });
        jpCommands2.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbCancel.setPreferredSize(new java.awt.Dimension(75, 23));
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });
        jpCommands2.add(jbCancel);

        jpCommands.add(jpCommands2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpCommands, java.awt.BorderLayout.SOUTH);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-488)/2, (screenSize.height-334)/2, 488, 334);
    }// </editor-fold>//GEN-END:initComponents

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        actionCancel();
    }//GEN-LAST:event_jbCancelActionPerformed

    private void jltTypeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jltTypeKeyPressed
        keyPressedDocumentType(evt);
    }//GEN-LAST:event_jltTypeKeyPressed

    private void jltTypeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jltTypeMouseClicked
        mouseClickedEntity(evt);
    }//GEN-LAST:event_jltTypeMouseClicked

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jbOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbOkActionPerformed
        actionOk();
    }//GEN-LAST:event_jbOkActionPerformed

    private void jbCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCleanActionPerformed
        actionClean();
    }//GEN-LAST:event_jbCleanActionPerformed

    private void windowActivated() {
        if (mbFirstActivation) {
            mbFirstActivation = false;
            jltType.requestFocus();
        }
    }

    private void initComponentsCustom() {
        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        jltType.addListSelectionListener(this);

        populateOptions();
    }

    private void populateOptions() {
        SGuiParams params = new SGuiParams();
        SGuiCatalogueSettings settings = miClient.getSession().getModuleByGuiType(mnType, SLibConsts.UNDEFINED).getCatalogueSettings(mnType, SLibConsts.UNDEFINED, null);
        Vector<SGuiItem> items = null;

        params.getParamsMap().put(SGuiConsts.PARAM_ITEM, false);
        items = miClient.getSession().readItems(mnType, SLibConsts.UNDEFINED, params);

        setTitle(settings.getCatalogueName());

        jltType.setListData(items);
        valueChangedType();
    }

    private void actionOk() {
        mnFormResult = SGuiConsts.FORM_RESULT_OK;
        dispose();
    }

    private void actionCancel() {
        mnFormResult = SGuiConsts.FORM_RESULT_CANCEL;
        dispose();
    }

    private void actionClean() {
        jltType.clearSelection();
        actionOk();
    }

    private void keyPressedDocumentType(KeyEvent evt) {
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jbOk.requestFocus();
        }
    }

    private void mouseClickedEntity(MouseEvent evt) {
        if (evt.getClickCount() == 2) {
            actionOk();
        }
    }

    private void valueChangedType() {
        jbClean.setEnabled(jltType.getSelectedIndex() != -1);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbClean;
    private javax.swing.JButton jbOk;
    private javax.swing.JList<SGuiItem> jltType;
    private javax.swing.JPanel jpCommands;
    private javax.swing.JPanel jpCommands1;
    private javax.swing.JPanel jpCommands2;
    private javax.swing.JPanel jpEntities;
    private javax.swing.JScrollPane jspDocumentType;
    // End of variables declaration//GEN-END:variables

    public void resetDialog() {
        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        setSelectedKey(null);
    }

    public void setSelectedKey(final int[] key) {
        if (key != null) {
            SGuiUtils.locateItem(jltType, key);
        }
    }

    public int[] getSelectedKey() {
        int[] key = null;

        if (jltType.getSelectedValue() != null) {
            key = ((SGuiItem) jltType.getSelectedValue()).getPrimaryKey();
        }

        return key;
    }

    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (e.getSource() instanceof JList) {
            JList list = (JList) e.getSource();

            if (list == jltType) {
                valueChangedType();
            }
        }
    }
}
