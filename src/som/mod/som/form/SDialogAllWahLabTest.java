/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package som.mod.som.form;

import java.awt.BorderLayout;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JDialog;
import sa.lib.SLibConsts;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiUtils;
import som.mod.SModConsts;
import som.mod.som.db.SDbWahLabTest;
import som.mod.som.db.SRowAllWahLabTest;

/**
 *
 * @author Isabel Servín
 * 
 */
public class SDialogAllWahLabTest extends JDialog implements ActionListener {
    
    public static final int PARAM_ROWS = 1;

    private final SGuiClient miClient;
    private SGridPaneForm moGridTests;
    
    private ArrayList<SRowAllWahLabTest> maRowsAllTest;
    private Vector<SGridRow> mvRows;
    
    
    /** Creates new form SDialogAllWahLabTest 
     * 
     * @param client
     */
    public SDialogAllWahLabTest(SGuiClient client) {
        super(client.getFrame(), true);
        miClient = client;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpTable = new javax.swing.JPanel();
        jpControls = new javax.swing.JPanel();
        jbClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Resultados capturados");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpTable.setBorder(javax.swing.BorderFactory.createTitledBorder("Resultados capturados:"));
        jpTable.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jpTable, java.awt.BorderLayout.CENTER);

        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbClose.setText("Cerrar");
        jbClose.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbClose);

        getContentPane().add(jpControls, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(976, 639));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        SGuiUtils.setWindowBounds(this, 960, 600);

        moGridTests = new SGridPaneForm(miClient, SModConsts.S_WAH_LAB_TEST_ALL, SLibConsts.UNDEFINED, "Resultados capturados") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                SGridColumnForm[] columns = new SGridColumnForm[22];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ITM, "Almacén");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Nombre almacén");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_L, "Ítem");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Acidez %");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "FR");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "I. peroxidos");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "FR");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Humedad %");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "FR");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Sólidos %");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "FR");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Linoleico %");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "FR");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Oléico %");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "FR");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Linolénico %");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "FR");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Esteárico %");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "FR");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Palmítico %");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "FR");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_L, "Observaciones");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        jpTable.add(moGridTests, BorderLayout.CENTER);

        jbClose.addActionListener(this);
    }

    private void windowActivated() {
    }
    
    private void prepareInfo() {
        maRowsAllTest = new ArrayList<>();
        for (SGridRow row : mvRows) {
            maRowsAllTest.add(new SRowAllWahLabTest((SDbWahLabTest) row));
        }
        populateGridRows();
    }
    
    private void populateGridRows() {
        moGridTests.clearGridRows();
        
        Vector<SGridRow> vRows = new Vector<>();
        vRows.addAll(maRowsAllTest);
        
        moGridTests.populateGrid(vRows); 
        moGridTests.clearSortKeys();
        moGridTests.renderGridRows();
        moGridTests.setSelectedGridRow(0);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbClose;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpTable;
    // End of variables declaration//GEN-END:variables

    public void actionClose() {
        setVisible(false);
    }
    
    public void formReset() {
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbClose) {
                actionClose();
            }
        }
    }
    
    public void setValue(int param, Object value) {
        switch (param) {
            case PARAM_ROWS:
                mvRows = (Vector<SGridRow>) value;
                prepareInfo();
                break;
            default:
        }
    }
}
