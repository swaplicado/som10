/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JComboBox;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridPaneFormOwner;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;
import som.gui.SGuiClientUtils;
import som.mod.SModConsts;
import som.mod.som.db.SDbItem;
import som.mod.som.db.SDbLaboratory;
import som.mod.som.db.SDbLaboratoryNote;
import som.mod.som.db.SDbLaboratoryTest;
import som.mod.som.db.SDbTicket;
import som.mod.som.db.SSomUtils;

/**
 *
 * @author Juan Barajas, Sergio Flores
 * 2018-12-11, Sergio Flores: Adición de parámetros de fruta.
 * 2019-01-07, Sergio Flores: Adición de ajuste de rendimiento para parámetros de fruta.
 * 2019-01-09, Sergio Flores: Estimación de porcentaje aceite en pulpa a partir de porcentaje materia seca en fruta.
 */
public class SFormLaboratory extends SBeanForm implements SGridPaneFormOwner, ActionListener, ItemListener {

    private SDbTicket moRegistry;
    private Vector<SDbLaboratory> moChildLaboratories;
    private SFormLaboratoryTest moFormLaboratoryTest;
    private SGridPaneForm moGridLaboratoryTest;

    private SDbItem moItem;
    private int mnItemId;
    private int mnSeasonId;
    private int mnRegionId;
    private boolean mbIsSaveSend;
    private String msPlates;

    private JButton jbSaveSend;

    /**
     * Creates new form SFormLaboratory
     */
    public SFormLaboratory(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.SX_TIC_LAB, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jlScale = new javax.swing.JLabel();
        moTextScaleName = new sa.lib.gui.bean.SBeanFieldText();
        moTextScaleCode = new sa.lib.gui.bean.SBeanFieldText();
        jPanel7 = new javax.swing.JPanel();
        jlPlates = new javax.swing.JLabel();
        moTextPlates = new sa.lib.gui.bean.SBeanFieldText();
        jbPlates = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jlTicket = new javax.swing.JLabel();
        moTextTicket = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel14 = new javax.swing.JPanel();
        jlPlatesCage = new javax.swing.JLabel();
        moTextPlatesCage = new sa.lib.gui.bean.SBeanFieldText();
        jbPlatesCage = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jlProducer = new javax.swing.JLabel();
        moTextProducer = new sa.lib.gui.bean.SBeanFieldText();
        jPanel3 = new javax.swing.JPanel();
        jlDriver = new javax.swing.JLabel();
        moTextDriver = new sa.lib.gui.bean.SBeanFieldText();
        jPanel12 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moKeyItem = new sa.lib.gui.bean.SBeanFieldKey();
        jbKeyItem = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        moIntNumber = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel8 = new javax.swing.JPanel();
        jlSeason = new javax.swing.JLabel();
        moTextSeason = new sa.lib.gui.bean.SBeanFieldText();
        jPanel11 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDateDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel15 = new javax.swing.JPanel();
        jlRegion = new javax.swing.JLabel();
        moTextRegion = new sa.lib.gui.bean.SBeanFieldText();
        jPanel16 = new javax.swing.JPanel();
        jlNote = new javax.swing.JLabel();
        moTextNote = new sa.lib.gui.bean.SBeanFieldText();
        jPanel5 = new javax.swing.JPanel();
        moBoolDone = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel6 = new javax.swing.JPanel();
        jpTest = new javax.swing.JPanel();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del boleto:"));
        jPanel2.setLayout(new java.awt.GridLayout(7, 2, 0, 5));

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlScale.setText("Báscula:");
        jlScale.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel13.add(jlScale);

        moTextScaleName.setEditable(false);
        moTextScaleName.setText("sBeanFieldText2");
        moTextScaleName.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel13.add(moTextScaleName);

        moTextScaleCode.setEditable(false);
        moTextScaleCode.setText("sBeanFieldText1");
        moTextScaleCode.setPreferredSize(new java.awt.Dimension(45, 23));
        jPanel13.add(moTextScaleCode);

        jPanel2.add(jPanel13);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPlates.setText("Placas:");
        jlPlates.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlPlates);

        moTextPlates.setEditable(false);
        moTextPlates.setText("sBeanFieldText2");
        jPanel7.add(moTextPlates);

        jbPlates.setText("<");
        jbPlates.setToolTipText("Modificar placas");
        jbPlates.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jbPlates.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbPlates);

        jPanel2.add(jPanel7);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTicket.setText("Boleto:");
        jlTicket.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel4.add(jlTicket);

        moTextTicket.setEditable(false);
        jPanel4.add(moTextTicket);

        jPanel2.add(jPanel4);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPlatesCage.setText("Placas caja:");
        jlPlatesCage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlPlatesCage);

        moTextPlatesCage.setEditable(false);
        moTextPlatesCage.setText("sBeanFieldText2");
        jPanel14.add(moTextPlatesCage);

        jbPlatesCage.setText("<");
        jbPlatesCage.setToolTipText("Modificar placas caja");
        jbPlatesCage.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jbPlatesCage.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel14.add(jbPlatesCage);

        jPanel2.add(jPanel14);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProducer.setText("Proveedor:");
        jlProducer.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(jlProducer);

        moTextProducer.setEditable(false);
        moTextProducer.setText("sBeanFieldText2");
        moTextProducer.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel10.add(moTextProducer);

        jPanel2.add(jPanel10);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDriver.setText("Chofer:");
        jlDriver.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlDriver);

        moTextDriver.setEditable(false);
        moTextDriver.setText("sBeanFieldText2");
        moTextDriver.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel3.add(moTextDriver);

        jPanel2.add(jPanel3);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Ítem:");
        jlItem.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel12.add(jlItem);

        moKeyItem.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel12.add(moKeyItem);

        jbKeyItem.setText("<");
        jbKeyItem.setToolTipText("Modificar ítem");
        jbKeyItem.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jbKeyItem.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel12.add(jbKeyItem);

        jPanel2.add(jPanel12);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumber.setText("Folio análisis:*");
        jlNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlNumber);
        jPanel9.add(moIntNumber);

        jPanel2.add(jPanel9);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSeason.setText("Temporada:");
        jlSeason.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel8.add(jlSeason);

        moTextSeason.setEditable(false);
        moTextSeason.setText("sBeanFieldText2");
        moTextSeason.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel8.add(moTextSeason);

        jPanel2.add(jPanel8);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha:*");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlDate);
        jPanel11.add(moDateDate);

        jPanel2.add(jPanel11);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRegion.setText("Región:");
        jlRegion.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel15.add(jlRegion);

        moTextRegion.setEditable(false);
        moTextRegion.setText("sBeanFieldText2");
        moTextRegion.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel15.add(moTextRegion);

        jPanel2.add(jPanel15);

        jPanel16.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNote.setText("Observaciones:");
        jlNote.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlNote);

        moTextNote.setText("sBeanFieldText2");
        moTextNote.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel16.add(moTextNote);

        jPanel2.add(jPanel16);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel2.add(jPanel5);

        moBoolDone.setText("Terminado");
        jPanel2.add(moBoolDone);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel6.setLayout(new java.awt.GridLayout(1, 2));

        jpTest.setBorder(javax.swing.BorderFactory.createTitledBorder("Pruebas de laboratorio:"));
        jpTest.setLayout(new java.awt.BorderLayout());
        jPanel6.add(jpTest);

        jPanel1.add(jPanel6, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbKeyItem;
    private javax.swing.JButton jbPlates;
    private javax.swing.JButton jbPlatesCage;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlDriver;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlNote;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JLabel jlPlates;
    private javax.swing.JLabel jlPlatesCage;
    private javax.swing.JLabel jlProducer;
    private javax.swing.JLabel jlRegion;
    private javax.swing.JLabel jlScale;
    private javax.swing.JLabel jlSeason;
    private javax.swing.JLabel jlTicket;
    private javax.swing.JPanel jpTest;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolDone;
    private sa.lib.gui.bean.SBeanFieldDate moDateDate;
    private sa.lib.gui.bean.SBeanFieldInteger moIntNumber;
    private sa.lib.gui.bean.SBeanFieldKey moKeyItem;
    private sa.lib.gui.bean.SBeanFieldText moTextDriver;
    private sa.lib.gui.bean.SBeanFieldText moTextNote;
    private sa.lib.gui.bean.SBeanFieldText moTextPlates;
    private sa.lib.gui.bean.SBeanFieldText moTextPlatesCage;
    private sa.lib.gui.bean.SBeanFieldText moTextProducer;
    private sa.lib.gui.bean.SBeanFieldText moTextRegion;
    private sa.lib.gui.bean.SBeanFieldText moTextScaleCode;
    private sa.lib.gui.bean.SBeanFieldText moTextScaleName;
    private sa.lib.gui.bean.SBeanFieldText moTextSeason;
    private sa.lib.gui.bean.SBeanFieldInteger moTextTicket;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 960, 600);

        jbSaveSend = new JButton("Guardar y enviar al estado siguiente");
        jbSaveSend.setPreferredSize(new Dimension(250, 23));
        jbSaveSend.addActionListener(this);

        moTextScaleName.setTextSettings(SGuiUtils.getLabelName(jlScale.getText()), 25);
        moTextScaleCode.setTextSettings(SGuiUtils.getLabelName(jlScale.getText()), 25);
        moTextTicket.setIntegerSettings(SGuiUtils.getLabelName(jlTicket.getText()), SGuiConsts.GUI_TYPE_INT_RAW, true);
        moTextProducer.setTextSettings(SGuiUtils.getLabelName(jlProducer.getText()), 25);
        moKeyItem.setKeySettings(miClient, SGuiUtils.getLabelName(jlItem.getText()), true);
        moTextSeason.setTextSettings(SGuiUtils.getLabelName(jlSeason.getText()), 25);
        moTextRegion.setTextSettings(SGuiUtils.getLabelName(jlRegion.getText()), 25);
        moTextPlates.setTextSettings(SGuiUtils.getLabelName(jlPlates.getText()), 25);
        moTextPlatesCage.setTextSettings(SGuiUtils.getLabelName(jlPlatesCage.getText()), 25);
        moTextDriver.setTextSettings(SGuiUtils.getLabelName(jlDriver.getText()), 150);
        moIntNumber.setIntegerSettings(SGuiUtils.getLabelName(jlNumber.getText()), SGuiConsts.GUI_TYPE_INT, true);
        moDateDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate.getText()), true);
        moTextNote.setTextSettings(SGuiUtils.getLabelName(jlNote.getText()), 255, 0);
        moBoolDone.setBooleanSettings(SGuiUtils.getLabelName(moBoolDone.getText()), false);

        moFields.addField(moTextScaleName);
        moFields.addField(moTextScaleCode);
        moFields.addField(moTextTicket);
        moFields.addField(moTextProducer);
        moFields.addField(moKeyItem);
        moFields.addField(moTextSeason);
        moFields.addField(moTextRegion);
        moFields.addField(moTextPlates);
        moFields.addField(moTextPlatesCage);
        moFields.addField(moTextDriver);
        moFields.addField(moIntNumber);
        moFields.addField(moDateDate);
        moFields.addField(moTextNote);
        moFields.addField(moBoolDone);

        moFields.setFormButton(jbSave);

        jpCommandCenter.add(jbSaveSend);

        moItem = new SDbItem();

        moGridLaboratoryTest = new SGridPaneForm(miClient, SModConsts.S_LAB_TEST, SLibConsts.UNDEFINED, "Pruebas de laboratorio") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(true);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                SGridColumnForm[] columns = new SGridColumnForm[21];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_INT_1B, "Prueba lab");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_PER_2D, "Impurezas");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_PER_2D, "Humedad");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Densidad");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Índice refracción (IR)");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Valor yodo (VI)");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_PER_4D, "Ácido oleico");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_PER_4D, "Ácido linoleico");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_PER_4D, "Ácido linolénico");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_PER_4D, "Ácido erúcico");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_PER_4D, "Proteína");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_PER_4D, "Aceite");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_PER_4D, "Acidez");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Clase fruta");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Grado madurez");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Peso fruta (g)");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Peso cáscara + hueso (g)");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_PER_4D, "Pulpa: materia seca");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_PER_4D, "Pulpa: humedad");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_PER_4D, "Pulpa: aceite");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_PER_4D, "Ajuste rendimiento");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }

            @Override
            public void actionRowNew() {
                SGuiParams params = new SGuiParams();

                params.getParamsMap().put(SGuiConsts.PARAM_ITEM, moItem);
                moFormParams = params;

                if (moKeyItem.getSelectedIndex() > 0 ) {
                    if (moItem.isLaboratory()) {
                        if (moItem.isPackage() && !moRegistry.isPackage()) {
                            miClient.showMsgBoxInformation("El ítem '" + moKeyItem.getSelectedItem() + "' requiere cantidad de empaques, no capturados en el boleto.");
                        }
                        else {
                            super.actionRowNew();
                        }
                    }
                    else {
                        miClient.showMsgBoxInformation("El ítem '" + moKeyItem.getSelectedItem() + "' no requiere análisis.");
                    }
                }
                else {
                    miClient.showMsgBoxInformation("Se debe seleccionar un ítem.");
                }
            }

            @Override
            public void actionRowEdit() {
                SGuiParams params = new SGuiParams();

                params.getParamsMap().put(SGuiConsts.PARAM_ITEM, moItem);
                moFormParams = params;

                super.actionRowEdit();
            }
        };

        moFormLaboratoryTest = new SFormLaboratoryTest(miClient, "Prueba de laboratorio");
        moGridLaboratoryTest.setForm(moFormLaboratoryTest);
        moGridLaboratoryTest.setPaneFormOwner(this);
        mvFormGrids.add(moGridLaboratoryTest);

        jpTest.add(moGridLaboratoryTest, BorderLayout.CENTER);
    }

    private void itemStateKeyItem() {
        if (moKeyItem.getSelectedIndex() <= 0) {
        }
        else {
            readItem();
        }
    }

    private void readItem() {
        try {
            moItem.read(miClient.getSession(), moKeyItem.getValue());
        }
        catch (SQLException e) {
            SLibUtils.showException(this, e);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    private void renumberEntries() {
        int index = 0;
        for (SGridRow row : moGridLaboratoryTest.getModel().getGridRows()) {
            index++;
            row.setRowValueAt(index, 0);
        }
        
        moGridLaboratoryTest.renderGridRows();
    }

    private void getSeasonRegion() {
        mnSeasonId = 0;
        mnRegionId = 0;

        try {
            mnSeasonId = SSomUtils.getProperSeasonId(miClient.getSession(), moRegistry.getDatetimeArrival(), moKeyItem.getValue()[0], moRegistry.getFkProducerId());

            if (mnSeasonId != SLibConsts.UNDEFINED) {
                mnRegionId = SSomUtils.getProperRegionId(miClient.getSession(), mnSeasonId, moKeyItem.getValue()[0], moRegistry.getFkProducerId());
            }
        }
        catch (Exception e) {
             SLibUtils.showException(this, e);
        }
    }

    private void actionKeyItem() {
        boolean isLink = false;

        try {
            isLink = moRegistry.isLinkIog(miClient.getSession());

           if (moGridLaboratoryTest.getModel().getRowCount() > 0) {
               miClient.showMsgBoxWarning("Es necesario eliminar las pruebas de laboratorio.");
           }
           else if (isLink) {
                miClient.showMsgBoxWarning("El boleto está vinculado con un documento de inventarios.");
            }
            else {
               jbKeyItem.setEnabled(false);
               moKeyItem.setEnabled(true);
               moKeyItem.requestFocus();
            }
        }
        catch (SQLException e) {
            SLibUtils.showException(this, e);
        }
    }

    private void actionSaveSend() {
        if (moBoolDone.getValue()) {
            mbIsSaveSend = true;
            super.actionSave();
        }
        else{
            miClient.showMsgBoxInformation("No puede pasar el boleto al estado siguiente porque:\nEl análisis de laboratorio no está terminado.");
            moBoolDone.requestFocus();
        }
    }

    private void actionPlates() {
        jbPlates.setEnabled(false);
        moTextPlates.setEditable(true);
        moTextPlates.requestFocus();
    }

    private void actionPlatesCage() {
        jbPlatesCage.setEnabled(false);
        moTextPlatesCage.setEditable(true);
        moTextPlatesCage.requestFocus();
    }

    private void populateLaboratoryTest() throws SQLException {
        Vector<SGridRow> rows = new Vector<>();

        if (moChildLaboratories.size() > 0) {
            for (SDbLaboratoryTest row : moChildLaboratories.get(0).getChildTests()) {
                rows.add(row);
            }
        }

        moGridLaboratoryTest.populateGrid(rows);
    }

    @Override
    public void addAllListeners() {
        moKeyItem.addItemListener(this);
        jbKeyItem.addActionListener(this);
        jbSaveSend.addActionListener(this);
        jbPlates.addActionListener(this);
        jbPlatesCage.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        moKeyItem.removeActionListener(this);
        jbKeyItem.removeActionListener(this);
        jbSaveSend.removeActionListener(this);
        jbPlates.removeActionListener(this);
        jbPlatesCage.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        try {
            populateLaboratoryTest();
            miClient.getSession().populateCatalogue(moKeyItem, SModConsts.SU_ITEM, SLibConsts.UNDEFINED, null);
        }
        catch (SQLException e) {
            SLibUtils.showException(this, e);
        }
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbTicket) registry;
        moChildLaboratories = moRegistry.getChildLaboratories();

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;
        mbIsSaveSend = false;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moTextScaleName.setValue(moRegistry.getXtaScaleName());
        moTextScaleCode.setValue(moRegistry.getXtaScaleCode());
        moTextTicket.setValue(moRegistry.getNumber());
        moTextPlates.setValue(msPlates = moRegistry.getPlate());
        moTextPlatesCage.setValue(moRegistry.getPlateCage());
        moTextDriver.setValue(moRegistry.getDriver());
        moTextProducer.setValue(moRegistry.getXtaProducer());
        moTextSeason.setValue(moRegistry.getXtaSeason());
        moTextRegion.setValue(moRegistry.getXtaRegion());
        moKeyItem.setValue(new int[] { mnItemId = moRegistry.getFkItemId() });
        moTextNote.setValue("");

        moIntNumber.setValue(0);
        moBoolDone.setValue(false);

        if (moChildLaboratories.size() > 0) {
            moIntNumber.setValue(moChildLaboratories.get(0).getNumber());
            moDateDate.setValue(moChildLaboratories.get(0).getDate());
            moBoolDone.setValue(moChildLaboratories.get(0).isDone());

            if (moChildLaboratories.get(0).getChildNotes().size() > 0) {
                moTextNote.setValue(moChildLaboratories.get(0).getChildNotes().get(0).getNote());
            }
        }
        else {
            moDateDate.setValue(miClient.getSession().getWorkingDate());
            moIntNumber.setValue(SDbLaboratory.getNumberNext(miClient.getSession()));
        }

        setFormEditable(true);
        readItem();

        if (moRegistry.isRegistryNew()) {
            moIntNumber.setValue(SDbLaboratory.getNumberNext(miClient.getSession()));
        }

        moIntNumber.setEditable(false);
        moKeyItem.setEnabled(false);
        jbKeyItem.setEnabled(true);
        jbPlates.setEnabled(true);
        jbPlatesCage.setEnabled(true);

        moTextScaleName.setEditable(false);
        moTextScaleCode.setEditable(false);
        moTextTicket.setEditable(false);
        moTextProducer.setEditable(false);
        moTextSeason.setEditable(false);
        moTextRegion.setEditable(false);
        moTextPlates.setEditable(false);
        moTextPlatesCage.setEditable(false);
        moTextDriver.setEditable(false);

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbTicket registry = moRegistry.clone();
        SDbLaboratoryNote labNote = new SDbLaboratoryNote();
        SDbLaboratory laboratory = new SDbLaboratory();

        if (registry.isRegistryNew()) { }

        registry.setFkItemId(moKeyItem.getValue()[0]);
        registry.setFkUnitId(moKeyItem.getSelectedItem().getForeignKey()[0]);
        registry.setPlate(moTextPlates.getValue());
        registry.setPlateCage(moTextPlatesCage.getValue());
        registry.getChildLaboratories().clear();

        if (moChildLaboratories.size() > 0) {
            for (SDbLaboratory childLab : moChildLaboratories) {
                childLab.setNumber(moIntNumber.getValue());
                childLab.setDate(moDateDate.getValue());
                childLab.setDone(moBoolDone.getValue());
                childLab.setFkItem(moKeyItem.getValue()[0]);
                childLab.setRegistryEdited(true);
                registry.getChildLaboratories().add(childLab);
            }
        }
        else {
            laboratory.setNumber(moIntNumber.getValue());
            laboratory.setDate(moDateDate.getValue());
            laboratory.setDone(moBoolDone.getValue());
            laboratory.setFkItem(moKeyItem.getValue()[0]);
            registry.getChildLaboratories().add(laboratory);
        }

        registry.getChildLaboratories().get(0).getChildNotes().clear();
        if (moTextNote.getValue().length() > 0) {
            labNote.setNote(moTextNote.getValue());
            registry.getChildLaboratories().get(0).getChildNotes().add(labNote);
        }

        registry.getChildLaboratories().get(0).getChildTests().clear();
        for (SGridRow row : moGridLaboratoryTest.getModel().getGridRows()) {
            registry.getChildLaboratories().get(0).getChildTests().add((SDbLaboratoryTest) row);
        }

        if (mnItemId != moKeyItem.getValue()[0]) {
            getSeasonRegion();

            registry.setFkSeasonId_n(mnSeasonId);
            registry.setFkRegionId_n(mnRegionId);
            registry.setRevueltaImport1(false);
        }
        else if (!msPlates.equalsIgnoreCase(moTextPlates.getValue())) {
            registry.setRevueltaImport1(false);
        }
        registry.setAuxMoveNextOnSend(mbIsSaveSend);
        registry.setAuxRequiredCalculation(true);

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid() && !SGuiClientUtils.isPeriodOpened(miClient.getSession(), moDateDate.getValue())) {
            validation.setMessage("El período está cerrado.");
            validation.setComponent(moDateDate.getComponent());
        }
        else if (validation.isValid() && moGridLaboratoryTest.getModel().getRowCount() == 0) {
            validation.setMessage("Debe al menos tener una prueba de laboratorio.");
            validation.setComponent(moGridLaboratoryTest);
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbKeyItem) {
                actionKeyItem();
            }
            else if (button == jbSaveSend) {
                actionSaveSend();
            }
            else if (button == jbPlates) {
                actionPlates();
            }
            else if (button == jbPlatesCage) {
                actionPlatesCage();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox && e.getStateChange() == ItemEvent.SELECTED) {
            JComboBox comboBox = (JComboBox)  e.getSource();

            if (comboBox == moKeyItem) {
                itemStateKeyItem();
            }
        }
    }

    @Override
    public void notifyRowNew(int i, int i1, int i2, SGridRow sgr) {
        moKeyItem.setEnabled(false);
        jbKeyItem.setEnabled(true);
        renumberEntries();
        moGridLaboratoryTest.setSelectedGridRow(moGridLaboratoryTest.getTable().getRowCount() - 1);
    }

    @Override
    public void notifyRowEdit(int i, int i1, int i2, SGridRow sgr) {
        
    }

    @Override
    public void notifyRowDelete(int i, int i1, int i2, SGridRow sgr) {
        renumberEntries();
    }
}
