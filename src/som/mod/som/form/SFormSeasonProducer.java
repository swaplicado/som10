/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.SQLException;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiFieldKeyGroup;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldRadio;
import som.gui.SGuiClientSessionCustom;
import som.mod.SModConsts;
import som.mod.som.db.SDbProducer;
import som.mod.som.db.SDbSeasonProducer;
import som.mod.som.db.SDbSeasonRegion;

/**
 *
 * @author Juan Barajas, Sergio Flores, Isabel Servín
 */
public class SFormSeasonProducer extends sa.lib.gui.bean.SBeanForm implements ItemListener, ChangeListener, ActionListener {

    private SDbSeasonProducer moRegistry;
    private SGuiFieldKeyGroup moFieldKeyGroup;
    private SDbProducer moProducer;
    private double mdAuxPricePerTon;
    private double mdAuxPriceFreight;

    /**
     * Creates new form SFormSeasonProducer
     * @param client
     * @param title
     */
    public SFormSeasonProducer(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.SU_SEAS_PROD, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        moUpdateTickets = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlSeason = new javax.swing.JLabel();
        moKeySeason = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel11 = new javax.swing.JPanel();
        jlRegion = new javax.swing.JLabel();
        moKeyRegion = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel7 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moKeyItem = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel15 = new javax.swing.JPanel();
        jlProducer = new javax.swing.JLabel();
        moKeyProducer = new sa.lib.gui.bean.SBeanFieldKey();
        moBoolFreight = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel9 = new javax.swing.JPanel();
        moBoolPrcTon = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel17 = new javax.swing.JPanel();
        jlPricePerTonReg = new javax.swing.JLabel();
        moDecPricePerTonReg = new sa.lib.gui.bean.SBeanFieldDecimal();
        moTextCurrencyCodePrcTonReg = new sa.lib.gui.bean.SBeanFieldText();
        jPanel16 = new javax.swing.JPanel();
        jlPricePerTon = new javax.swing.JLabel();
        moDecPricePerTon = new sa.lib.gui.bean.SBeanFieldDecimal();
        moTextCurrencyCodePrcTon = new sa.lib.gui.bean.SBeanFieldText();
        jbEditPrice = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jlPriceFreight = new javax.swing.JLabel();
        moDecPriceFreight = new sa.lib.gui.bean.SBeanFieldDecimal();
        moTextCurrencyCodeFreight = new sa.lib.gui.bean.SBeanFieldText();
        jPanel13 = new javax.swing.JPanel();
        moBoolDefault = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel10 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        moRadUpdateTicketsNone = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel5 = new javax.swing.JPanel();
        moRadUpdateTicketsAsOfDate = new sa.lib.gui.bean.SBeanFieldRadio();
        moDateDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel8 = new javax.swing.JPanel();
        moRadUpdateTicketsAll = new sa.lib.gui.bean.SBeanFieldRadio();

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.GridLayout(9, 1, 0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSeason.setForeground(new java.awt.Color(0, 0, 255));
        jlSeason.setText("Temporada:*");
        jlSeason.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlSeason);

        moKeySeason.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel6.add(moKeySeason);

        jPanel2.add(jPanel6);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRegion.setForeground(new java.awt.Color(0, 0, 255));
        jlRegion.setText("Región:*");
        jlRegion.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlRegion);

        moKeyRegion.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel11.add(moKeyRegion);

        jPanel2.add(jPanel11);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setForeground(new java.awt.Color(0, 0, 255));
        jlItem.setText("Ítem:*");
        jlItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlItem);

        moKeyItem.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel7.add(moKeyItem);

        jPanel2.add(jPanel7);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProducer.setForeground(new java.awt.Color(0, 0, 255));
        jlProducer.setText("Proveedor:*");
        jlProducer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlProducer);

        moKeyProducer.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel15.add(moKeyProducer);

        moBoolFreight.setText("Se paga flete al proveedor");
        moBoolFreight.setEditable(false);
        moBoolFreight.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel15.add(moBoolFreight);

        jPanel2.add(jPanel15);

        jPanel9.setEnabled(false);
        jPanel9.setFocusable(false);
        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolPrcTon.setText("Aplica precio ton para el proveedor");
        moBoolPrcTon.setPreferredSize(new java.awt.Dimension(225, 23));
        jPanel9.add(moBoolPrcTon);

        jPanel2.add(jPanel9);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPricePerTonReg.setText("Precio ton región:");
        jlPricePerTonReg.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jlPricePerTonReg);

        moDecPricePerTonReg.setEditable(false);
        jPanel17.add(moDecPricePerTonReg);

        moTextCurrencyCodePrcTonReg.setEditable(false);
        moTextCurrencyCodePrcTonReg.setText("sBeanFieldText1");
        moTextCurrencyCodePrcTonReg.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel17.add(moTextCurrencyCodePrcTonReg);

        jPanel2.add(jPanel17);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPricePerTon.setText("Precio ton:*");
        jlPricePerTon.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlPricePerTon);
        jPanel16.add(moDecPricePerTon);

        moTextCurrencyCodePrcTon.setEditable(false);
        moTextCurrencyCodePrcTon.setText("sBeanFieldText1");
        moTextCurrencyCodePrcTon.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel16.add(moTextCurrencyCodePrcTon);

        jbEditPrice.setText("<");
        jbEditPrice.setToolTipText("Modificar precios");
        jbEditPrice.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jbEditPrice.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel16.add(jbEditPrice);

        jPanel2.add(jPanel16);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPriceFreight.setText("Precio flete:*");
        jlPriceFreight.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlPriceFreight);
        jPanel14.add(moDecPriceFreight);

        moTextCurrencyCodeFreight.setEditable(false);
        moTextCurrencyCodeFreight.setText("sBeanFieldText1");
        moTextCurrencyCodeFreight.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel14.add(moTextCurrencyCodeFreight);

        jPanel2.add(jPanel14);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolDefault.setText("Región predeterminada para misma temporada, ítem y proveedor");
        moBoolDefault.setPreferredSize(new java.awt.Dimension(500, 23));
        jPanel13.add(moBoolDefault);

        jPanel2.add(jPanel13);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Actualización por cambio en precio:"));
        jPanel10.setLayout(new java.awt.BorderLayout());

        jPanel12.setLayout(new java.awt.GridLayout(3, 0, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moUpdateTickets.add(moRadUpdateTicketsNone);
        moRadUpdateTicketsNone.setSelected(true);
        moRadUpdateTicketsNone.setText("No actualizar boletos");
        moRadUpdateTicketsNone.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel4.add(moRadUpdateTicketsNone);

        jPanel12.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moUpdateTickets.add(moRadUpdateTicketsAsOfDate);
        moRadUpdateTicketsAsOfDate.setText("Actualizar boletos a partir del");
        moRadUpdateTicketsAsOfDate.setPreferredSize(new java.awt.Dimension(170, 23));
        jPanel5.add(moRadUpdateTicketsAsOfDate);
        jPanel5.add(moDateDate);

        jPanel12.add(jPanel5);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moUpdateTickets.add(moRadUpdateTicketsAll);
        moRadUpdateTicketsAll.setText("Actualizar todos los boletos");
        moRadUpdateTicketsAll.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel8.add(moRadUpdateTicketsAll);

        jPanel12.add(jPanel8);

        jPanel10.add(jPanel12, java.awt.BorderLayout.NORTH);

        jPanel1.add(jPanel10, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbEditPrice;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlPriceFreight;
    private javax.swing.JLabel jlPricePerTon;
    private javax.swing.JLabel jlPricePerTonReg;
    private javax.swing.JLabel jlProducer;
    private javax.swing.JLabel jlRegion;
    private javax.swing.JLabel jlSeason;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolDefault;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolFreight;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolPrcTon;
    private sa.lib.gui.bean.SBeanFieldDate moDateDate;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecPriceFreight;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecPricePerTon;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecPricePerTonReg;
    private sa.lib.gui.bean.SBeanFieldKey moKeyItem;
    private sa.lib.gui.bean.SBeanFieldKey moKeyProducer;
    private sa.lib.gui.bean.SBeanFieldKey moKeyRegion;
    private sa.lib.gui.bean.SBeanFieldKey moKeySeason;
    private sa.lib.gui.bean.SBeanFieldRadio moRadUpdateTicketsAll;
    private sa.lib.gui.bean.SBeanFieldRadio moRadUpdateTicketsAsOfDate;
    private sa.lib.gui.bean.SBeanFieldRadio moRadUpdateTicketsNone;
    private sa.lib.gui.bean.SBeanFieldText moTextCurrencyCodeFreight;
    private sa.lib.gui.bean.SBeanFieldText moTextCurrencyCodePrcTon;
    private sa.lib.gui.bean.SBeanFieldText moTextCurrencyCodePrcTonReg;
    private javax.swing.ButtonGroup moUpdateTickets;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 720, 450);
        moFieldKeyGroup = new SGuiFieldKeyGroup(miClient);

        moKeySeason.setKeySettings(miClient, SGuiUtils.getLabelName(jlSeason.getText()), true);
        moKeyRegion.setKeySettings(miClient, SGuiUtils.getLabelName(jlRegion.getText()), true);
        moKeyItem.setKeySettings(miClient, SGuiUtils.getLabelName(jlItem.getText()), true);
        moKeyProducer.setKeySettings(miClient, SGuiUtils.getLabelName(jlProducer.getText()), true);
        moBoolFreight.setBooleanSettings(SGuiUtils.getLabelName(moBoolFreight.getText()), false);
        moBoolPrcTon.setBooleanSettings(SGuiUtils.getLabelName(moBoolPrcTon.getText()), false);
        moDecPricePerTonReg.setDecimalSettings(SGuiUtils.getLabelName(jlPricePerTonReg.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moTextCurrencyCodePrcTonReg.setTextSettings(SGuiUtils.getLabelName(jlPricePerTonReg.getText()), 3);
        moDecPricePerTon.setDecimalSettings(SGuiUtils.getLabelName(jlPricePerTon.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moTextCurrencyCodePrcTon.setTextSettings(SGuiUtils.getLabelName(jlPricePerTon.getText()), 3);
        moDecPriceFreight.setDecimalSettings(SGuiUtils.getLabelName(jlPriceFreight.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moTextCurrencyCodeFreight.setTextSettings(SGuiUtils.getLabelName(jlPriceFreight.getText()), 3);
        moRadUpdateTicketsNone.setBooleanSettings(SGuiUtils.getLabelName(moRadUpdateTicketsNone.getText()), true);
        moRadUpdateTicketsAsOfDate.setBooleanSettings(SGuiUtils.getLabelName(moRadUpdateTicketsAsOfDate.getText()), false);
        moDateDate.setDateSettings(miClient, SGuiUtils.getLabelName(moRadUpdateTicketsAsOfDate.getText()), true);
        moRadUpdateTicketsAll.setBooleanSettings(SGuiUtils.getLabelName(moRadUpdateTicketsAll.getText()), false);
        moBoolDefault.setBooleanSettings(SGuiUtils.getLabelName(moBoolDefault.getText()), false);

        moFields.addField(moKeySeason);
        moFields.addField(moKeyRegion);
        moFields.addField(moKeyItem);
        moFields.addField(moKeyProducer);
        moFields.addField(moBoolFreight);
        moFields.addField(moBoolPrcTon);
        //moFields.addField(moDecPricePerTonReg);
        moFields.addField(moDecPricePerTon);
        moFields.addField(moDecPriceFreight);
        moFields.addField(moRadUpdateTicketsNone);
        moFields.addField(moRadUpdateTicketsAsOfDate);
        moFields.addField(moDateDate);
        moFields.addField(moRadUpdateTicketsAll);
        moFields.addField(moBoolDefault);

        moFields.setFormButton(jbSave);
    }
    
    private void setPriceTonRegion() {
        double priceRegion = 0;
        SDbSeasonRegion region;
        
        try {
            if (moKeySeason.getSelectedIndex() > 0 && moKeyRegion.getSelectedIndex() > 0 && moKeyItem.getSelectedIndex() > 0) {
                region = (SDbSeasonRegion) miClient.getSession().readRegistry(SModConsts.SU_SEAS_REG, new int[] { moKeySeason.getValue()[0], moKeyRegion.getValue()[1], moKeyItem.getValue()[2] });

                priceRegion = region.getPricePerTon();
            }
            moDecPricePerTonReg.setValue(priceRegion);
        }
        catch (Exception e) {
            SLibUtils.printException(this, e);
        }
    }

    private void actionItemEditPrice(boolean enable) {
        moBoolPrcTon.setEnabled(enable);
        moDecPriceFreight.setEditable(enable && (moProducer != null && moProducer.isFreightPayment()));
        jbEditPrice.setEnabled(!enable);
        itemStatePriceTon();
    }
    
    private void actionUpdateTicket() {
        if (moRadUpdateTicketsAsOfDate.isSelected() && !moDateDate.isEditable()) {
            moDateDate.setValue(miClient.getSession().getWorkingDate());
        }
        moDateDate.setEditable(moRadUpdateTicketsAsOfDate.isSelected());
    }
    
    private void itemStatePriceTon() {
        moDecPricePerTon.setEditable(moBoolPrcTon.getValue() && moBoolPrcTon.isEnabled());
        
        if (moDecPricePerTon.isEditable()) {
            moDecPricePerTon.requestFocus();
        }
        
        if (!moBoolPrcTon.getValue()) {
            moDecPricePerTon.setValue(0d);
        }
    }

    private void itemStateFreight() {
        moDecPriceFreight.setEditable(moBoolFreight.getValue() && moBoolPrcTon.isEnabled());
    }

    private void itemStateKeyProducer() {
        boolean enable = false;
        
        if (moKeyProducer.getSelectedIndex() > 0) {
            moProducer = new SDbProducer();

            try {
                moProducer.read(miClient.getSession(), moKeyProducer.getValue());
            }
            catch (SQLException e) {
                SLibUtils.showException(this, e);
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
            enable = moProducer.isFreightPayment();
        }
        moBoolFreight.setValue(enable);
        itemStateFreight();
    }

    @Override
    public void addAllListeners() {
        moBoolFreight.addItemListener(this);
        moBoolPrcTon.addItemListener(this);
        moKeyItem.addItemListener(this);
        moKeyProducer.addItemListener(this);
        jbEditPrice.addActionListener(this);
        moRadUpdateTicketsNone.addChangeListener(this);
        moRadUpdateTicketsAsOfDate.addChangeListener(this);
        moRadUpdateTicketsAll.addChangeListener(this);
    }

    @Override
    public void removeAllListeners() {
        moBoolFreight.removeItemListener(this);
        moBoolPrcTon.removeItemListener(this);
        moKeyItem.removeItemListener(this);
        moKeyProducer.removeItemListener(this);
        jbEditPrice.removeActionListener(this);
        moRadUpdateTicketsNone.removeChangeListener(this);
        moRadUpdateTicketsAsOfDate.removeChangeListener(this);
        moRadUpdateTicketsAll.removeChangeListener(this);
    }

    @Override
    public void reloadCatalogues() {
        moFieldKeyGroup.initGroup();
        moFieldKeyGroup.addFieldKey(moKeySeason, SModConsts.SX_PROD_SEAS, SLibConsts.UNDEFINED, null);
        moFieldKeyGroup.addFieldKey(moKeyRegion, SModConsts.SX_PROD_REG, SLibConsts.UNDEFINED, null);
        moFieldKeyGroup.addFieldKey(moKeyItem, SModConsts.SX_PROD_ITEM, SLibConsts.UNDEFINED, null);
        moFieldKeyGroup.populateCatalogues();

        miClient.getSession().populateCatalogue(moKeyProducer, SModConsts.SU_PROD, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        int[] key;
        moRegistry = (SDbSeasonProducer) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        key = moRegistry.getPrimaryKey();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moKeySeason.setValue(new int[] { key[0] });
        moKeyRegion.setValue(new int[] { key[0], key[1] });
        moKeyItem.setValue(new int[] { key[0], key[1], key[2] });
        moKeyProducer.setValue(new int[] { key[3] });
        moDecPriceFreight.setValue(mdAuxPriceFreight = moRegistry.getPriceFreight());
        moBoolDefault.setValue(moRegistry.isDefault());
        moTextCurrencyCodeFreight.setValue(((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getLocalCurrencyCode());
        moDecPricePerTon.setValue(mdAuxPricePerTon = moRegistry.getPricePerTon());
        moTextCurrencyCodePrcTon.setValue(((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getLocalCurrencyCode());
        moTextCurrencyCodePrcTonReg.setValue(((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getLocalCurrencyCode());
        moBoolFreight.setValue(moRegistry.isFreightPayment());
        moBoolPrcTon.setValue(moRegistry.isPricePerTon());

        setFormEditable(true);

        moBoolFreight.setEnabled(false);
        moDecPriceFreight.setEditable(false);
        moDecPricePerTon.setEditable(moRegistry.isPricePerTon());
        
        actionItemEditPrice(moRegistry.isRegistryNew());
        
        itemStateFreight();
        itemStatePriceTon();
        itemStateKeyProducer();
        
        setPriceTonRegion();

        if (moRegistry.isRegistryNew()) {
            if (key == null) {
                moFieldKeyGroup.resetGroup();
            }
        }
        else {
            moKeySeason.setEnabled(false);
            moKeyRegion.setEnabled(false);
            moKeyItem.setEnabled(false);
            moKeyProducer.setEnabled(false);
        }
        
        moDateDate.setValue(miClient.getSession().getWorkingDate());
        moDecPricePerTonReg.setEditable(false);
        moRadUpdateTicketsNone.setSelected(true);
        
        addAllListeners();
        
        actionUpdateTicket();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbSeasonProducer registry = moRegistry.clone();

        if (registry.isRegistryNew()) {
            registry.setPkSeasonId(moKeyItem.getValue()[0]);
            registry.setPkRegionId(moKeyItem.getValue()[1]);
            registry.setPkItemId(moKeyItem.getValue()[2]);
            registry.setPkProducerId(moKeyProducer.getValue()[0]);
        }

        if (moBoolFreight.getValue()) {
            registry.setPriceFreight(moDecPriceFreight.getValue());
        }
        else {
            registry.setPriceFreight(0d);
        }

        if (moBoolPrcTon.getValue()) {
            registry.setPricePerTon(moDecPricePerTon.getValue());
        }
        else {
            registry.setPricePerTon(0d);
        }

        registry.setDefault(moBoolDefault.getValue());
        registry.setPricePerTon(moBoolPrcTon.getValue());
        registry.setFreightPayment(moBoolFreight.getValue());
        
        if (moRadUpdateTicketsAsOfDate.isSelected() || moRadUpdateTicketsAll.isSelected()) {
            registry.setAuxUpdatePriceTonTickets(true);
            registry.setAuxUpdatePriceFreightTickets(true);
            registry.setAuxUpdateTicketDateStart(moRadUpdateTicketsAsOfDate.isSelected() ? moDateDate.getValue() : null);
        }
        
        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        return validation;
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JCheckBox) {
            JCheckBox checkBox = (JCheckBox)  e.getSource();

            if (checkBox == moBoolFreight) {
                itemStateFreight();
            }
            else if (checkBox == moBoolPrcTon) {
                itemStatePriceTon();
            }
        }
        else if (e.getSource() instanceof JComboBox) {
            JComboBox comboBox = (JComboBox)  e.getSource();

            if (comboBox == moKeyProducer) {
                itemStateKeyProducer();
            }
            else if (comboBox == moKeyItem) {
                setPriceTonRegion();
            }
        }
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        if (e.getSource() instanceof SBeanFieldRadio) {
            if ((SBeanFieldRadio) e.getSource() == moRadUpdateTicketsNone || (SBeanFieldRadio) e.getSource() == moRadUpdateTicketsAsOfDate ||
                    (SBeanFieldRadio) e.getSource() == moRadUpdateTicketsAll) {
                actionUpdateTicket();
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbEditPrice) {
                actionItemEditPrice(true);
            }
        }
    }
}
