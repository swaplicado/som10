/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import sa.lib.SLibConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;
import som.mod.SModConsts;
import som.mod.som.db.SDbGrindingResult;

/**
 *
 * @author Edwin Carmona
 */
public class SFormGrindingResultNew extends SBeanForm implements ItemListener {

    private SDbGrindingResult moRegistry;
    private int[] maItemPk;

    /**
     * Creates new form SFormResult
     * @param client
     * @param title
     */
    public SFormGrindingResultNew(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.S_GRINDING_RESULT, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moCaptureDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel10 = new javax.swing.JPanel();
        jlHr12 = new javax.swing.JLabel();
        bAllItems = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jlBlank = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moKeyItem = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel9 = new javax.swing.JPanel();
        jlLot = new javax.swing.JLabel();
        moKeyLot = new sa.lib.gui.bean.SBeanFieldKey();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha*:");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlDate);
        jPanel6.add(moCaptureDate);

        jPanel2.add(jPanel6);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlHr12.setText("Todos los ítems:");
        jlHr12.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlHr12);
        jPanel10.add(bAllItems);

        jPanel2.add(jPanel10);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBlank.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlBlank);

        jPanel2.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("ítem:");
        jlItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlItem);

        moKeyItem.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel8.add(moKeyItem);

        jPanel2.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLot.setText("Lote:");
        jlLot.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlLot);

        moKeyLot.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel9.add(moKeyLot);

        jPanel2.add(jPanel9);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox bAllItems;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jlBlank;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlHr12;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlLot;
    private sa.lib.gui.bean.SBeanFieldDate moCaptureDate;
    private sa.lib.gui.bean.SBeanFieldKey moKeyItem;
    private sa.lib.gui.bean.SBeanFieldKey moKeyLot;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 480, 300);

        moCaptureDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate.getText()), true);
        moKeyItem.setKeySettings(miClient, SGuiUtils.getLabelName(jlItem.getText()), true);
        moKeyLot.setKeySettings(miClient, SGuiUtils.getLabelName(jlLot.getText()), moKeyLot.isEnabled());

        moFields.addField(moCaptureDate);
        moFields.addField(moKeyItem);
        moFields.addField(moKeyLot);
        
        moFields.setFormButton(jbSave);
        
        maItemPk = new int[] { 1 };
        moKeyLot.setValue(new int[] { 0 });
        
        jbEdit.setEnabled(false);
        
        reloadCatalogues();
    }
    
    private void onChangeAllItems() {
        moKeyItem.setEditable(! bAllItems.isSelected());
        moKeyLot.setEditable(! bAllItems.isSelected());
    }
    
    private void actionItemChange() {
        if (moKeyItem.getSelectedIndex() > 0) {
            maItemPk = moKeyItem.getValue();
            
           this.reloadLots();
        }
    }

    @Override
    public void addAllListeners() {
        bAllItems.addItemListener(this);
        moKeyItem.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyItem, SModConsts.SS_LINK_CFG_ITEMS, 0, null);
        this.reloadLots();
    }
    
    private void reloadLots() {
        SGuiParams params = new SGuiParams();
        
        params.getParamsMap().clear();
        params.setKey(null);
        params.getParamsMap().put(SModConsts.SX_EXT_ITEM, maItemPk);
        
        miClient.getSession().populateCatalogue(moKeyLot, SModConsts.S_GRINDING_LOT, 0, params);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbGrindingResult) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        jtfRegistryKey.setText("");
        
        maItemPk = new int[] { moRegistry.getFkItemId() };
        
        moCaptureDate.setValue(moRegistry.getDateCapture());
        bAllItems.setSelected(false);
        onChangeAllItems();
        reloadCatalogues();
        moKeyItem.setValue(maItemPk);
        addAllListeners();
        
        if (moKeyLot.getItemCount() > 1) {
            moKeyLot.setSelectedIndex(1);
        }
        else {
            miClient.showMsgBoxError("No se ha configurado un lote para este ítem");
        }
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbGrindingResult registry = moRegistry.clone();

        if (registry.isRegistryNew()) {}

        registry.setDateCapture(moCaptureDate.getValue());
        
        if (bAllItems.isSelected()) {
            registry.setFkItemId(0);
            registry.setFkLotId(0);
        }
        else {
            registry.setFkItemId(moKeyItem.getValue()[0]);
            registry.setFkLotId(moKeyLot.getValue()[0]);
        }
        
        return registry;
    }
    
    @Override
    public void setValue(int type, Object value) {
        switch(type) {
            default:
        }
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (! bAllItems.isSelected()) {
                if (moKeyLot.getValue() == null || moKeyLot.getValue().length == 0) {
                    validation.setMessage("Debe elegir un lote.");
                    validation.setComponent(moKeyLot.getComponent());
                }
            }
        }

        return validation;
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                JComboBox comboBox = (JComboBox) e.getSource();
                if (comboBox == moKeyItem) {
                    actionItemChange();
                }
            }
        }
        else  if (e.getSource() instanceof JCheckBox) {
            JCheckBox checkBox = (JCheckBox)  e.getSource();

            if (checkBox == bAllItems) {
                onChangeAllItems();
            }
        }
    }
}
