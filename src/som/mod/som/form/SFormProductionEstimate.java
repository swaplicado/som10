/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.Date;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;
import som.gui.SGuiClientSessionCustom;
import som.gui.SGuiClientUtils;
import som.mod.SModConsts;
import som.mod.SModSysConsts;
import som.mod.som.db.SDbIog;
import som.mod.som.db.SDbMfgEstimation;
import som.mod.som.db.SRowProductionInventory;
import som.mod.som.db.SSomConsts;
import som.mod.som.db.SSomProductionEmpty;

/**
 *
 * @author Néstor Ávalos, Sergio Flores
 */
public class SFormProductionEstimate extends SBeanForm implements ItemListener, ActionListener {

    private SDbMfgEstimation moRegistry;
    private SGridPaneForm moGridMfgEstimation;
    private SDialogMfgEstimationVersionMoves moDlgMfgEstimationVersionMovesXXX;
    private JButton jbReturnStepXXX;

    /**
     * Creates new form SFormProductionEstimate
     */
    public SFormProductionEstimate(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.S_MFG_EST, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlDateStockDay = new javax.swing.JLabel();
        moDateStockDay = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel8 = new javax.swing.JPanel();
        jlXtaProductionEstimate = new javax.swing.JLabel();
        moDecXtaProductionEstimate = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlXtaProductionEstimateUnit = new javax.swing.JLabel();
        jPanel29 = new javax.swing.JPanel();
        jlUnit = new javax.swing.JLabel();
        moKeyUnit = new sa.lib.gui.bean.SBeanFieldKey();
        jbLockUnit = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jlXtaProductionDelivery = new javax.swing.JLabel();
        moDecXtaProductionDelivery = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlXtaProductionDeliveryUnit = new javax.swing.JLabel();
        jPanel30 = new javax.swing.JPanel();
        jlDivision = new javax.swing.JLabel();
        moKeyDivision = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel7 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jbEstimateMfg = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jpWarehouses = new javax.swing.JPanel();
        jpMoves = new javax.swing.JPanel();
        jbMoveInAdjustment = new javax.swing.JButton();
        jbMoveOutAdjustment = new javax.swing.JButton();
        jbMoveOutTransfer = new javax.swing.JButton();

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.GridLayout(4, 2, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateStockDay.setText("Fecha inventario físico:*");
        jlDateStockDay.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel3.add(jlDateStockDay);
        jPanel3.add(moDateStockDay);

        jPanel2.add(jPanel3);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        jlXtaProductionEstimate.setText("Producción estimada:");
        jlXtaProductionEstimate.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel8.add(jlXtaProductionEstimate);
        jPanel8.add(moDecXtaProductionEstimate);

        jlXtaProductionEstimateUnit.setText("UNIT");
        jlXtaProductionEstimateUnit.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel8.add(jlXtaProductionEstimateUnit);

        jPanel2.add(jPanel8);

        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUnit.setText("Unidad de estimación:*");
        jlUnit.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel29.add(jlUnit);

        moKeyUnit.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel29.add(moKeyUnit);

        jbLockUnit.setText("Bloquear unidad");
        jbLockUnit.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel29.add(jbLockUnit);

        jPanel2.add(jPanel29);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        jlXtaProductionDelivery.setText("Producción entregada:");
        jlXtaProductionDelivery.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel5.add(jlXtaProductionDelivery);
        jPanel5.add(moDecXtaProductionDelivery);

        jlXtaProductionDeliveryUnit.setText("UNIT");
        jlXtaProductionDeliveryUnit.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel5.add(jlXtaProductionDeliveryUnit);

        jPanel2.add(jPanel5);

        jPanel30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDivision.setText("División de estimación:*");
        jlDivision.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel30.add(jlDivision);

        moKeyDivision.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel30.add(moKeyDivision);

        jPanel2.add(jPanel30);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel2.add(jPanel7);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbEstimateMfg.setText("Estimar producción");
        jbEstimateMfg.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel9.add(jbEstimateMfg);

        jPanel2.add(jPanel9);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel6.setLayout(new java.awt.GridLayout(1, 2));

        jpWarehouses.setBorder(javax.swing.BorderFactory.createTitledBorder("Almacenes:"));
        jpWarehouses.setLayout(new java.awt.BorderLayout());

        jpMoves.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jbMoveInAdjustment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/som/gui/img/icon_std_stk_adj_in.gif"))); // NOI18N
        jbMoveInAdjustment.setToolTipText("Entrada ajuste");
        jbMoveInAdjustment.setPreferredSize(new java.awt.Dimension(23, 23));
        jpMoves.add(jbMoveInAdjustment);

        jbMoveOutAdjustment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/som/gui/img/icon_std_stk_adj_out.gif"))); // NOI18N
        jbMoveOutAdjustment.setToolTipText("Salida ajuste");
        jbMoveOutAdjustment.setPreferredSize(new java.awt.Dimension(23, 23));
        jpMoves.add(jbMoveOutAdjustment);

        jbMoveOutTransfer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/som/gui/img/icon_std_stk_tra.gif"))); // NOI18N
        jbMoveOutTransfer.setToolTipText("Salida traspaso");
        jbMoveOutTransfer.setPreferredSize(new java.awt.Dimension(23, 23));
        jpMoves.add(jbMoveOutTransfer);

        jpWarehouses.add(jpMoves, java.awt.BorderLayout.NORTH);

        jPanel6.add(jpWarehouses);

        jPanel1.add(jPanel6, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbEstimateMfg;
    private javax.swing.JButton jbLockUnit;
    private javax.swing.JButton jbMoveInAdjustment;
    private javax.swing.JButton jbMoveOutAdjustment;
    private javax.swing.JButton jbMoveOutTransfer;
    private javax.swing.JLabel jlDateStockDay;
    private javax.swing.JLabel jlDivision;
    private javax.swing.JLabel jlUnit;
    private javax.swing.JLabel jlXtaProductionDelivery;
    private javax.swing.JLabel jlXtaProductionDeliveryUnit;
    private javax.swing.JLabel jlXtaProductionEstimate;
    private javax.swing.JLabel jlXtaProductionEstimateUnit;
    private javax.swing.JPanel jpMoves;
    private javax.swing.JPanel jpWarehouses;
    private sa.lib.gui.bean.SBeanFieldDate moDateStockDay;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecXtaProductionDelivery;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecXtaProductionEstimate;
    private sa.lib.gui.bean.SBeanFieldKey moKeyDivision;
    private sa.lib.gui.bean.SBeanFieldKey moKeyUnit;
    // End of variables declaration//GEN-END:variables

    /*
    * Private methods
    */

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 1024, 640);
        
        moDlgMfgEstimationVersionMovesXXX = new SDialogMfgEstimationVersionMoves(miClient, "Movimientos inventario");

        /* Check if it code snippet is still required! (Sergio Flores 2015-10-12) */
        jbReturnStepXXX = new JButton("Regresar movs. externos");
        jbReturnStepXXX.setPreferredSize(new Dimension(175, 23));
        jbReturnStepXXX.addActionListener(this);
        jbReturnStepXXX.setToolTipText("Regresar a movs. externos");
        jbReturnStepXXX.setEnabled(false);
        /* Check if it code snippet is still required! (Sergio Flores 2015-10-12) */

        moDateStockDay.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateStockDay.getText()), true);
        moKeyUnit.setKeySettings(miClient, SGuiUtils.getLabelName(jlUnit), true);
        moKeyDivision.setKeySettings(miClient, SGuiUtils.getLabelName(jlDivision.getText()), true);
        moDecXtaProductionEstimate.setDecimalSettings(SGuiUtils.getLabelName(jlXtaProductionEstimate.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecXtaProductionDelivery.setDecimalSettings(SGuiUtils.getLabelName(jlXtaProductionDelivery.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);

        moFields.addField(moDateStockDay);
        moFields.addField(moKeyUnit);
        moFields.addField(moKeyDivision);

        moFields.setFormButton(jbSave);

        moDecXtaProductionEstimate.setEditable(false);
        moDecXtaProductionDelivery.setEditable(false);
        
        jlXtaProductionEstimateUnit.setText("");
        jlXtaProductionDeliveryUnit.setText("");

        moGridMfgEstimation = new SGridPaneForm(miClient, SModConsts.SX_STK_PROD_INV, SLibConsts.UNDEFINED, "Almacenes") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(true);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                SGridColumnForm[] columns = new SGridColumnForm[15];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CO, "Tanque");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Vacío");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Vacío (" + SSomConsts.M + ")");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Residuos (" + SSomConsts.M + ")");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Ítem");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ITM, "Ítem código");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Inventario físico");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Existencias sistema");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_PER_4D, "Máx dif inv físico");
                columns[col] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_L, "Omitir", 50);
                columns[col++].setEditable(true);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_L, "Observaciones");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Altura (" + SSomConsts.M + ")");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Volumen (" + SSomConsts.L + ")");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Densidad (" + SSomConsts.DEN + ")");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        mvFormGrids.add(moGridMfgEstimation);
        moGridMfgEstimation.setRowButtonsEnabled(false);
        moGridMfgEstimation.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(jpMoves);
        jpWarehouses.add(moGridMfgEstimation, BorderLayout.CENTER);

        //jpCommandCenter.add(jbReturnStep);

        /* XXX Cell renderers not implemented yet in XML
        mvFormGrids.add(moGridUserRights);
        mvFormGrids.add(moGridUserScales);
        */
    }

    private void populateMfgEstimation() throws Exception {
        int i = 0;
        boolean ok = false;
        boolean process = false;
        boolean exist = false;
        Vector<SGridRow> rows = new Vector<>();
        SRowProductionInventory productionInventory = null;
        SDialogMfgEstimationFg dlgMfgEstimationFg = null;
        
        // Validate basic manufacturing estimation parameters:

        if (moDateStockDay.getValue() == null) {
            moDateStockDay.requestFocus();
            throw new Exception(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlDateStockDay) + "'.");
        }
        else if (moKeyUnit.getSelectedIndex() <= 0) {
            moKeyUnit.requestFocus();
            throw new Exception(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlUnit) + "'.");
        }
        else if (moKeyDivision.getSelectedIndex() <= 0) {
            moKeyDivision.requestFocus();
            throw new Exception(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlDivision) + "'.");
        }
        else if (miClient.showMsgBoxConfirm(SGuiConsts.MSG_CNF_CONT) == JOptionPane.YES_OPTION) {
            if (!moRegistry.isRegistryNew()) {
                
            }
            
            moDateStockDay.setEditable(false);
            moKeyUnit.setEnabled(false);
            moKeyDivision.setEnabled(false);
            jbLockUnit.setEnabled(false);
            jbEstimateMfg.setEnabled(false);
            
            
            
            
            if (moRegistry.isClosed()) {
                throw new Exception(SSomConsts.ERR_MSG_PROD_EST + "\nEl día '" + SGuiUtils.getLabelName(jlDateStockDay) + "' está cerrado.");
            }
            else if (moRegistry.getFkUnitId() != SLibConsts.UNDEFINED && moRegistry.getFkUnitId() != moKeyUnit.getValue()[0]) {
                if (miClient.showMsgBoxConfirm(SGuiConsts.MSG_CNF_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlUnit) + "'" + SGuiConsts.MSG_CNF_FIELD_VAL_DIF + "'" + moRegistry.getXtaUnitName() + " (" + moRegistry.getXtaUnitCode() + ")" + "'?") != JOptionPane.YES_OPTION) {
                    throw new Exception(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlUnit) + "'.");
                }
            }
            
            moRegistry.setFkUnitId(moKeyUnit.getValue()[0]);
            moRegistry.setDateStockDay(moDateStockDay.getValue());
            moRegistry.setDateMfgEstimation(SLibTimeUtils.addDate(moDateStockDay.getValue(), 0, 0, -1));
            
            try {
                ok = moRegistry.validateEstimateProduction(miClient.getSession());
            }
            catch (Exception e) {
                throw new Exception(SSomConsts.ERR_MSG_PROD_EST + "\n" + e);
            }
            finally {
                if (!ok) {
                    throw new Exception(SSomConsts.ERR_MSG_PROD_EST);
                }
            }

            // Validate production estimate by product:

            moRegistry.validateProductionEstimateByProduct(miClient.getSession());
            
            if (moRegistry.getQueryResultId() != SDbConsts.READ_OK) {
                throw new Exception(SSomConsts.ERR_MSG_PROD_EST + (moRegistry.getQueryResult().isEmpty() ? "" : "\n" + moRegistry.getQueryResult()));
            }
            else {
                moRegistry.computeProductionEstimate(miClient.getSession());
                moDecXtaProductionEstimate.setValue(moRegistry.getQuantity());
                moDecXtaProductionDelivery.setValue(moRegistry.getXtaQuantityDelivery());

                dlgMfgEstimationFg = new SDialogMfgEstimationFg(miClient, "Productos fabricados");
                dlgMfgEstimationFg.setValue(SModConsts.S_MFG_EST, moRegistry);
                dlgMfgEstimationFg.setValue(SGuiConsts.PARAM_DATE, moDateStockDay.getValue());
                dlgMfgEstimationFg.setValue(SModConsts.SU_UNIT, moKeyUnit.getValue());
                dlgMfgEstimationFg.setValue(SModConsts.CU_DIV, moKeyDivision.getValue());
                dlgMfgEstimationFg.setValue(SModConsts.SX_STK_PROD_FG, moRegistry.getChildMfgWarehouseProducts());
                dlgMfgEstimationFg.setValue(SModConsts.SX_STK_PROD_EST, moRegistry.getQuantity());
                dlgMfgEstimationFg.setVisible(true);

                if (dlgMfgEstimationFg.getFormResult() != SGuiConsts.FORM_RESULT_OK) {
                    moRegistry.computeProductionEstimate(miClient.getSession());
                    moDecXtaProductionDelivery.setValue(moRegistry.getXtaQuantityDelivery());

                    if (moRegistry.getChildProductionEmpties().size() > 0) {
                        moGridMfgEstimation.clearGridRows();
                    }

                    for (SSomProductionEmpty productionEmpty : moRegistry.getChildProductionEmpties()) {

                        // Validate if warehouse has an item:

                        if (productionEmpty.getXtaPkItemId() > 0 && productionEmpty.getXtaPkUnitId() > 0) {

                            // Validate current stock:

                            process = false;
                            for (i = 0; i < moRegistry.getChildProductionInventories().size(); i++) {
                                productionInventory = moRegistry.getChildProductionInventories().get(i);

                                // Validate if exist item empty and item inventory:

                                if (productionEmpty.getPkWarehouseCompanyId() == productionInventory.getPkWarehouseCompanyId() &&
                                    productionEmpty.getPkWarehouseBranchId() == productionInventory.getPkWarehouseBranchId() &&
                                    productionEmpty.getPkWarehouseWarehouseId() == productionInventory.getPkWarehouseWarehouseId() &&
                                    productionEmpty.getXtaPkItemId() == productionInventory.getPkItemId() &&
                                    productionEmpty.getXtaPkUnitId() == productionInventory.getPkUnitId()) {

                                    productionInventory = assignProduction(productionInventory, productionEmpty, true, true);
                                    productionInventory.setXtaStockDay(productionEmpty.getStockDay());
                                    productionInventory.setProcess(true);
                                    moRegistry.getChildProductionInventories().set(i, productionInventory);
                                    process = true;
                                }
                            }

                            if (!process) {

                                // Daily stock registry does not have stock moves, then add inventory with stock equals to zero:

                                productionInventory = new SRowProductionInventory();
                                productionInventory.setPkWarehouseCompanyId(productionEmpty.getPkWarehouseCompanyId());
                                productionInventory.setPkWarehouseBranchId(productionEmpty.getPkWarehouseBranchId());
                                productionInventory.setPkWarehouseWarehouseId(productionEmpty.getPkWarehouseWarehouseId());
                                productionInventory.setPkItemId(productionEmpty.getXtaPkItemId());
                                productionInventory.setPkUnitId(productionEmpty.getXtaPkUnitId());
                                productionInventory.setStock(0d);

                                productionInventory.setXtaWarehouse(productionEmpty.getXtaWarehouse());
                                productionInventory.setXtaWarehouseCode(productionEmpty.getXtaWarehouseCode());
                                productionInventory.setXtaWarehouseHeight(productionEmpty.getXtaWarehouseHeight());
                                productionInventory.setXtaCapacityRealLiter(productionEmpty.getXtaCapacityRealLiter());
                                productionInventory.setXtaItem(productionEmpty.getXtaFGItem());
                                productionInventory.setXtaItemCode(productionEmpty.getXtaFGItemCode());
                                productionInventory.setXtaUnitCode(productionEmpty.getXtaFGItemUnitCode());

                                productionInventory = assignProduction(productionInventory, productionEmpty, process, true);

                                productionInventory.setXtaStockDay(productionEmpty.getStockDay());
                                productionInventory.setProcess(true);
                                moRegistry.getChildProductionInventories().add(productionInventory);
                            }
                        }
                        else{
                            // Validate if warehouse has only system stock:

                            exist = false;
                            for (SRowProductionInventory rpi : moRegistry.getChildProductionInventories()) {
                                if (productionEmpty.getPkWarehouseCompanyId() == rpi.getPkWarehouseCompanyId() &&
                                    productionEmpty.getPkWarehouseBranchId() == rpi.getPkWarehouseBranchId() &&
                                    productionEmpty.getPkWarehouseWarehouseId() == rpi.getPkWarehouseWarehouseId()) {

                                    exist = true;
                                    break;
                                }
                            }

                            // Add inventory with stock zero and empty zero because warehouse is active:

                            if (!exist) {
                                productionInventory = new SRowProductionInventory();
                                productionInventory.setPkWarehouseCompanyId(productionEmpty.getPkWarehouseCompanyId());
                                productionInventory.setPkWarehouseBranchId(productionEmpty.getPkWarehouseBranchId());
                                productionInventory.setPkWarehouseWarehouseId(productionEmpty.getPkWarehouseWarehouseId());
                                productionInventory.setPkItemId(productionEmpty.getXtaPkItemId());
                                productionInventory.setPkUnitId(productionEmpty.getXtaPkUnitId());
                                productionInventory.setStock(0d);

                                productionInventory.setXtaWarehouse(productionEmpty.getXtaWarehouse());
                                productionInventory.setXtaWarehouseCode(productionEmpty.getXtaWarehouseCode());
                                productionInventory.setXtaWarehouseHeight(productionEmpty.getXtaWarehouseHeight());
                                productionInventory.setXtaCapacityRealLiter(productionEmpty.getXtaCapacityRealLiter());
                                productionInventory.setXtaItem("");
                                productionInventory.setXtaItemCode("");
                                productionInventory.setXtaUnitCode("");

                                productionInventory = assignProduction(productionInventory, productionEmpty, false, exist);

                                productionInventory.setXtaReqAdjustment(true);
                                moRegistry.getChildProductionInventories().add(productionInventory);
                            }
                        }
                    }

                    // Validate that all records in inventory have been processed:

                    for (SRowProductionInventory rpi : moRegistry.getChildProductionInventories()) {

                        if (!rpi.getProcess() ) {
                            rpi.setNote("Se requiere la toma de vacío del ítem: '" + rpi.getXtaItem() + " (" +
                            rpi.getXtaItemCode() + ")' del almacén: '" + rpi.getXtaWarehouse() + " (" +
                            rpi.getXtaWarehouseCode() + ")'.");
                            rpi.setXtaReqAdjustment(true);
                        }

                        if (rpi.getXtaStockDay() != null && !rpi.getXtaStockDay().isStockDifferenceSkipped()) {
                            rows.add(rpi);
                        }
                    }
                }
            }

            moGridMfgEstimation.populateGrid(rows);

            updateFieldsStatus();
        }
    }

    private void updateFieldsStatus() {
        if (moGridMfgEstimation.getSelectedGridRows().length > 0) {
            moDateStockDay.setEnabled(false);
            moKeyUnit.setEnabled(false);
            moKeyDivision.setEnabled(false);
            jbLockUnit.setEnabled(false);
            jbEstimateMfg.setEnabled(false);
        }
        else {
            moDateStockDay.setEnabled(moRegistry.isRegistryNew());
            moKeyUnit.setEnabled(true);
            moKeyDivision.setEnabled(true);
            jbLockUnit.setEnabled(true);
            jbEstimateMfg.setEnabled(true);
        }
    }

    private void actionEstimateMfg() {
        if (jbEstimateMfg.isEnabled()) {
            try {
                populateMfgEstimation();
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
        }
    }

    private SRowProductionInventory assignProduction(SRowProductionInventory productionInventory, SSomProductionEmpty productionEmpty, boolean process, boolean exist) {
        productionInventory.setXtaEmpty(productionEmpty.getXtaEmpty());
        productionInventory.setXtaEmptiness(productionEmpty.getXtaEmptiness());
        productionInventory.setXtaEmptyKg(productionEmpty.getXtaEmptyKg());
        productionInventory.setXtaCull(productionEmpty.getXtaCull());
        productionInventory.setXtaWarehouseHeight(productionEmpty.getXtaWarehouseHeight());

        // Validate units for FG, RM, BP and CU:

        if ((productionEmpty.getXtaFkRMItemUnitId() > 0 && productionEmpty.getXtaPkUnitId() != productionEmpty.getXtaFkRMItemUnitId()) ||
            (productionEmpty.getXtaFkBPItemUnitId() > 0 && productionEmpty.getXtaPkUnitId() != productionEmpty.getXtaFkBPItemUnitId()) ||
            (productionEmpty.getXtaFkCUItemUnitId() > 0 && productionEmpty.getXtaPkUnitId() != productionEmpty.getXtaFkCUItemUnitId()) &&
             process) {

            // Error, different units with RM, FG, CP and CU:

            productionInventory.setNote("Error, las unidades del producto terminado (" + productionEmpty.getXtaFGItemUnitCode() + "), " +
                "materia prima (" + productionEmpty.getXtaRMItemUnitCode() + "), subproducto (" + productionEmpty.getXtaBPItemUnitCode() + ") o " +
                "desecho (" + productionEmpty.getXtaCUItemUnitCode() + ") son diferentes.");
            productionInventory.setXtaUnitCode("");
            productionInventory.setXtaReqAdjustment(true);
        }
        else if (!process || (productionEmpty.getXtaEmptyKg() > productionInventory.getStock())) {

            // Exist production FG:

            if (process) {
                productionInventory.setXtaEstimateProductionFG(productionEmpty.getXtaEmptyKg() - productionInventory.getStock());
            }
            else {
                productionInventory.setXtaEstimateProductionFG(productionEmpty.getXtaEmptyKg());
            }

            if (exist) {
                /*productionInventory.setNote("La producción estimada para el ítem: '" + productionInventory.getXtaItem() + " (" +
                    productionInventory.getXtaItemCode() + ")' del almacén: '" + productionInventory.getXtaWarehouse() + " (" +
                    productionInventory.getXtaWarehouseCode() + ")' es de: '" + SLibUtils.DecimalFormatValue2D.format(productionInventory.getXtaEstimateProductionFG()) + "' " +
                    productionEmpty.getXtaFGItemUnitCode() + ". "); */
                productionInventory.setNote("Ninguno. ");
            }
            else {
                productionInventory.setNote("Se requiere la toma de vacío del almacén: '" + productionEmpty.getXtaWarehouse() + " (" +
                    productionEmpty.getXtaWarehouseCode() + ")'.");
            }

            // Exist production BP:

            if (process) {
                productionInventory.setXtaEstimateProductionBP(
                    (productionEmpty.getXtaFGPercentage() > 0 ?
                    ((productionEmpty.getXtaEmptyKg() - productionInventory.getStock()) / productionEmpty.getXtaFGPercentage()) : 0) *
                    productionEmpty.getXtaBPPercentage());
            }
            else {
                productionInventory.setXtaEstimateProductionBP(
                    (productionEmpty.getXtaFGPercentage() > 0 ?
                    (productionEmpty.getXtaEmptyKg() / productionEmpty.getXtaFGPercentage()) : 0) *
                    productionEmpty.getXtaBPPercentage());
            }

            productionInventory.setNote(productionInventory.getNote() + "La producción estimada de subproducto es de: '" +
                SLibUtils.DecimalFormatValue2D.format(productionInventory.getXtaEstimateProductionBP()) + "' " +
                productionEmpty.getXtaFGItemUnitCode() + ". ");

            productionInventory.setXtaFkItemByProduct(productionEmpty.getXtaFkBPItemId());
            productionInventory.setXtaFkUnitByProduct(productionEmpty.getXtaFkBPItemUnitId());
            productionInventory.setXtaFkWarehouseCompanyByProduct(productionEmpty.getXtaFkBPWarehouseCompanyId());
            productionInventory.setXtaFkWarehouseBranchByProduct(productionEmpty.getXtaFkBPWarehouseBranchId());
            productionInventory.setXtaFkWarehouseWarehouseByProduct(productionEmpty.getXtaFkBPWarehouseWarehouseId());

            // Exist production WA:

            if (process) {
                productionInventory.setXtaEstimateProductionWA(
                    (productionEmpty.getXtaFGPercentage() > 0 ?
                    ((productionEmpty.getXtaEmptyKg() - productionInventory.getStock()) / productionEmpty.getXtaFGPercentage()) : 0) *
                    productionEmpty.getXtaCUPercentage());
            }
            else {
                productionInventory.setXtaEstimateProductionWA(
                    (productionEmpty.getXtaFGPercentage() > 0 ?
                    (productionEmpty.getXtaEmptyKg() / productionEmpty.getXtaFGPercentage()) : 0) *
                    productionEmpty.getXtaCUPercentage());
            }

            productionInventory.setNote(productionInventory.getNote() + "La producción estimada de desecho es de: '" +
                SLibUtils.DecimalFormatValue2D.format(productionInventory.getXtaEstimateProductionCU()) + "' " +
                productionEmpty.getXtaFGItemUnitCode() + ".");

            productionInventory.setXtaFkItemCull(productionEmpty.getXtaFkCUItemId());
            productionInventory.setXtaFkUnitCull(productionEmpty.getXtaFkCUItemUnitId());
            productionInventory.setXtaFkWarehouseCompanyCull(productionEmpty.getXtaFkCUWarehouseCompanyId());
            productionInventory.setXtaFkWarehouseBranchCull(productionEmpty.getXtaFkCUWarehouseBranchId());
            productionInventory.setXtaFkWarehouseWarehouseCull(productionEmpty.getXtaFkCUWarehouseWarehouseId());
        }
        else  if (process && productionEmpty.getXtaEmptyKg() < productionInventory.getStock()) {

            // Error required adjusment moves:

            productionInventory.setNote("Error, faltan realizar ajustes a la producción para el ítem: '" + productionInventory.getXtaItem() + " (" +
                    productionInventory.getXtaItemCode() + ")' del almacén '" + productionInventory.getXtaWarehouse() + " (" +
                    productionInventory.getXtaWarehouseCode() + ").");
            productionInventory.setXtaReqAdjustment(true);
        }
        else {
            // No production:

            productionInventory.setNote("No hubo producción para el ítem: '" + productionInventory.getXtaItem() + " (" +
                    productionInventory.getXtaItemCode() + ")' del almacén: '" + productionInventory.getXtaWarehouse() + " (" +
                    productionInventory.getXtaWarehouseCode() + ")'.");
        }

        // Raw material consumed:

        if (productionInventory.getXtaEstimateProductionFG() > 0) {

            productionInventory.setXtaEstimateConsumptionRM(productionEmpty.getXtaFGPercentage() > 0 ?
                productionInventory.getXtaEstimateProductionFG() / productionEmpty.getXtaFGPercentage() : 0);

            productionInventory.setXtaFkItemRawMaterial(productionEmpty.getXtaFkRMItemId());
            productionInventory.setXtaFkUnitRawMaterial(productionEmpty.getXtaFkRMItemUnitId());
            productionInventory.setXtaFkWarehouseCompanyRawMaterial(productionEmpty.getXtaFkRMWarehouseCompanyId());
            productionInventory.setXtaFkWarehouseBranchRawMaterial(productionEmpty.getXtaFkRMWarehouseBranchId());
            productionInventory.setXtaFkWarehouseWarehouseRawMaterial(productionEmpty.getXtaFkRMWarehouseWarehouseId());
        }

        return productionInventory;
    }

    private void actionInventoryMove(int[] anIogTp) {
        SGuiParams params = null;

        params = new SGuiParams();
        params.getParamsMap().put(SModConsts.SS_IOG_TP, anIogTp);

        miClient.showMsgBoxWarning("La fecha de creación de movimiento de inventario debe ser anterior a la fecha del inventario físico.");
        miClient.getSession().getModule(SModConsts.MOD_SOM_OS, SLibConsts.UNDEFINED).showForm(SModConsts.S_IOG, SLibConsts.UNDEFINED, params);
        miClient.getSession().notifySuscriptors(SModConsts.S_IOG);
        miClient.getSession().notifySuscriptors(SModConsts.S_STK);
        miClient.getSession().notifySuscriptors(SModConsts.S_IOG_EXP);

        try {
            if (moGridMfgEstimation.getTable().getRowCount() > 0) {
                populateMfgEstimation();
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    private void actionSelectUnit() {
        if (jbLockUnit.isEnabled()) {

            if (moKeyUnit.getSelectedIndex() > 0 &&
                miClient.showMsgBoxConfirm(SGuiConsts.MSG_CNF_FIELD_VAL_ + SGuiUtils.getLabelName(jlUnit) + SGuiConsts.MSG_CNF_FIELD_VAL_EQU + "'" + moKeyUnit.getSelectedItem().getItem() + "'.\n" + SGuiConsts.MSG_CNF_CONT) == JOptionPane.YES_OPTION) {

                jbLockUnit.setEnabled(false);
                moKeyUnit.setEnabled(false);
                moKeyDivision.requestFocus();
            }
        }
    }

    private void actionMovesVersion() {
        /*if (jbProductionDeliveryMoves.isEnabled()) {

            moMovesVersion.setValue(SModConsts.SU_UNIT, moKeyUnit.getValue());
            moMovesVersion.setValue(SGuiConsts.PARAM_DATE, moDate.getValue());
            moMovesVersion.setValue(SModConsts.SX_STK_PROD_EST, moDecXtaProductionEstimate.getValue());
            moMovesVersion.setVisible(true);
        } */
    }

    private void actionReturnStep() {
        SGuiParams params = null;
        SDbRegistry registry = null;
        SFormDialogWizardDps wizard = new SFormDialogWizardDps(miClient, "Movimientos externos");

        if (jbReturnStepXXX.isEnabled()) {
            try {
                super.actionSave();
                registry = getRegistry();
                registry.save(miClient.getSession());

                /*
                 * Review if is necessary use module for open dialog WizardDps
                 */

                //params = new SGuiParams();
                //params.getParamsMap().put(SModConsts.SU_UNIT, moKeyUnit.getValue());
                //params.getParamsMap().put(SGuiConsts.PARAM_DATE, moDate.getValue());
                //miClient.getSession().getModule(SModConsts.MOD_SOM_OS, SLibConsts.UNDEFINED).showForm(SModConsts.SX_WIZ_DPS, SLibConsts.UNDEFINED, params);

                wizard.setValue(SModConsts.SU_UNIT, moKeyUnit.getValue());
                wizard.setValue(SGuiConsts.PARAM_DATE, moDateStockDay.getValue());
                wizard.setVisible(true);

            } catch (Exception e) {
                SLibUtils.showException(this, e);
            }
        }
    }

    private void itemStateChangedUnit() {
        if (moKeyUnit.getSelectedIndex() <= 0) {
            jlXtaProductionEstimateUnit.setText("");
            jlXtaProductionDeliveryUnit.setText("");
        }
        else {
            jlXtaProductionEstimateUnit.setText(moKeyUnit.getSelectedItem().getCode());
            jlXtaProductionDeliveryUnit.setText(moKeyUnit.getSelectedItem().getCode());
        }
    }

    /*
    * Public methods
    */

    /*
    * Overriden methods
    */

    @Override
    public void addAllListeners() {
        jbLockUnit.addActionListener(this);
        jbEstimateMfg.addActionListener(this);
        //jbProductionDeliveryMoves.addActionListener(this);
        jbMoveInAdjustment.addActionListener(this);
        jbMoveOutAdjustment.addActionListener(this);
        jbMoveOutTransfer.addActionListener(this);
        //jbProductionDeliveryMoves.addActionListener(this);
        moKeyUnit.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbLockUnit.removeActionListener(this);
        jbEstimateMfg.removeActionListener(this);
        //jbProductionDeliveryMoves.removeActionListener(this);
        jbMoveInAdjustment.removeActionListener(this);
        jbMoveOutAdjustment.removeActionListener(this);
        jbMoveOutTransfer.removeActionListener(this);
        //jbProductionDeliveryMoves.removeActionListener(this);
        moKeyUnit.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyUnit, SModConsts.SU_UNIT, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyDivision, SModConsts.CU_DIV, SLibConsts.UNDEFINED, null);

        if (moKeyDivision.getModel().getSize() == 2) {
            moKeyDivision.setSelectedIndex(1);
        }
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbMfgEstimation) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            jtfRegistryKey.setText("");
        }
        else {
            throw new Exception(SGuiConsts.ERR_MSG_FORM_NEW_REG);
        }

        moDateStockDay.setValue(miClient.getSession().getWorkingDate());
        moKeyUnit.setValue(new int[] { SModSysConsts.SU_UNIT_KG });
        itemStateChangedUnit();
        moKeyDivision.setValue(new int[] { ((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getCompany().getFkDivisionDefaultId() });
        
        moDecXtaProductionEstimate.setValue(0d);
        moDecXtaProductionDelivery.setValue(0d);

        moGridMfgEstimation.clearGridRows();
        
        setFormEditable(true);

        if (moRegistry.isRegistryNew()) {
            // add code here...
        }
        else {
            // add code here...
        }
        
        updateFieldsStatus();

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        boolean exist = false;
        SDbMfgEstimation registry = (SDbMfgEstimation) moRegistry.clone();
        SRowProductionInventory rpi = null;
        SDbIog iog = null;

        if (moRegistry.isRegistryNew()) {
            // add code here...
        }
        else {
            // add code here...
        }

        registry.setDateStockDay(moDateStockDay.getValue());
        registry.setDateMfgEstimation(SLibTimeUtils.addDate(moDateStockDay.getValue(), 0, 0, -1));
        registry.setFkUnitId(moKeyUnit.getValue()[0]);
        
        registry.getChildProductionInventories().clear();
        registry.getChildCanSaveIogs().clear();
        for (SGridRow row : moGridMfgEstimation.getModel().getGridRows()) {
            rpi = (SRowProductionInventory) row;
            registry.getChildProductionInventories().add((SRowProductionInventory) row);

            if (!rpi.getXtaStockDifferenceSkipped()) {
                if (rpi.getXtaEstimateConsumptionRM() > 0) {
                    // Check if item and unit do exit already:

                    exist = false;
                    for (int i = 0; i < registry.getChildCanSaveIogs().size(); i++) {

                        iog = registry.getChildCanSaveIogs().get(i);
                        if (SLibUtils.compareKeys(
                            new int[] { rpi.getXtaFkItemRawMaterial(), rpi.getXtaFkUnitRawMaterial() },
                            new int[] { iog.getFkItemId(), iog.getFkUnitId() }) &&
                            SLibUtils.compareKeys(
                            new int[] { rpi.getXtaFkWarehouseCompanyRawMaterial(), rpi.getXtaFkWarehouseBranchRawMaterial(), rpi.getXtaFkWarehouseWarehouseRawMaterial() },
                            new int[] { iog.getFkWarehouseCompanyId(), iog.getFkWarehouseBranchId(), iog.getFkWarehouseWarehouseId() })) {
                            // Sum quantity:

                            iog.setQuantity(iog.getQuantity() + rpi.getXtaEstimateConsumptionRM());
                            registry.getChildCanSaveIogs().set(i, iog);
                            exist = true;
                            break;
                        }
                    }

                    if (!exist) {
                        iog = new SDbIog();
                        iog.setDate(registry.getDateMfgEstimation());
                        iog.setQuantity(rpi.getXtaEstimateConsumptionRM());
                        iog.setSystem(true);
                        iog.setFkIogCategoryId(SModSysConsts.SS_IOG_TP_OUT_MFG_RM_ASD[0]);
                        iog.setFkIogClassId(SModSysConsts.SS_IOG_TP_OUT_MFG_RM_ASD[1]);
                        iog.setFkIogTypeId(SModSysConsts.SS_IOG_TP_OUT_MFG_RM_ASD[2]);
                        iog.setFkIogAdjustmentTypeId(SModSysConsts.SU_IOG_ADJ_TP_NA);
                        iog.setFkItemId(rpi.getXtaFkItemRawMaterial());
                        iog.setFkUnitId(rpi.getXtaFkUnitRawMaterial());
                        iog.setFkWarehouseCompanyId(rpi.getXtaFkWarehouseCompanyRawMaterial());
                        iog.setFkWarehouseBranchId(rpi.getXtaFkWarehouseBranchRawMaterial());
                        iog.setFkWarehouseWarehouseId(rpi.getXtaFkWarehouseWarehouseRawMaterial());
                        
                        registry.getChildCanSaveIogs().add(iog);
                    }
                }
            }
        }

        miClient.getSession().notifySuscriptors(SModConsts.S_IOG);
        miClient.getSession().notifySuscriptors(SModConsts.S_STK);

        return registry;
    }

    @Override
    public void setValue(int type, Object value) {
         switch (type) {
            case SGuiConsts.PARAM_DATE:
                moDateStockDay.setValue((Date) value);
                break;
            case SModConsts.SU_UNIT:
                moKeyUnit.setValue((int[]) value);
                moKeyUnit.setEnabled(false);
                jbLockUnit.setEnabled(false);
            default:
        }
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        SRowProductionInventory rpi = null;

        if (validation.isValid()) {
            if (!SGuiClientUtils.isPeriodOpened(miClient.getSession(), moDateStockDay.getValue())) {
                validation.setMessage("El período está cerrado.");
                validation.setComponent(moDateStockDay.getComponent());
            }
        }

        for (SGridRow row : moGridMfgEstimation.getModel().getGridRows()) {
            rpi = (SRowProductionInventory) row;
            if (rpi.getXtaStockDifferenceSkipped()) {
                if (rpi.getStock() > 0 && Math.abs((rpi.getXtaEmptyKg() / rpi.getStock()) - 1) >
                    ((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getCompany().getMaximumStockDifferenceKg()) {

                    validation.setComponent(moDateStockDay.getComponent());
                    validation.setMessage("El ítem: '" +
                        rpi.getXtaItem() + " (" + rpi.getXtaItemCode() + ")' del almacén: '" +
                        rpi.getXtaWarehouse() + " (" + rpi.getXtaWarehouseCode() + ")', \n " +
                        "no se puede omitir porque la diferencia entre el 'inventario físico' y las 'existencias sistema' (" +
                        SLibUtils.DecimalFormatPercentage2D.format((rpi.getXtaEmptyKg() / rpi.getStock()) - 1) + ") supera el máximo autorizado (" +
                        SLibUtils.DecimalFormatPercentage2D.format(((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getCompany().getMaximumStockDifferenceKg()) + ").");
                    break;
                }
            }
            else if (rpi.getXtaReqAdjustment()) {
                validation.setComponent(moDateStockDay.getComponent());
                validation.setMessage("Es necesario revisar la toma de vacío, movs. de ajustes o validar unidades para el ítem: \n '" +
                        rpi.getXtaItem() + " (" + rpi.getXtaItemCode() + ")' del almacén: '" +
                        rpi.getXtaWarehouse() + " (" + rpi.getXtaWarehouseCode() + ")'.");
                break;
            }
        }

        if (validation.isValid()) {
            if (moDecXtaProductionEstimate.getValue().doubleValue() != moDecXtaProductionDelivery.getValue().doubleValue()) {
                if (miClient.showMsgBoxConfirm("La cantidad estimada producida es diferente a la cantidad entregada.\n"
                    + SGuiConsts.MSG_CNF_CONT) != JOptionPane.YES_OPTION ) {
                    validation.setComponent(moDateStockDay.getComponent());
                    validation.setMessage("La cantidad estimada producida es diferente a la cantidad entregada.");
                }
            }
        }

        if (validation.isValid()) {
            if (miClient.showMsgBoxConfirm("Se cerrará en automático el día.\n"
                + SGuiConsts.MSG_CNF_CONT) != JOptionPane.YES_OPTION) {

                    moRegistry.setClosed(true);
                    validation.setComponent(moDateStockDay.getComponent());
                    validation.setMessage("No se cerrará el día");
            }
            else {
                moRegistry.setClosed(false);
            }
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent evt) {
        if (evt.getSource() instanceof JButton) {
            JButton button = (JButton) evt.getSource();

            if (button == jbLockUnit) {
                actionSelectUnit();
            }
            else if (button == jbEstimateMfg) {
                actionEstimateMfg();
            }
            else if (button == jbMoveInAdjustment && jbMoveInAdjustment.isEnabled()) {
                actionInventoryMove(SModSysConsts.SS_IOG_TP_IN_EXT_ADJ);
            }
            else if (button == jbMoveOutAdjustment && jbMoveOutAdjustment.isEnabled()) {
                actionInventoryMove(SModSysConsts.SS_IOG_TP_OUT_EXT_ADJ);
            }
            else if (button == jbMoveOutTransfer && jbMoveOutTransfer.isEnabled()) {
                actionInventoryMove(SModSysConsts.SS_IOG_TP_OUT_INT_TRA);
            }
            /*else if (button == jbProductionDeliveryMoves) {
                actionMovesVersion();
            }*/
            else if (button == jbReturnStepXXX) {
                actionReturnStep();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                JComboBox comboBox = (JComboBox) e.getSource();
                if (comboBox == moKeyUnit) {
                    itemStateChangedUnit();
                }
            }
        }
    }

    @Override
    public void actionCancel() {
        miClient.getSession().notifySuscriptors(SModConsts.S_IOG);
        miClient.getSession().notifySuscriptors(SModConsts.S_STK);
        super.actionCancel();
    }
}
