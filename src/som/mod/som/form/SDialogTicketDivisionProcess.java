/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Objects;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiFields;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;
import som.mod.SModConsts;
import som.mod.som.db.SDbTicket;
import som.mod.som.db.SDbTicketDivisionProcess;
import som.mod.som.db.SRowTicketDivisionProcess;
import som.mod.som.db.SSomConsts;
import som.mod.som.db.SSomUtils;

/**
 *
 * @author Isabel Servín
 */
public class SDialogTicketDivisionProcess extends SBeanFormDialog implements ActionListener {
    
    private SDbTicketDivisionProcess moRegistry;
    private SDbTicket moOrigTicket;
    
    private ArrayList<SDbTicket> maNewTickets;
    private ArrayList<SRowTicketDivisionProcess> maTicDivisionProcRows;
    ArrayList<String> maNewTicketsSubnum;
    
    private SGridPaneForm moGridNewTickets;
    private SGuiFields moFieldsEty;

    /**
     * Creates new form SDialogTicketDivision
     * @param client
     * @param title
     */
    public SDialogTicketDivisionProcess(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.SX_TIC_DIV_PROC, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpRegistry = new javax.swing.JPanel();
        jpTicData = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jpTicRow1 = new javax.swing.JPanel();
        jlTicket = new javax.swing.JLabel();
        moTextTicket = new sa.lib.gui.bean.SBeanFieldText();
        jLabel1 = new javax.swing.JLabel();
        jpTicRow2 = new javax.swing.JPanel();
        jlProdTic = new javax.swing.JLabel();
        moKeyProdTic = new sa.lib.gui.bean.SBeanFieldKey();
        jpTicRow3 = new javax.swing.JPanel();
        jlTicDate = new javax.swing.JLabel();
        moDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel4 = new javax.swing.JPanel();
        jpTicRow4 = new javax.swing.JPanel();
        jlDriver = new javax.swing.JLabel();
        moTextDriver = new sa.lib.gui.bean.SBeanFieldText();
        jpTicRow5 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moKeyItem = new sa.lib.gui.bean.SBeanFieldKey();
        jpTicRow6 = new javax.swing.JPanel();
        jlPlates = new javax.swing.JLabel();
        moTextPlates = new sa.lib.gui.bean.SBeanFieldText();
        jPanel1 = new javax.swing.JPanel();
        jpTicData3 = new javax.swing.JPanel();
        jlTypeWei = new javax.swing.JLabel();
        jlWeightSource = new javax.swing.JLabel();
        jlSpace8 = new javax.swing.JLabel();
        jlWeightDestinyArrival = new javax.swing.JLabel();
        jlSpace7 = new javax.swing.JLabel();
        jlWeightDestinyDeparture = new javax.swing.JLabel();
        jlSpace3 = new javax.swing.JLabel();
        jlWeightTicNet = new javax.swing.JLabel();
        jpTicData2 = new javax.swing.JPanel();
        jlTicWei = new javax.swing.JLabel();
        moDecWeightSource = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWeightSourceUnit = new javax.swing.JLabel();
        moDecWeightDestinyArrival = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWeightDestinyArrivalUnit = new javax.swing.JLabel();
        moDecWeightDestinyDeparture = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWeightDestinyDepartureUnit = new javax.swing.JLabel();
        moDecWeightTicNet = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWeightTicNetUnit = new javax.swing.JLabel();
        jpTicDiv = new javax.swing.JPanel();
        jpDivData = new javax.swing.JPanel();
        jpTicRow8 = new javax.swing.JPanel();
        jlProd = new javax.swing.JLabel();
        moKeyProd = new sa.lib.gui.bean.SBeanFieldKey();
        jtbSeasonFilter = new javax.swing.JToggleButton();
        jlFilterNote = new javax.swing.JLabel();
        jpEtyRow3 = new javax.swing.JPanel();
        jlWeightNet = new javax.swing.JLabel();
        moDecWeightNet = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWeightNetUnit = new javax.swing.JLabel();
        jpEtyRow2 = new javax.swing.JPanel();
        jbAdd = new javax.swing.JButton();
        jbClean = new javax.swing.JButton();
        jbDelete = new javax.swing.JButton();
        jpGrid = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jpTicData4 = new javax.swing.JPanel();
        jlTypeWeiSum = new javax.swing.JLabel();
        jlWeightSourceSum = new javax.swing.JLabel();
        jlSpace9 = new javax.swing.JLabel();
        jlWeightDestinyArrivalSum = new javax.swing.JLabel();
        jlSpace10 = new javax.swing.JLabel();
        jlWeightDestinyDepartureSum = new javax.swing.JLabel();
        jlSpace11 = new javax.swing.JLabel();
        jlWeightTicNetSum = new javax.swing.JLabel();
        jpTicData5 = new javax.swing.JPanel();
        jlSumWei = new javax.swing.JLabel();
        moDecWeightSourceSum = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWeightSourceSumUnit = new javax.swing.JLabel();
        jlSpace12 = new javax.swing.JLabel();
        moDecWeightDestinyArrivalSum = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWeightDestinyArrivalSumUnit = new javax.swing.JLabel();
        jlSpace13 = new javax.swing.JLabel();
        moDecWeightDestinyDepartureSum = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWeightDestinyDepartureSumUnit = new javax.swing.JLabel();
        jlSpace14 = new javax.swing.JLabel();
        moDecWeightTicNetSum = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWeightTicNetSumUnit = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jpRegistry.setLayout(new java.awt.BorderLayout());

        jpTicData.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del boleto original:"));
        jpTicData.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jpTicRow1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTicket.setText("Boleto:");
        jlTicket.setPreferredSize(new java.awt.Dimension(100, 23));
        jpTicRow1.add(jlTicket);

        moTextTicket.setEditable(false);
        moTextTicket.setEnabled(false);
        jpTicRow1.add(moTextTicket);

        jLabel1.setPreferredSize(new java.awt.Dimension(205, 23));
        jpTicRow1.add(jLabel1);

        jPanel3.add(jpTicRow1);

        jpTicRow2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProdTic.setText("Proveedor:");
        jlProdTic.setPreferredSize(new java.awt.Dimension(100, 23));
        jpTicRow2.add(jlProdTic);

        moKeyProdTic.setEnabled(false);
        moKeyProdTic.setPreferredSize(new java.awt.Dimension(275, 23));
        jpTicRow2.add(moKeyProdTic);

        jPanel3.add(jpTicRow2);

        jpTicRow3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTicDate.setText("Fecha boleto:");
        jlTicDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jpTicRow3.add(jlTicDate);

        moDate.setEnabled(false);
        jpTicRow3.add(moDate);

        jPanel3.add(jpTicRow3);

        jpTicData.add(jPanel3, java.awt.BorderLayout.WEST);

        jPanel4.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jpTicRow4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDriver.setText("Chofer:");
        jlDriver.setPreferredSize(new java.awt.Dimension(100, 23));
        jpTicRow4.add(jlDriver);

        moTextDriver.setEnabled(false);
        moTextDriver.setPreferredSize(new java.awt.Dimension(200, 23));
        jpTicRow4.add(moTextDriver);

        jPanel4.add(jpTicRow4);

        jpTicRow5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Ítem:");
        jlItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jpTicRow5.add(jlItem);

        moKeyItem.setEnabled(false);
        moKeyItem.setPreferredSize(new java.awt.Dimension(275, 23));
        jpTicRow5.add(moKeyItem);

        jPanel4.add(jpTicRow5);

        jpTicRow6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPlates.setText("Placas:");
        jlPlates.setPreferredSize(new java.awt.Dimension(100, 23));
        jpTicRow6.add(jlPlates);

        moTextPlates.setEnabled(false);
        moTextPlates.setPreferredSize(new java.awt.Dimension(200, 23));
        jpTicRow6.add(moTextPlates);

        jPanel4.add(jpTicRow6);

        jpTicData.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridLayout(2, 0, 0, 5));

        jpTicData3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTypeWei.setText("Tipos peso:");
        jlTypeWei.setPreferredSize(new java.awt.Dimension(100, 23));
        jpTicData3.add(jlTypeWei);

        jlWeightSource.setText("Peso origen:");
        jlWeightSource.setPreferredSize(new java.awt.Dimension(100, 23));
        jpTicData3.add(jlWeightSource);

        jlSpace8.setPreferredSize(new java.awt.Dimension(50, 23));
        jpTicData3.add(jlSpace8);

        jlWeightDestinyArrival.setText("Peso entrada:");
        jlWeightDestinyArrival.setPreferredSize(new java.awt.Dimension(100, 23));
        jpTicData3.add(jlWeightDestinyArrival);

        jlSpace7.setPreferredSize(new java.awt.Dimension(50, 23));
        jpTicData3.add(jlSpace7);

        jlWeightDestinyDeparture.setText("Peso salida:");
        jlWeightDestinyDeparture.setPreferredSize(new java.awt.Dimension(100, 23));
        jpTicData3.add(jlWeightDestinyDeparture);

        jlSpace3.setPreferredSize(new java.awt.Dimension(50, 23));
        jpTicData3.add(jlSpace3);

        jlWeightTicNet.setText("Peso neto:");
        jlWeightTicNet.setPreferredSize(new java.awt.Dimension(100, 23));
        jpTicData3.add(jlWeightTicNet);

        jPanel1.add(jpTicData3);

        jpTicData2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTicWei.setText("Pesos boleto:");
        jlTicWei.setPreferredSize(new java.awt.Dimension(100, 23));
        jpTicData2.add(jlTicWei);

        moDecWeightSource.setEditable(false);
        moDecWeightSource.setEnabled(false);
        jpTicData2.add(moDecWeightSource);

        jlWeightSourceUnit.setText("UNIT");
        jlWeightSourceUnit.setPreferredSize(new java.awt.Dimension(50, 23));
        jpTicData2.add(jlWeightSourceUnit);

        moDecWeightDestinyArrival.setEditable(false);
        moDecWeightDestinyArrival.setEnabled(false);
        jpTicData2.add(moDecWeightDestinyArrival);

        jlWeightDestinyArrivalUnit.setText("UNIT");
        jlWeightDestinyArrivalUnit.setPreferredSize(new java.awt.Dimension(50, 23));
        jpTicData2.add(jlWeightDestinyArrivalUnit);

        moDecWeightDestinyDeparture.setEditable(false);
        moDecWeightDestinyDeparture.setEnabled(false);
        jpTicData2.add(moDecWeightDestinyDeparture);

        jlWeightDestinyDepartureUnit.setText("UNIT");
        jlWeightDestinyDepartureUnit.setPreferredSize(new java.awt.Dimension(50, 23));
        jpTicData2.add(jlWeightDestinyDepartureUnit);

        moDecWeightTicNet.setEditable(false);
        moDecWeightTicNet.setEnabled(false);
        jpTicData2.add(moDecWeightTicNet);

        jlWeightTicNetUnit.setText("UNIT");
        jlWeightTicNetUnit.setPreferredSize(new java.awt.Dimension(50, 23));
        jpTicData2.add(jlWeightTicNetUnit);

        jPanel1.add(jpTicData2);

        jpTicData.add(jPanel1, java.awt.BorderLayout.SOUTH);

        jpRegistry.add(jpTicData, java.awt.BorderLayout.NORTH);

        jpTicDiv.setBorder(javax.swing.BorderFactory.createTitledBorder("Boletos divididos:"));
        jpTicDiv.setLayout(new java.awt.BorderLayout());

        jpDivData.setLayout(new java.awt.GridLayout(3, 0, 0, 5));

        jpTicRow8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProd.setText("Proveedor:");
        jlProd.setPreferredSize(new java.awt.Dimension(100, 23));
        jpTicRow8.add(jlProd);

        moKeyProd.setEditable(true);
        moKeyProd.setMaximumRowCount(15);
        moKeyProd.setPreferredSize(new java.awt.Dimension(400, 23));
        jpTicRow8.add(moKeyProd);

        jtbSeasonFilter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/som/gui/img/icon_std_filter_gre.gif"))); // NOI18N
        jtbSeasonFilter.setToolTipText("Filtrar proveedores por temporada");
        jtbSeasonFilter.setPreferredSize(new java.awt.Dimension(23, 23));
        jtbSeasonFilter.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/som/gui/img/icon_std_filter.gif"))); // NOI18N
        jpTicRow8.add(jtbSeasonFilter);

        jlFilterNote.setForeground(java.awt.SystemColor.textInactiveText);
        jlFilterNote.setText("(Proveedores mostrados: todos)");
        jlFilterNote.setMinimumSize(new java.awt.Dimension(200, 23));
        jlFilterNote.setPreferredSize(new java.awt.Dimension(300, 23));
        jpTicRow8.add(jlFilterNote);

        jpDivData.add(jpTicRow8);

        jpEtyRow3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeightNet.setText("Peso neto:");
        jlWeightNet.setPreferredSize(new java.awt.Dimension(100, 23));
        jpEtyRow3.add(jlWeightNet);
        jpEtyRow3.add(moDecWeightNet);

        jlWeightNetUnit.setText("UNIT");
        jlWeightNetUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jpEtyRow3.add(jlWeightNetUnit);

        jpDivData.add(jpEtyRow3);

        jpEtyRow2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbAdd.setText("Agregar");
        jbAdd.setPreferredSize(new java.awt.Dimension(100, 23));
        jpEtyRow2.add(jbAdd);

        jbClean.setText("Limpiar");
        jbClean.setPreferredSize(new java.awt.Dimension(100, 23));
        jpEtyRow2.add(jbClean);

        jbDelete.setText("Eliminar");
        jbDelete.setPreferredSize(new java.awt.Dimension(100, 23));
        jpEtyRow2.add(jbDelete);

        jpDivData.add(jpEtyRow2);

        jpTicDiv.add(jpDivData, java.awt.BorderLayout.NORTH);

        jpGrid.setLayout(new java.awt.BorderLayout());
        jpTicDiv.add(jpGrid, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.GridLayout(2, 0, 0, 5));

        jpTicData4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTypeWeiSum.setText("Tipos peso:");
        jlTypeWeiSum.setPreferredSize(new java.awt.Dimension(100, 23));
        jpTicData4.add(jlTypeWeiSum);

        jlWeightSourceSum.setText("Peso origen:");
        jlWeightSourceSum.setPreferredSize(new java.awt.Dimension(80, 23));
        jpTicData4.add(jlWeightSourceSum);

        jlSpace9.setPreferredSize(new java.awt.Dimension(75, 23));
        jpTicData4.add(jlSpace9);

        jlWeightDestinyArrivalSum.setText("Peso entrada:");
        jlWeightDestinyArrivalSum.setPreferredSize(new java.awt.Dimension(80, 23));
        jpTicData4.add(jlWeightDestinyArrivalSum);

        jlSpace10.setPreferredSize(new java.awt.Dimension(75, 23));
        jpTicData4.add(jlSpace10);

        jlWeightDestinyDepartureSum.setText("Peso salida:");
        jlWeightDestinyDepartureSum.setPreferredSize(new java.awt.Dimension(80, 23));
        jpTicData4.add(jlWeightDestinyDepartureSum);

        jlSpace11.setPreferredSize(new java.awt.Dimension(75, 23));
        jpTicData4.add(jlSpace11);

        jlWeightTicNetSum.setText("Peso neto:");
        jlWeightTicNetSum.setPreferredSize(new java.awt.Dimension(80, 23));
        jpTicData4.add(jlWeightTicNetSum);

        jPanel2.add(jpTicData4);

        jpTicData5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSumWei.setText("Suma pesos:");
        jlSumWei.setPreferredSize(new java.awt.Dimension(100, 23));
        jpTicData5.add(jlSumWei);

        moDecWeightSourceSum.setEditable(false);
        moDecWeightSourceSum.setEnabled(false);
        jpTicData5.add(moDecWeightSourceSum);

        jlWeightSourceSumUnit.setText("UNIT");
        jlWeightSourceSumUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jpTicData5.add(jlWeightSourceSumUnit);

        jlSpace12.setPreferredSize(new java.awt.Dimension(15, 23));
        jpTicData5.add(jlSpace12);

        moDecWeightDestinyArrivalSum.setEditable(false);
        moDecWeightDestinyArrivalSum.setEnabled(false);
        jpTicData5.add(moDecWeightDestinyArrivalSum);

        jlWeightDestinyArrivalSumUnit.setText("UNIT");
        jlWeightDestinyArrivalSumUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jpTicData5.add(jlWeightDestinyArrivalSumUnit);

        jlSpace13.setPreferredSize(new java.awt.Dimension(15, 23));
        jpTicData5.add(jlSpace13);

        moDecWeightDestinyDepartureSum.setEditable(false);
        moDecWeightDestinyDepartureSum.setEnabled(false);
        jpTicData5.add(moDecWeightDestinyDepartureSum);

        jlWeightDestinyDepartureSumUnit.setText("UNIT");
        jlWeightDestinyDepartureSumUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jpTicData5.add(jlWeightDestinyDepartureSumUnit);

        jlSpace14.setPreferredSize(new java.awt.Dimension(15, 23));
        jpTicData5.add(jlSpace14);

        moDecWeightTicNetSum.setEditable(false);
        moDecWeightTicNetSum.setEnabled(false);
        jpTicData5.add(moDecWeightTicNetSum);

        jlWeightTicNetSumUnit.setText("UNIT");
        jlWeightTicNetSumUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jpTicData5.add(jlWeightTicNetSumUnit);

        jPanel2.add(jpTicData5);

        jpTicDiv.add(jPanel2, java.awt.BorderLayout.PAGE_END);

        jpRegistry.add(jpTicDiv, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpRegistry, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        actionCancel();
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton jbAdd;
    private javax.swing.JButton jbClean;
    private javax.swing.JButton jbDelete;
    private javax.swing.JLabel jlDriver;
    private javax.swing.JLabel jlFilterNote;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlPlates;
    private javax.swing.JLabel jlProd;
    private javax.swing.JLabel jlProdTic;
    private javax.swing.JLabel jlSpace10;
    private javax.swing.JLabel jlSpace11;
    private javax.swing.JLabel jlSpace12;
    private javax.swing.JLabel jlSpace13;
    private javax.swing.JLabel jlSpace14;
    private javax.swing.JLabel jlSpace3;
    private javax.swing.JLabel jlSpace7;
    private javax.swing.JLabel jlSpace8;
    private javax.swing.JLabel jlSpace9;
    private javax.swing.JLabel jlSumWei;
    private javax.swing.JLabel jlTicDate;
    private javax.swing.JLabel jlTicWei;
    private javax.swing.JLabel jlTicket;
    private javax.swing.JLabel jlTypeWei;
    private javax.swing.JLabel jlTypeWeiSum;
    private javax.swing.JLabel jlWeightDestinyArrival;
    private javax.swing.JLabel jlWeightDestinyArrivalSum;
    private javax.swing.JLabel jlWeightDestinyArrivalSumUnit;
    private javax.swing.JLabel jlWeightDestinyArrivalUnit;
    private javax.swing.JLabel jlWeightDestinyDeparture;
    private javax.swing.JLabel jlWeightDestinyDepartureSum;
    private javax.swing.JLabel jlWeightDestinyDepartureSumUnit;
    private javax.swing.JLabel jlWeightDestinyDepartureUnit;
    private javax.swing.JLabel jlWeightNet;
    private javax.swing.JLabel jlWeightNetUnit;
    private javax.swing.JLabel jlWeightSource;
    private javax.swing.JLabel jlWeightSourceSum;
    private javax.swing.JLabel jlWeightSourceSumUnit;
    private javax.swing.JLabel jlWeightSourceUnit;
    private javax.swing.JLabel jlWeightTicNet;
    private javax.swing.JLabel jlWeightTicNetSum;
    private javax.swing.JLabel jlWeightTicNetSumUnit;
    private javax.swing.JLabel jlWeightTicNetUnit;
    private javax.swing.JPanel jpDivData;
    private javax.swing.JPanel jpEtyRow2;
    private javax.swing.JPanel jpEtyRow3;
    private javax.swing.JPanel jpGrid;
    private javax.swing.JPanel jpRegistry;
    private javax.swing.JPanel jpTicData;
    private javax.swing.JPanel jpTicData2;
    private javax.swing.JPanel jpTicData3;
    private javax.swing.JPanel jpTicData4;
    private javax.swing.JPanel jpTicData5;
    private javax.swing.JPanel jpTicDiv;
    private javax.swing.JPanel jpTicRow1;
    private javax.swing.JPanel jpTicRow2;
    private javax.swing.JPanel jpTicRow3;
    private javax.swing.JPanel jpTicRow4;
    private javax.swing.JPanel jpTicRow5;
    private javax.swing.JPanel jpTicRow6;
    private javax.swing.JPanel jpTicRow8;
    private javax.swing.JToggleButton jtbSeasonFilter;
    private sa.lib.gui.bean.SBeanFieldDate moDate;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightDestinyArrival;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightDestinyArrivalSum;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightDestinyDeparture;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightDestinyDepartureSum;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightNet;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightSource;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightSourceSum;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightTicNet;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightTicNetSum;
    private sa.lib.gui.bean.SBeanFieldKey moKeyItem;
    private sa.lib.gui.bean.SBeanFieldKey moKeyProd;
    private sa.lib.gui.bean.SBeanFieldKey moKeyProdTic;
    private sa.lib.gui.bean.SBeanFieldText moTextDriver;
    private sa.lib.gui.bean.SBeanFieldText moTextPlates;
    private sa.lib.gui.bean.SBeanFieldText moTextTicket;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 880, 550);
        
        moFieldsEty = new SGuiFields();
        
        moTextTicket.setTextSettings(SGuiUtils.getLabelName(jlTicket), 10, 1);
        moDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlTicDate), false);
        moKeyItem.setKeySettings(miClient, SGuiUtils.getLabelName(jlItem), false);
        moKeyProdTic.setKeySettings(miClient, SGuiUtils.getLabelName(jlProdTic), false);
        moTextDriver.setTextSettings(SGuiUtils.getLabelName(jlDriver), 150);
        moTextPlates.setTextSettings(SGuiUtils.getLabelName(jlPlates), 50);
        
        moDecWeightSource.setDecimalSettings(SGuiUtils.getLabelName(jlWeightSource), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecWeightDestinyArrival.setDecimalSettings(SGuiUtils.getLabelName(jlWeightDestinyArrival), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecWeightDestinyDeparture.setDecimalSettings(SGuiUtils.getLabelName(jlWeightDestinyDeparture), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecWeightTicNet.setDecimalSettings(SGuiUtils.getLabelName(jlWeightTicNet), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        
        moDecWeightSourceSum.setDecimalSettings(SGuiUtils.getLabelName(jlWeightSourceSum), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecWeightDestinyArrivalSum.setDecimalSettings(SGuiUtils.getLabelName(jlWeightDestinyArrivalSum), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecWeightDestinyDepartureSum.setDecimalSettings(SGuiUtils.getLabelName(jlWeightDestinyDepartureSum), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecWeightTicNetSum.setDecimalSettings(SGuiUtils.getLabelName(jlWeightTicNetSum), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        
        moKeyProd.setKeySettings(miClient, SGuiUtils.getLabelName(jlProd), true);
        moDecWeightNet.setDecimalSettings(SGuiUtils.getLabelName(jlWeightNet), SGuiConsts.GUI_TYPE_DEC_QTY, true);
    
        moFields.addField(moTextTicket);
        moFields.addField(moDate);
        moFields.addField(moKeyItem);
        moFields.addField(moKeyProdTic);
        moFields.addField(moTextDriver);
        moFields.addField(moTextPlates);
        moFields.addField(moDecWeightSource);
        moFields.addField(moDecWeightDestinyArrival);
        moFields.addField(moDecWeightDestinyDeparture);
        moFields.addField(moDecWeightTicNet);
        moFields.addField(moDecWeightSourceSum);
        moFields.addField(moDecWeightDestinyArrivalSum);
        moFields.addField(moDecWeightDestinyDepartureSum);
        moFields.addField(moDecWeightTicNetSum);
        
        moFieldsEty.addField(moKeyProd);
        moFieldsEty.addField(moDecWeightNet);
        moDecWeightNet.setNextButton(jbAdd);
        
        moGridNewTickets = new SGridPaneForm(miClient, SModConsts.S_TIC_DIV, SLibConsts.UNDEFINED, "Nuevos tickets") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public void createGridColumns() {
                int col = 0;
                SGridColumnForm[] columns = new SGridColumnForm[6];
                
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Folio", 75);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_BPR_L, "Proveedor");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Peso origen");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Peso entrada");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Peso salida");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Peso neto");
                
                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };
        
        moGridNewTickets.setForm(null);
        moGridNewTickets.setPaneFormOwner(null);
        mvFormGrids.add(moGridNewTickets);
        jpGrid.add(moGridNewTickets, BorderLayout.CENTER);
    }
    
    private SGuiValidation validateEntry() {
        SGuiValidation validation = moFieldsEty.validateFields();
        
        if (validation.isValid()) {
            for (SDbTicket tic : maNewTickets) {
                if (tic.getFkProducerId() == moKeyProd.getValue()[0]) {
                    validation.setMessage("No se puede agregar más de una vez al mismo proveedor.");
                    validation.setComponent(moKeyProd);
                }
            }
        }
        
        if (validation.isValid()) {
            if (!Objects.equals(moDecWeightTicNet.getValue(), moDecWeightTicNetSum.getValue())) {
                double weiDiference = moDecWeightNet.getValue() + moDecWeightTicNetSum.getValue() - moDecWeightTicNet.getValue();
                if (weiDiference > 0) {
                    if (miClient.showMsgBoxConfirm("Al agregar el peso neto indicado (" + moDecWeightNet.getValue() + ") se sobrepasará al peso neto del boleto original (" + SLibUtils.DecimalFormatValue2D.format(moDecWeightTicNet.getValue()) + " " + SSomConsts.KG + ") "
                            + "por " + SLibUtils.DecimalFormatValue2D.format(weiDiference) + " " + SSomConsts.KG + ".\n¿Desea que el sistema haga el ajuste para igualar la suma neta de los pesos al peso neto del boleto original?") != JOptionPane.OK_OPTION) {
                        validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + SGuiUtils.getLabelName(jlWeightNet));
                        validation.setComponent(moDecWeightNet);
                    }
                    else {
                        moDecWeightNet.setValue(moDecWeightNet.getValue() - weiDiference);
                    }
                }
            }
            else {
                validation.setMessage("No se puede agregar debido a que el peso neto original ya coincide con la sumatoria de los pesos netos (" + SLibUtils.DecimalFormatValue2D.format(moDecWeightTicNet.getValue()) + " " + SSomConsts.KG + ").");
                validation.setComponent(moDecWeightNet);
            }
        }
        
        return validation;
    }
    
    private void populateGridNewTickets() {
        try {
            maTicDivisionProcRows = new ArrayList<>();
            for (SDbTicket tic : maNewTickets) {
                SRowTicketDivisionProcess row = new SRowTicketDivisionProcess();
                row.setTicNum(tic.getNumber());
                row.setProd(tic.getXtaProducer());
                row.setSource(tic.getWeightSource());
                row.setArrival(tic.getWeightDestinyArrival());
                row.setDeparture(tic.getWeightDestinyDeparture());
                row.setNet(tic.getWeightDestinyNet_r());
                maTicDivisionProcRows.add(row);
            }
            
            Vector<SGridRow> vRows = new Vector<>();
            if (maTicDivisionProcRows.size() > 0) {
                vRows.addAll(maTicDivisionProcRows);
            }
            
            moGridNewTickets.populateGrid(vRows);
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void updateWeights() {
        double weiSourceSum = 0;
        double weiArrivalSum = 0;
        double weiDepartureSum = 0;
        double weiNetSum = 0;
        for (SRowTicketDivisionProcess row : maTicDivisionProcRows) {
            weiSourceSum += row.getSource();
            weiArrivalSum += row.getArrival();
            weiDepartureSum += row.getDeparture();
            weiNetSum += row.getNet();
        }
        moDecWeightSourceSum.setValue(weiSourceSum);
        moDecWeightDestinyArrivalSum.setValue(weiArrivalSum);
        moDecWeightDestinyDepartureSum.setValue(weiDepartureSum);
        moDecWeightTicNetSum.setValue(weiNetSum);
    }
    
    private void selectProducer() {
        boolean isOrigTicketProducerAdded = false;
        for (SDbTicket tic : maNewTickets) {
            if (!isOrigTicketProducerAdded) {
                isOrigTicketProducerAdded = tic.getFkProducerId() == moOrigTicket.getFkProducerId();
            }
        }
        
        if (isOrigTicketProducerAdded) {
            moKeyProd.setValue(new int[] { 0 });
        }
        else {
            moKeyProd.setValue(new int[] { moOrigTicket.getFkProducerId() });
        }
    }
    
    private int getNewTicketSubNum(int subNum) {
        if (maNewTicketsSubnum.contains(subNum + "")) {
            if (subNum <= maNewTickets.size()) {
                subNum = getNewTicketSubNum(subNum + 1);
            }
        }
        return subNum;
    }
    
    private void actionAdd() {
        try {
            SGuiValidation validation = validateEntry();
            
            if (SGuiUtils.computeValidation(miClient, validation)) {
                SDbTicket tic = moOrigTicket.clone();
                
                double weiNet = moDecWeightNet.getValue();
                double percentage = weiNet/tic.getWeightDestinyNet_r();
                double weiSource = SLibUtils.round(tic.getWeightSource() * percentage, 4);
                double weiArrival = SLibUtils.round(tic.getWeightDestinyArrival() * percentage, 4);
                double weiDeparture = SLibUtils.round(tic.getWeightDestinyDeparture() * percentage, 4);
                String subNum = getNewTicketSubNum(1) + "";
                maNewTicketsSubnum.add(subNum);
                
                tic.setPkTicketId(0);
                tic.setNumber(tic.getNumber() + "-" + subNum);
                tic.setWeightSource(weiSource);
                tic.setWeightDestinyArrival(weiArrival);
                tic.setWeightDestinyDeparture(weiDeparture);
                tic.setWeightDestinyNet_r(weiNet);
                tic.setFkProducerId(moKeyProd.getValue()[0]);
                tic.setXtaProducer(moKeyProd.getComponent().getSelectedItem().toString());
                tic.setFkSeasonId_n(SLibConsts.UNDEFINED);
                tic.setFkRegionId_n(SLibConsts.UNDEFINED);
                tic.setFkSeasonId_n(SSomUtils.getProperSeasonId(miClient.getSession(), tic.getDate(), tic.getFkItemId(), tic.getFkProducerId()));
                if (tic.getFkSeasonId_n() != SLibConsts.UNDEFINED) {
                    tic.setFkRegionId_n(SSomUtils.getProperRegionId(miClient.getSession(), tic.getFkSeasonId_n(), tic.getFkItemId(), tic.getFkProducerId()));
                }
                tic.getChildTicketNotes().clear();
                tic.getChildLaboratories().clear();
                tic.setRegistryNew(true);
                maNewTickets.add(tic);
                
                populateGridNewTickets();
                updateWeights();
                actionCleanEtyControls();
                moKeyProd.requestFocus();
            }
        }
        catch(Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void actionCleanEtyControls() {
        selectProducer();
        double restWeiNet = moOrigTicket.getWeightDestinyNet_r();
        for (SRowTicketDivisionProcess row : maTicDivisionProcRows) {
            restWeiNet -= row.getNet();
        }
        moDecWeightNet.setValue(restWeiNet);
        moKeyProd.requestFocus();
    }
    
    private void actionDelete() {
        try {
            maNewTicketsSubnum.remove(maNewTickets.remove(moGridNewTickets.getTable().getSelectedRow()).getNumber().split("-")[1]);
            populateGridNewTickets();
            updateWeights();
            actionCleanEtyControls();
            moKeyProd.requestFocus();
        } 
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void actionSeasonFilter() {
        SGuiParams params = new SGuiParams();
        params.getParamsMap().put(SModConsts.SU_ITEM, moOrigTicket.getFkItemId());
        params.getParamsMap().put(SModConsts.SU_SEAS, moOrigTicket.getDate());
        if (jtbSeasonFilter.isSelected()) {
            jlFilterNote.setText("(Proveedores mostrados: temporada " + SLibUtils.DateFormatDateYear.format(moOrigTicket.getDate()) + ")");
            miClient.getSession().populateCatalogue(moKeyProd, SModConsts.SU_PROD, SModConsts.SU_SEAS_PROD, params);
        }
        else {
            jlFilterNote.setText("(Proveedores mostrados: todos)");
            miClient.getSession().populateCatalogue(moKeyProd, SModConsts.SU_PROD, SLibConsts.UNDEFINED, null);
        }
    }
    
    @Override
    public void addAllListeners() {
        jbAdd.addActionListener(this);
        jbClean.addActionListener(this);
        jbDelete.addActionListener(this);
        jtbSeasonFilter.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbAdd.removeActionListener(this);
        jbClean.removeActionListener(this);
        jbDelete.removeActionListener(this);
        jtbSeasonFilter.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyItem, SModConsts.SU_ITEM, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyProdTic, SModConsts.SU_PROD, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbTicketDivisionProcess) registry;
        
        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;
        
        moOrigTicket = moRegistry.getOrigTicket();
        
        removeAllListeners();
        reloadCatalogues();
        
        jtbSeasonFilter.setSelected(false);

        moTextTicket.setValue(moOrigTicket.getNumber());
        moDate.setValue(moOrigTicket.getDate());
        moKeyItem.setValue(new int[] { moOrigTicket.getFkItemId() });
        moKeyProdTic.setValue(new int[] { moOrigTicket.getFkProducerId() });
        moTextDriver.setValue(moOrigTicket.getDriver());
        moTextPlates.setValue(moOrigTicket.getPlate());

        moDecWeightSource.setValue(moOrigTicket.getWeightSource());
        moDecWeightDestinyArrival.setValue(moOrigTicket.getWeightDestinyArrival());
        moDecWeightDestinyDeparture.setValue(moOrigTicket.getWeightDestinyDeparture());
        moDecWeightTicNet.setValue(moOrigTicket.getWeightDestinyNet_r());
        
        jlWeightSourceUnit.setText(SSomConsts.KG);
        jlWeightDestinyArrivalUnit.setText(SSomConsts.KG);
        jlWeightDestinyDepartureUnit.setText(SSomConsts.KG);
        jlWeightTicNetUnit.setText(SSomConsts.KG);
        jlWeightSourceSumUnit.setText(SSomConsts.KG);
        jlWeightDestinyArrivalSumUnit.setText(SSomConsts.KG);
        jlWeightDestinyDepartureSumUnit.setText(SSomConsts.KG);
        jlWeightTicNetSumUnit.setText(SSomConsts.KG);
        jlWeightNetUnit.setText(SSomConsts.KG);

        maNewTickets = new ArrayList<>();
        maTicDivisionProcRows = new ArrayList<>();
        maNewTicketsSubnum = new ArrayList<>();

        populateGridNewTickets();
        addAllListeners();
        updateWeights();
        actionCleanEtyControls();
        actionSeasonFilter();
        moKeyProd.setValue(new int[] { moOrigTicket.getFkProducerId() });
        moKeyProd.requestFocus();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbTicketDivisionProcess registry = moRegistry.clone();
        
        if (registry.isRegistryNew()) {}
        
        registry.getNewTickets().clear();
        for (SDbTicket tic : maNewTickets) {
            registry.getNewTickets().add(tic);
        }
        
        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid()) {
            if (!Objects.equals(moDecWeightTicNet.getValue(), moDecWeightTicNetSum.getValue())) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ_EQUAL + "'" + SGuiUtils.getLabelName(jlWeightTicNetSum) + "' de la suma de pesos (" + SLibUtils.DecimalFormatValue2D.format(moDecWeightTicNetSum.getValue()) + " " + SSomConsts.KG + ") y '" 
                        + SGuiUtils.getLabelName(jlWeightTicNet) + "' del boleto original (" + SLibUtils.DecimalFormatValue2D.format(moDecWeightTicNet.getValue()) + " " + SSomConsts.KG + ").");
                validation.setComponent(moKeyProd);
            }
        }
        
        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbAdd) {
                actionAdd();
            }
            else if (button == jbClean) {
                actionCleanEtyControls();
            }
            else if (button == jbDelete) {
                actionDelete();
            }
        }
        else if (e.getSource() instanceof JToggleButton) {
            JToggleButton button = (JToggleButton) e.getSource();
            
            if (button == jtbSeasonFilter) {
                actionSeasonFilter();
            }
        }
    }
}
