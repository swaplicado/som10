/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package som.mod.som.form;

import java.awt.BorderLayout;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.util.Date;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JDialog;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbConsts;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiUtils;
import som.mod.SModConsts;
import som.mod.som.db.SRowEvent;

/**
 *
 * @author Edwin Carmona
 * 
 */
public class SDialogEvents extends JDialog implements ActionListener {

    private SGuiClient miClient;
    private SGridPaneForm moGridEvents;

    private boolean mbFirstTime;
    private Date mtParamDate;

    /** Creates new form SDialogStockCardex */
    public SDialogEvents(SGuiClient client) {
        super(client.getFrame(), true);
        miClient = client;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpParams = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moTextDate = new sa.lib.gui.bean.SBeanFieldText();
        jpEvents = new javax.swing.JPanel();
        jpControls = new javax.swing.JPanel();
        jbClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Eventos de molienda");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpParams.setLayout(new java.awt.BorderLayout(5, 0));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Fecha:"));
        jPanel4.setLayout(new java.awt.GridLayout(1, 1, 0, 5));

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("A partir de:");
        jlDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel8.add(jlDate);

        moTextDate.setEditable(false);
        moTextDate.setText("sBeanFieldText3");
        jPanel8.add(moTextDate);

        jPanel4.add(jPanel8);

        jpParams.add(jPanel4, java.awt.BorderLayout.WEST);
        jPanel4.getAccessibleContext().setAccessibleName("Fecha");

        getContentPane().add(jpParams, java.awt.BorderLayout.NORTH);

        jpEvents.setBorder(javax.swing.BorderFactory.createTitledBorder("Eventos en molienda:"));
        jpEvents.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jpEvents, java.awt.BorderLayout.CENTER);

        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbClose.setText("Cerrar");
        jbClose.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbClose);

        getContentPane().add(jpControls, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(576, 339));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        SGuiUtils.setWindowBounds(this, 960, 600);

        moTextDate.setTextSettings(SGuiUtils.getLabelName(jlDate.getText()), 50);

        moGridEvents = new SGridPaneForm(miClient, SModConsts.SU_GRINDING_EVENT, SLibConsts.UNDEFINED, "Eventos durante molienda") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                SGridColumnForm[] columns = new SGridColumnForm[7];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, "Fecha Inicial");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, "Fecha Final");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Evento");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, "Usr. creaci贸n");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, "Creaci贸n");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, "Usr. modificaci贸n");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, "Modificaci贸n");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        jpEvents.add(moGridEvents, BorderLayout.CENTER);

        jbClose.addActionListener(this);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jbClose.requestFocus();
        }
    }

    @SuppressWarnings("unchecked")
    private void showEvents() {
        Vector<SGridRow> rows = new Vector<>();
        String sql = "";

        try {
            sql = "SELECT "
                + "v.id_event AS " + SDbConsts.FIELD_ID + "1, "
                + "'' AS " + SDbConsts.FIELD_CODE + ", "
                + "'' AS " + SDbConsts.FIELD_NAME + ", "
                + "v.dt_start, "
                + "v.dt_end, "
                + "v.description,"
                + "v.b_del AS " + SDbConsts.FIELD_IS_DEL + ", "
                + "v.b_can_upd AS " + SDbConsts.FIELD_CAN_UPD + ", "
                + "v.b_can_dis AS " + SDbConsts.FIELD_CAN_DIS + ", "
                + "v.b_can_del AS " + SDbConsts.FIELD_CAN_DEL + ", "
                + "v.b_dis AS " + SDbConsts.FIELD_IS_DIS + ", "
                + "v.b_sys AS " + SDbConsts.FIELD_IS_SYS + ", "
                + "v.fk_usr_ins AS " + SDbConsts.FIELD_USER_INS_ID + ", "
                + "v.fk_usr_upd AS " + SDbConsts.FIELD_USER_UPD_ID + ", "
                + "v.ts_usr_ins AS " + SDbConsts.FIELD_USER_INS_TS + ", "
                + "v.ts_usr_upd AS " + SDbConsts.FIELD_USER_UPD_TS + ", "
                + "ui.name AS " + SDbConsts.FIELD_USER_INS_NAME + ", "
                + "uu.name AS " + SDbConsts.FIELD_USER_UPD_NAME + " "
                + "FROM " + SModConsts.TablesMap.get(SModConsts.SU_GRINDING_EVENT) + " AS v "
                + "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.CU_USR) + " AS ui ON "
                + "v.fk_usr_ins = ui.id_usr "
                + "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.CU_USR) + " AS uu ON "
                + "v.fk_usr_upd = uu.id_usr "
                + "WHERE v.dt_start >= '" + SLibUtils.DbmsDateFormatDate.format(mtParamDate) + "' "
                + "ORDER BY v.dt_start DESC, v.id_event ASC ";

            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);

            while (resultSet.next()) {
                SRowEvent row = new SRowEvent();
                row.setStartDate(resultSet.getTimestamp("dt_start"));
                row.setEndDate(resultSet.getTimestamp("dt_end"));
                row.setDescription(resultSet.getString("description"));
                row.setUserInsert(resultSet.getString(SDbConsts.FIELD_USER_INS_NAME));
                row.setDateUserInsert(resultSet.getTimestamp(SDbConsts.FIELD_USER_INS_TS));
                row.setUserUpdate(resultSet.getString(SDbConsts.FIELD_USER_UPD_NAME));
                row.setDateUserUpdate(resultSet.getTimestamp(SDbConsts.FIELD_USER_UPD_TS));

                rows.add(row);
            }

            moGridEvents.populateGrid(rows);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }

    }

    public void actionClose() {
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JButton jbClose;
    private javax.swing.JLabel jlDate;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpEvents;
    private javax.swing.JPanel jpParams;
    private sa.lib.gui.bean.SBeanFieldText moTextDate;
    // End of variables declaration//GEN-END:variables

    public void setFormParams(final Date dateCutOff) {
        mtParamDate = dateCutOff;
        moTextDate.setValue(SLibUtils.DbmsDateFormatDate.format(mtParamDate));

        showEvents();
    }

    public void formReset() {
        mbFirstTime = true;

        moTextDate.setValue("");
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbClose) {
                actionClose();
            }
        }
    }
}
