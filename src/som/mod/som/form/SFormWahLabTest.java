/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package som.mod.som.form;

import java.awt.BorderLayout;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JButton;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;
import som.mod.SModConsts;
import som.mod.cfg.db.SDbBranchWarehouse;
import som.mod.som.db.SDbItem;
import som.mod.som.db.SDbWahLabTest;

/**
 *
 * @author Isabel Servín
 * 
 */
public class SFormWahLabTest extends SBeanForm implements ActionListener {
    private SDbWahLabTest moRegistry;
    private SGridPaneForm moGridWah;
    private SGridPaneForm moGridItem;
    
    private ArrayList<SDbBranchWarehouse> maWarehouses;
    private ArrayList<SDbItem> maItems;
    
    private boolean mbFirstTime;

    /** Creates new form SFormWahLabTest
     * @param client
     * @param title */
    public SFormWahLabTest(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.S_WAH_LAB_TEST, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpGrids = new javax.swing.JPanel();
        jpWarehouse = new javax.swing.JPanel();
        jpItems = new javax.swing.JPanel();
        jpControls = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Almacenes e ítems");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpGrids.setLayout(new java.awt.GridLayout(1, 2));

        jpWarehouse.setBorder(javax.swing.BorderFactory.createTitledBorder("Almacenes:"));
        jpWarehouse.setLayout(new java.awt.BorderLayout());
        jpGrids.add(jpWarehouse);

        jpItems.setBorder(javax.swing.BorderFactory.createTitledBorder("Ítems:"));
        jpItems.setLayout(new java.awt.BorderLayout());
        jpGrids.add(jpItems);

        getContentPane().add(jpGrids, java.awt.BorderLayout.CENTER);

        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbOk);

        jbClose.setText("Cerrar");
        jbClose.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbClose);

        getContentPane().add(jpControls, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(816, 539));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        SGuiUtils.setWindowBounds(this, 800, 500);

        moGridWah = new SGridPaneForm(miClient, SModConsts.CU_WAH, SLibConsts.UNDEFINED, "Almacenes") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                SGridColumnForm[] columns = new SGridColumnForm[2];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Almacen");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_L, "Nombre", 150);
                
                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        jpWarehouse.add(moGridWah, BorderLayout.CENTER);
        
        moGridItem = new SGridPaneForm(miClient, SModConsts.SU_ITEM, SLibConsts.UNDEFINED, "Ítems") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                SGridColumnForm[] columns = new SGridColumnForm[1];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_L, "Ítem", 450);
                
                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        jpItems.add(moGridItem, BorderLayout.CENTER);
        
        jbOk.addActionListener(this);
        jbClose.addActionListener(this);
        
    }
    
    private void readWarehouses() {
        try {
            maWarehouses = new ArrayList<>();
            String sql = "SELECT id_co, id_cob, id_wah FROM cu_wah WHERE NOT b_del AND NOT b_dis ORDER BY code;";
            
            ResultSet resultSet = miClient.getSession().getDatabase().getConnection().createStatement().executeQuery(sql);
            while (resultSet.next()) {
                SDbBranchWarehouse wah = new SDbBranchWarehouse();
                wah.read(miClient.getSession(), new int[] { resultSet.getInt(1), resultSet.getInt(2), resultSet.getInt(3) });
                maWarehouses.add(wah);
            }
        }
        catch (Exception e) {}
    }
    
    private void readItems() {
        try {
            maItems = new ArrayList<>();
            String sql = "SELECT id_item FROM su_item WHERE NOT b_del AND NOT b_dis ORDER BY name, fk_inp_cl, fk_inp_ct, fk_inp_tp;";
            
            ResultSet resultSet = miClient.getSession().getDatabase().getConnection().createStatement().executeQuery(sql);
            while (resultSet.next()) {
                SDbItem item = new SDbItem();
                item.read(miClient.getSession(), new int[] { resultSet.getInt(1) });
                maItems.add(item);
            }
        }
        catch (Exception e) {}
    }
    
    private void populateGridWarehouses() {
        Vector<SGridRow> vRows = new Vector<>();
        vRows.addAll(maWarehouses);
        
        moGridWah.populateGrid(vRows); 
        moGridWah.clearSortKeys();
        moGridWah.setSelectedGridRow(0);
    }
    
    private void populateGridItems() {
        Vector<SGridRow> vRows = new Vector<>();
        vRows.addAll(maItems);
        
        moGridItem.populateGrid(vRows); 
        moGridItem.clearSortKeys();
        moGridItem.setSelectedGridRow(0);
    }

    @Override
    protected void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jbClose.requestFocus();
        }
    }

    public void actionClose() {
        super.actionCancel();
    }
    
    public void actionOk() {
        super.actionSave();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbClose;
    private javax.swing.JButton jbOk;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpGrids;
    private javax.swing.JPanel jpItems;
    private javax.swing.JPanel jpWarehouse;
    // End of variables declaration//GEN-END:variables

    
    public void formReset() {
        mbFirstTime = true;
    }

    @Override
    public void addAllListeners() {
        jbOk.addActionListener(this);
        jbClose.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbOk.removeActionListener(this);
        jbClose.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        readWarehouses();
        readItems();
        populateGridWarehouses();
        populateGridItems();
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbWahLabTest) registry;
        
        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) { 
            moRegistry.initPrimaryKey();
        }
        for (int i = 0; i < moGridWah.getModel().getRowCount(); i++) {
            if (SLibUtils.compareKeys(moRegistry.getRowPrimaryKey(), 
                    ((SDbBranchWarehouse) moGridWah.getGridRow(i)).getPrimaryKey())){
                moGridWah.setSelectedGridRow(i);
                break;
            }
        }
        for (int i = 0; i < moGridItem.getModel().getRowCount(); i++) {
            if (SLibUtils.compareKeys(new int[] { moRegistry.getFkItem() }, 
                    ((SDbItem) moGridItem.getGridRow(i)).getPrimaryKey())){
                moGridItem.setSelectedGridRow(i);
                break;
            }
        }
        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbWahLabTest registry = moRegistry.clone();
        
        if (registry.isRegistryNew()) {
        }
        
        registry.setFkWarehouseCompanyId(moGridWah.getSelectedGridRow().getRowPrimaryKey()[0]);
        registry.setFkWarehouseBranchId(moGridWah.getSelectedGridRow().getRowPrimaryKey()[1]);
        registry.setFkWarehouseWarehouseId(moGridWah.getSelectedGridRow().getRowPrimaryKey()[2]);
        registry.setFkItem(moGridItem.getSelectedGridRow().getRowPrimaryKey()[0]);
        
        registry.readWarehouse(miClient.getSession());
        registry.readItem(miClient.getSession());
        registry.readStk(miClient.getSession());
        
        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validate = new SGuiValidation();
        return validate;
    }
    
    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbClose) {
                actionClose();
            }
            else if (button == jbOk) {
                actionOk();
            }
        }
    }
}
