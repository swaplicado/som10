/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;


import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.util.Date;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;
import som.mod.SModConsts;
import som.mod.som.db.SDbWarehouseStart;

/**
 * Forma para crear o modificar los registros de la fecha de inicio de los almacenes.
 * @author Isabel Servín
 */
public class SFormWarehouseStart extends SBeanForm implements ActionListener {

    private SDbWarehouseStart moRegistry;
    private boolean isRegistryNew;
    private Date mtOriginalDate;
    
    /**
     * Creates new form SFormWarehouseStart
     * @param client
     * @param title
     */
    public SFormWarehouseStart(SGuiClient client, String title) {

        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.S_WAH_START, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDateDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel4 = new javax.swing.JPanel();
        jlWarehouse = new javax.swing.JLabel();
        moKeyWarehouse = new sa.lib.gui.bean.SBeanFieldKey();

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Inicio almacén:*");
        jlDate.setToolTipText("");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlDate);
        jPanel13.add(moDateDate);

        jPanel2.add(jPanel13);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWarehouse.setText("Almacén:*");
        jlWarehouse.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlWarehouse);

        moKeyWarehouse.setPreferredSize(new java.awt.Dimension(350, 23));
        jPanel4.add(moKeyWarehouse);

        jPanel2.add(jPanel4);

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlWarehouse;
    private sa.lib.gui.bean.SBeanFieldDate moDateDate;
    private sa.lib.gui.bean.SBeanFieldKey moKeyWarehouse;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 560, 350);
        
        moDateDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate.getText()), true);
        moKeyWarehouse.setKeySettings(miClient, SGuiUtils.getLabelName(jlWarehouse.getText()), true);
        
        moFields.addField(moDateDate);
        moFields.addField(moKeyWarehouse);
        
        moFields.setFormButton(jbSave);
        
        jbEdit.setVisible(false);
        jbReadInfo.setVisible(false);
        jtfRegistryKey.setVisible(false);
    }
    
    private SGuiValidation validateDateRange(SGuiValidation validation) {
        try {
            Date infLimit = null;
            Date supLimit = null;
            Date dateToValidate = isRegistryNew ? moDateDate.getValue() : mtOriginalDate;
            
            String sql = "SELECT " 
                        + "(SELECT dt_start FROM " + SModConsts.TablesMap.get(SModConsts.S_WAH_START) + " " 
                        + "WHERE dt_start < '" + SLibUtils.DbmsDateFormatDate.format(dateToValidate) 
                        + "' AND fk_wah_co = " + moKeyWarehouse.getValue()[0] + " AND fk_wah_cob = " + moKeyWarehouse.getValue()[1] + " AND fk_wah_wah = " + moKeyWarehouse.getValue()[2] + " "
                        + "AND NOT b_del " 
                        + "ORDER BY dt_start DESC LIMIT 1) AS inf_limit, " 
                        + "(SELECT dt_start FROM " + SModConsts.TablesMap.get(SModConsts.S_WAH_START) + " " 
                        + "WHERE dt_start > '" + SLibUtils.DbmsDateFormatDate.format(dateToValidate) 
                        + "' AND fk_wah_co = " + moKeyWarehouse.getValue()[0] + " AND fk_wah_cob = " + moKeyWarehouse.getValue()[1] + " AND fk_wah_wah = " + moKeyWarehouse.getValue()[2] + " " 
                        + "AND NOT b_del " 
                        + "ORDER BY dt_start LIMIT 1) AS sup_limit;";
            
            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
            if (resultSet.next()) {
                infLimit = resultSet.getDate("inf_limit");
                supLimit = resultSet.getDate("sup_limit");
            }
            
            if (isRegistryNew && infLimit != null && supLimit != null) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + SGuiUtils.getLabelName(jlDate) + "' está dentro del período comprendido entre " + SLibUtils.DateFormatDate.format(infLimit) + " y " + SLibUtils.DateFormatDate.format(supLimit) + ".");  
                validation.setComponent(moDateDate);
            }
            else if (!isRegistryNew && infLimit != null && !infLimit.before(moDateDate.getValue())) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + SGuiUtils.getLabelName(jlDate) + "' " + SGuiConsts.ERR_MSG_FIELD_DATE_GREAT + SLibUtils.DateFormatDate.format(infLimit) + ".");
                validation.setComponent(moDateDate);
            }
            else if (!isRegistryNew && supLimit != null && !supLimit.after(moDateDate.getValue())) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + SGuiUtils.getLabelName(jlDate) + "' " + SGuiConsts.ERR_MSG_FIELD_DATE_LESS + SLibUtils.DateFormatDate.format(supLimit) + ".");
                validation.setComponent(moDateDate);
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
        return validation;
    }

    @Override
    public void addAllListeners() {
        moKeyWarehouse.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        moKeyWarehouse.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        try {
            moDateDate.setValue(miClient.getSession().getWorkingDate());
            miClient.getSession().populateCatalogue(moKeyWarehouse, SModConsts.CU_WAH, SModConsts.SX_TIC_WAH_UNLD, null);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbWarehouseStart) registry;
        
        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;
        
        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            
            moRegistry.setDateStart(miClient.getSession().getWorkingDate());
            
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moDateDate.setValue(moRegistry.getDateStart());
        moKeyWarehouse.setValue((new int [] {moRegistry.getFkWarehouseCompanyId(), moRegistry.getFkWarehouseBranchId(), moRegistry.getFkWarehouseWarehouseId()}));
        
        isRegistryNew = moRegistry.isRegistryNew();
        mtOriginalDate = isRegistryNew ? null : moRegistry.getDateStart();
        
        setFormEditable(true);

        moFields.getFields();
        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbWarehouseStart registry = (SDbWarehouseStart) moRegistry.clone();

        if (registry.isRegistryNew()) { }
        registry.setDateStart(moDateDate.getValue());
        registry.setFkWarehouseCompanyId(moKeyWarehouse.getValue()[0]);
        registry.setFkWarehouseBranchId(moKeyWarehouse.getValue()[1]);
        registry.setFkWarehouseWarehouseId(moKeyWarehouse.getValue()[2]); 
        
        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            validation = validateDateRange(validation); 
        }
        
        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        
    }
}
