/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.JComboBox;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiFieldKeyGroup;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanDialogReport;
import som.gui.prt.SPrtUtils;
import som.mod.SModConsts;
import som.mod.SModSysConsts;
import som.mod.som.db.SDbIodineValueRank;
import som.mod.som.view.SPaneUserInputCategory;

/**
 *
 * @author Juan Barajas, Isabel Servín
 */
public class SDialogRepIodineRank extends SBeanDialogReport implements ItemListener {

    private SGuiFieldKeyGroup moFieldKeyGroup;

    private boolean mbRepIodine;

    /**
     * Creates new form SDialogRepIodineRank
     * @param client
     * @param type
     * @param subtype
     * @param title
     */
    public SDialogRepIodineRank(SGuiClient client, int type, int subtype, String title) {
        setFormSettings(client, type, subtype, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        moDateStart = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel12 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        moDateEnd = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel13 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moKeyItem = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel14 = new javax.swing.JPanel();
        jlIodineValueRank = new javax.swing.JLabel();
        moKeyIodineValueRank = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel4 = new javax.swing.JPanel();
        jlLimitLow = new javax.swing.JLabel();
        moDecLimitLow = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel5 = new javax.swing.JPanel();
        jlLimitTop = new javax.swing.JLabel();
        moDecLimitTop = new sa.lib.gui.bean.SBeanFieldDecimal();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros del reporte:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(6, 1, 0, 5));

        jPanel11.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlDateStart.setText("Fecha inicial:*");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlDateStart);
        jPanel11.add(moDateStart);

        jPanel2.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlDateEnd.setText("Fecha final:*");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlDateEnd);
        jPanel12.add(moDateEnd);

        jPanel2.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlItem.setText("Ítem:*");
        jlItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlItem);

        moKeyItem.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel13.add(moKeyItem);

        jPanel2.add(jPanel13);

        jPanel14.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlIodineValueRank.setText("Rango de yodo:");
        jlIodineValueRank.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlIodineValueRank);

        moKeyIodineValueRank.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel14.add(moKeyIodineValueRank);

        jPanel2.add(jPanel14);

        jPanel4.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlLimitLow.setText("Límite inferior:");
        jlLimitLow.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlLimitLow);
        jPanel4.add(moDecLimitLow);

        jPanel2.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlLimitTop.setText("Límite superior:");
        jlLimitTop.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlLimitTop);
        jPanel5.add(moDecLimitTop);

        jPanel2.add(jPanel5);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlIodineValueRank;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlLimitLow;
    private javax.swing.JLabel jlLimitTop;
    private sa.lib.gui.bean.SBeanFieldDate moDateEnd;
    private sa.lib.gui.bean.SBeanFieldDate moDateStart;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecLimitLow;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecLimitTop;
    private sa.lib.gui.bean.SBeanFieldKey moKeyIodineValueRank;
    private sa.lib.gui.bean.SBeanFieldKey moKeyItem;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 480, 300);

        moFieldKeyGroup = new SGuiFieldKeyGroup(miClient);
        mbRepIodine = mnFormSubtype == SModSysConsts.REP_LAB_TEST_IOD;

        moDateStart.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateStart.getText()), true);
        moDateEnd.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateEnd.getText()), true);
        moKeyItem.setKeySettings(miClient, SGuiUtils.getLabelName(jlItem.getText()), true);
        moKeyIodineValueRank.setKeySettings(miClient, SGuiUtils.getLabelName(jlIodineValueRank.getText()), false);
        moDecLimitLow.setDecimalSettings(SGuiUtils.getLabelName(jlLimitLow.getText()), mbRepIodine ? SGuiConsts.GUI_TYPE_DEC_QTY : SGuiConsts.GUI_TYPE_DEC_PER, false);
        moDecLimitTop.setDecimalSettings(SGuiUtils.getLabelName(jlLimitTop.getText()), mbRepIodine ? SGuiConsts.GUI_TYPE_DEC_QTY : SGuiConsts.GUI_TYPE_DEC_PER, false);

        moFields.addField(moDateStart);
        moFields.addField(moDateEnd);
        moFields.addField(moKeyItem);
        moFields.addField(moKeyIodineValueRank);
        moFields.addField(moDecLimitLow);
        moFields.addField(moDecLimitTop);

        moFields.setFormButton(jbPrint);

        moDateStart.setValue(SLibTimeUtils.getBeginOfYear(miClient.getSession().getWorkingDate()));
        moDateEnd.setValue(SLibTimeUtils.getEndOfYear(miClient.getSession().getWorkingDate()));

        moKeyItem.addItemListener(this);
        moKeyIodineValueRank.addItemListener(this);

        resetForm();
    }

    /*
     * Private methods
     */

    private void resetForm() {

        reloadCatalogues();
        editableIodineValueRank();
    }

    private void editableIodineValueRank() {
        moKeyIodineValueRank.setEditable(mbRepIodine ? true : false);
        jlIodineValueRank.setEnabled(mbRepIodine ? true : false);
    }

    private void itemStateKeyIodineValueRank() {
        if (moKeyIodineValueRank.getSelectedIndex() <= 0) {
            moDecLimitLow.setEditable(true);
            moDecLimitTop.setEditable(true);
        }
        else {
            moDecLimitLow.setEditable(false);
            moDecLimitTop.setEditable(false);
        }
    }

    private String getSqlHaving() {
        SDbIodineValueRank rank = null;
        String sqlHaving = "";

        if (moDecLimitLow.isEditable()) {
            if (moDecLimitLow.getValue() > 0) {
                sqlHaving += (sqlHaving.isEmpty() ? "HAVING " : "AND ") + "f_val >= " + moDecLimitLow.getValue();
            }

            if (moDecLimitTop.getValue() > 0) {
                sqlHaving += (sqlHaving.isEmpty() ? "HAVING " : " AND ") + "f_val <= " + moDecLimitTop.getValue();
            }
        }
        else if (moKeyIodineValueRank.getSelectedIndex() > 0) {
            rank = (SDbIodineValueRank) miClient.getSession().readRegistry(SModConsts.SU_IOD_VAL_RANK, moKeyIodineValueRank.getValue());

            if (rank.getLimitLow_n() > 0) {
                sqlHaving += (sqlHaving.isEmpty() ? "HAVING " : "AND ") + "f_val >= " + rank.getLimitLow_n();
            }

            if (rank.getLimitTop_n() > 0) {
                sqlHaving += (sqlHaving.isEmpty() ? "HAVING " : " AND ") + "f_val <= " + rank.getLimitTop_n();
            }
        }

        return sqlHaving;
    }

    /*
     * Public methods:
     */

    public void reloadCatalogues() {
        SGuiParams params = new SGuiParams(
            mbRepIodine ? SModSysConsts.SX_IOD_VAL :
            mnFormSubtype == SModSysConsts.REP_LAB_TEST_OLE ? SModSysConsts.SX_OLE_PER :
            mnFormSubtype == SModSysConsts.REP_LAB_TEST_LIN ? SModSysConsts.SX_LIN_PER :
            mnFormSubtype == SModSysConsts.REP_LAB_TEST_LLC ? SModSysConsts.SX_LLC_PER : SLibConsts.UNDEFINED);

        moFieldKeyGroup.initGroup();
        moFieldKeyGroup.addFieldKey(moKeyItem, SModConsts.SU_ITEM, SLibConsts.UNDEFINED, params);
        moFieldKeyGroup.addFieldKey(moKeyIodineValueRank, SModConsts.SU_IOD_VAL_RANK, SLibConsts.UNDEFINED, null);
        moFieldKeyGroup.populateCatalogues();
        moFieldKeyGroup.resetGroup();
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            validation = SGuiUtils.validateDateRange(moDateStart, moDateEnd);

            if (moDecLimitLow.isEditable()) {
                if (validation.isValid() && moDecLimitLow.isEditable() && (moDecLimitLow.getValue() == 0 && moDecLimitTop.getValue() == 0)) {
                    validation.setMessage("Debe al menos especificar un límite.");
                    validation.setComponent(moDecLimitLow);
                }
                else if (validation.isValid() && moDecLimitTop.getValue() != 0) {
                    if (moDecLimitTop.getValue() < moDecLimitLow.getValue()) {
                        validation.setMessage("El límite inferior no puede ser mayor al límite superior.");
                        validation.setComponent(moDecLimitLow);
                    }
                }

                if (validation.isValid() && !mbRepIodine) {
                    if (moDecLimitLow.getValue() > 1) {
                        validation.setMessage("El límite inferior no puede ser mayor al 100%.");
                        validation.setComponent(moDecLimitLow);
                    }
                    else if (moDecLimitTop.getValue() > 1) {
                        validation.setMessage("El límite superior no puede ser mayor al 100%.");
                        validation.setComponent(moDecLimitTop);
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void createParamsMap() {
        String sqlWhere = "";
        moParamsMap = SPrtUtils.createReportParamsMap(miClient.getSession());
        
        SPaneUserInputCategory inputCategory = new SPaneUserInputCategory(miClient, SModConsts.S_TIC, "it");
        String sqlInputCategories = inputCategory.getSqlFilter();
        if (!sqlInputCategories.isEmpty()) {
            sqlWhere += "AND " + sqlInputCategories;
        }
        
        moParamsMap.put("tDateStart", moDateStart.getValue());
        moParamsMap.put("tDateEnd", moDateEnd.getValue());
        moParamsMap.put("nItemId", moKeyItem.getValue()[0]);
        moParamsMap.put("sItem", moKeyItem.getSelectedItem());
        moParamsMap.put("sRank", moKeyIodineValueRank.getSelectedIndex() <= 0 ? ((
                (!mbRepIodine ? SLibUtils.DecimalFormatPercentage4D.format(moDecLimitLow.getValue()) : SLibUtils.DecimalFormatValue4D.format(moDecLimitLow.getValue())) + " - " +
                (!mbRepIodine ? SLibUtils.DecimalFormatPercentage4D.format(moDecLimitTop.getValue()) : SLibUtils.DecimalFormatValue4D.format(moDecLimitTop.getValue())))) :
                moKeyIodineValueRank.getSelectedItem());
        moParamsMap.put("sSqlWhere", sqlWhere);
        moParamsMap.put("sSqlHaving", getSqlHaving());
        moParamsMap.put("sMessageFilter", inputCategory.getReportMessageFilter());

        if (mnFormSubtype != SLibConsts.UNDEFINED) {
            moParamsMap.put("bRepIodine", mnFormSubtype == SModSysConsts.REP_LAB_TEST_IOD);
            moParamsMap.put("nTicketStatusId", SModSysConsts.SS_TIC_ST_ADM);
            moParamsMap.put("sSqlTest",
                mnFormSubtype == SModSysConsts.REP_LAB_TEST_IOD ? "lt.iod_val" :
                mnFormSubtype == SModSysConsts.REP_LAB_TEST_OLE ? "lt.ole_per" :
                mnFormSubtype == SModSysConsts.REP_LAB_TEST_LIN ? "lt.lin_per" : "lt.llc_per");
            moParamsMap.put("sReportName",
                mnFormSubtype == SModSysConsts.REP_LAB_TEST_IOD ? "VALOR DE YODO" :
                mnFormSubtype == SModSysConsts.REP_LAB_TEST_OLE ? "PORCENTAJE DE ÁCIDO OLEICO" :
                mnFormSubtype == SModSysConsts.REP_LAB_TEST_LIN ? "PORCENTAJE DE ÁCIDO LINOLEICO" : "PORCENTAJE DE ÁCIDO LINOLÉNICO");
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox && e.getStateChange() == ItemEvent.SELECTED) {
            JComboBox comboBox = (JComboBox)  e.getSource();

            if (comboBox == moKeyItem) {
                editableIodineValueRank();
            }
            else if (comboBox == moKeyIodineValueRank) {
                itemStateKeyIodineValueRank();
            }
        }
    }
}
