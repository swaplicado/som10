/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import java.awt.BorderLayout;
import java.sql.SQLException;
import java.util.Date;
import java.util.Vector;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;
import som.mod.SModConsts;
import som.mod.som.db.SDbMgmtTicketsSupplierInputType;
import som.mod.som.db.SDbTicket;
import som.mod.som.db.SRowTicketSupplierInputType;
import som.mod.som.db.SSomConsts;

/**
 *
 * @author Sergio Flores
 */
public class SFormMgmtSupplierInputType extends SBeanForm {
    
    private Date[] matPeriod;
    private int[] manRegistryKey;
    private SDbMgmtTicketsSupplierInputType moRegistry;
    private SGridPaneForm moGridTickets;

    /**
     * Creates new form SFormMgmtSupplierInputType
     */
    public SFormMgmtSupplierInputType(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.SX_TIC_MAN, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jlInputType = new javax.swing.JLabel();
        jtfInputType = new javax.swing.JTextField();
        jlPeriod = new javax.swing.JLabel();
        jtfPeriod = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jlProducer = new javax.swing.JLabel();
        jtfProducer = new javax.swing.JTextField();
        jPanel20 = new javax.swing.JPanel();
        jlProducerFiscalId = new javax.swing.JLabel();
        jtfProducerFiscalId = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jpTickets = new javax.swing.JPanel();

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del proveedor y tipo de insumo:"));
        jPanel15.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlInputType.setText("Tipo insumo:");
        jlInputType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel18.add(jlInputType);

        jtfInputType.setEditable(false);
        jtfInputType.setFocusable(false);
        jtfInputType.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel18.add(jtfInputType);

        jlPeriod.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlPeriod.setText("Período:");
        jlPeriod.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel18.add(jlPeriod);

        jtfPeriod.setEditable(false);
        jtfPeriod.setText("01/01/2001 - 01/01/2001");
        jtfPeriod.setFocusable(false);
        jtfPeriod.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel18.add(jtfPeriod);

        jPanel15.add(jPanel18);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProducer.setText("Proveedor:");
        jlProducer.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel16.add(jlProducer);

        jtfProducer.setEditable(false);
        jtfProducer.setFocusable(false);
        jtfProducer.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel16.add(jtfProducer);

        jPanel15.add(jPanel16);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProducerFiscalId.setText("RFC:");
        jlProducerFiscalId.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel20.add(jlProducerFiscalId);

        jtfProducerFiscalId.setEditable(false);
        jtfProducerFiscalId.setFocusable(false);
        jtfProducerFiscalId.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel20.add(jtfProducerFiscalId);

        jPanel15.add(jPanel20);

        jPanel2.add(jPanel15, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel12.setLayout(new java.awt.BorderLayout());

        jpTickets.setBorder(javax.swing.BorderFactory.createTitledBorder("Boletos:"));
        jpTickets.setPreferredSize(new java.awt.Dimension(100, 200));
        jpTickets.setLayout(new java.awt.BorderLayout());
        jPanel12.add(jpTickets, java.awt.BorderLayout.CENTER);
        jpTickets.getAccessibleContext().setAccessibleParent(jPanel1);

        jPanel1.add(jPanel12, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JLabel jlInputType;
    private javax.swing.JLabel jlPeriod;
    private javax.swing.JLabel jlProducer;
    private javax.swing.JLabel jlProducerFiscalId;
    private javax.swing.JPanel jpTickets;
    private javax.swing.JTextField jtfInputType;
    private javax.swing.JTextField jtfPeriod;
    private javax.swing.JTextField jtfProducer;
    private javax.swing.JTextField jtfProducerFiscalId;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 1024, 640);

        moFields.setFormButton(jbSave);

        moGridTickets = new SGridPaneForm(miClient, SModConsts.SX_TIC_MAN_SUP_INP_TP, SLibConsts.UNDEFINED, "Boletos x proveedor x tipo insumo") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                SGridColumnForm[] columns = new SGridColumnForm[16];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_INT_RAW, "Boleto");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Temporada");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Región");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Proveedor");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, SGridConsts.COL_TITLE_TYPE + " insumo");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha entrada");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Placas");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Chofer");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Peso origen (" + SSomConsts.KG + ")");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Peso destino (" + SSomConsts.KG + ")");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_PER_2D, "Impurezas");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_PER_2D, "Humedad");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_PER_2D, "Castigo usr");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Peso pago usr (" + SSomConsts.KG + ")");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Precio ton $");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Total $");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        jpTickets.add(moGridTickets, BorderLayout.CENTER);
        
        mvFormGrids.add(moGridTickets);
    }

    private void populateTickets() throws SQLException {
        Vector<SGridRow> rows = new Vector<>();

        for (SDbTicket ticket : moRegistry.getChildTickets()) {
            rows.add(new SRowTicketSupplierInputType(ticket));
        }

        moGridTickets.populateGrid(rows);
    }
    
    private void showRegistry() {
        if (matPeriod != null && manRegistryKey != null) {
            try {
                moRegistry = new SDbMgmtTicketsSupplierInputType();
                moRegistry.setParamDateStart(matPeriod[0]);
                moRegistry.setParamDateEnd(matPeriod[1]);
                moRegistry.read(miClient.getSession(), manRegistryKey);
                setRegistry(moRegistry);
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
        }
    }
    
    /*
     * Overriden methods
     */

    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {
        try {
            populateTickets();
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbMgmtTicketsSupplierInputType) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();
        
        manRegistryKey = null;
        matPeriod = null;
        
        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        jtfInputType.setText(moRegistry.getXtaInputType());
        jtfProducer.setText(moRegistry.getXtaProducer());
        jtfProducerFiscalId.setText(moRegistry.getXtaProducerFiscalId());
        if (moRegistry.getParamDateStart() == null || moRegistry.getParamDateEnd() == null) {
            jtfPeriod.setText("");
        }
        else {
            jtfPeriod.setText(SLibUtils.DateFormatDate.format(moRegistry.getParamDateStart()) + " - " + SLibUtils.DateFormatDate.format(moRegistry.getParamDateEnd()));
        }

        setFormEditable(true);

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SGuiValidation validateForm() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(int type, Object value) {
        switch (type) {
            case SGuiConsts.PARAM_DATE:
                matPeriod = (Date[]) value;
                break;
            case SGuiConsts.PARAM_KEY:
                manRegistryKey = (int[]) value;
                break;
            default:
        }
        
        showRegistry();
    }
}
