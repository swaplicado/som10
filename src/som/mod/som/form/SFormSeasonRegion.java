/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldRadio;
import som.gui.SGuiClientSessionCustom;
import som.mod.SModConsts;
import som.mod.som.db.SDbSeasonRegion;

/**
 *
 * @author Juan Barajas
 */
public class SFormSeasonRegion extends sa.lib.gui.bean.SBeanForm implements ChangeListener {

    private SDbSeasonRegion moRegistry;
    private double mdAuxPricePerTon;

    /**
     * Creates new form SFormSeasonRegion
     */
    public SFormSeasonRegion(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.SU_SEAS_REG, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        moGpoUpdate = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlSeason = new javax.swing.JLabel();
        moKeySeason = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel11 = new javax.swing.JPanel();
        jlRegion = new javax.swing.JLabel();
        moKeyRegion = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel7 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moKeyItem = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel12 = new javax.swing.JPanel();
        jlMaximumImpuritiesPercentage = new javax.swing.JLabel();
        moDecMaximumImpuritiesPercentage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel13 = new javax.swing.JPanel();
        jlMaximumMoisturePercentage = new javax.swing.JLabel();
        moDecMaximumMoisturePercentage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel8 = new javax.swing.JPanel();
        jlMaximumDensity = new javax.swing.JLabel();
        moDecMaximumDensity = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel10 = new javax.swing.JPanel();
        jlMaximumRefractionIndex = new javax.swing.JLabel();
        moDecMaximumRefractionIndex = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel9 = new javax.swing.JPanel();
        jlMaximumIodineValue = new javax.swing.JLabel();
        moDecMaximumIodineValue = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel14 = new javax.swing.JPanel();
        jlPricePerTon = new javax.swing.JLabel();
        moDecPricePerTon = new sa.lib.gui.bean.SBeanFieldDecimal();
        moTextCurrencyCode = new sa.lib.gui.bean.SBeanFieldText();
        jPanel15 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        moRadNotUpdateTicket = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel5 = new javax.swing.JPanel();
        moRadUpdateTicketStart = new sa.lib.gui.bean.SBeanFieldRadio();
        moDateDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel17 = new javax.swing.JPanel();
        moRadUpdateTicketAll = new sa.lib.gui.bean.SBeanFieldRadio();

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.GridLayout(9, 1, 0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSeason.setForeground(new java.awt.Color(0, 0, 255));
        jlSeason.setText("Temporada:*");
        jlSeason.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel6.add(jlSeason);

        moKeySeason.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel6.add(moKeySeason);

        jPanel2.add(jPanel6);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRegion.setForeground(new java.awt.Color(0, 0, 255));
        jlRegion.setText("Región:*");
        jlRegion.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel11.add(jlRegion);

        moKeyRegion.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel11.add(moKeyRegion);

        jPanel2.add(jPanel11);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setForeground(new java.awt.Color(0, 0, 255));
        jlItem.setText("Ítem:*");
        jlItem.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel7.add(jlItem);

        moKeyItem.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel7.add(moKeyItem);

        jPanel2.add(jPanel7);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMaximumImpuritiesPercentage.setText("Impurezas máx.:");
        jlMaximumImpuritiesPercentage.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel12.add(jlMaximumImpuritiesPercentage);
        jPanel12.add(moDecMaximumImpuritiesPercentage);

        jPanel2.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMaximumMoisturePercentage.setText("Humedad máx.:");
        jlMaximumMoisturePercentage.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel13.add(jlMaximumMoisturePercentage);
        jPanel13.add(moDecMaximumMoisturePercentage);

        jPanel2.add(jPanel13);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMaximumDensity.setText("Densidad prom.:");
        jlMaximumDensity.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel8.add(jlMaximumDensity);
        jPanel8.add(moDecMaximumDensity);

        jPanel2.add(jPanel8);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMaximumRefractionIndex.setText("Índice refracción prom. (IR):");
        jlMaximumRefractionIndex.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel10.add(jlMaximumRefractionIndex);
        jPanel10.add(moDecMaximumRefractionIndex);

        jPanel2.add(jPanel10);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMaximumIodineValue.setText("Valor yodo prom. (VI):");
        jlMaximumIodineValue.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel9.add(jlMaximumIodineValue);
        jPanel9.add(moDecMaximumIodineValue);

        jPanel2.add(jPanel9);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPricePerTon.setText("Precio ton:*");
        jlPricePerTon.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel14.add(jlPricePerTon);
        jPanel14.add(moDecPricePerTon);

        moTextCurrencyCode.setEditable(false);
        moTextCurrencyCode.setText("sBeanFieldText1");
        moTextCurrencyCode.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel14.add(moTextCurrencyCode);

        jPanel2.add(jPanel14);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("Actualización por cambio en precio:"));
        jPanel15.setLayout(new java.awt.BorderLayout());

        jPanel16.setLayout(new java.awt.GridLayout(3, 0, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moGpoUpdate.add(moRadNotUpdateTicket);
        moRadNotUpdateTicket.setSelected(true);
        moRadNotUpdateTicket.setText("No actualizar boletos");
        moRadNotUpdateTicket.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel4.add(moRadNotUpdateTicket);

        jPanel16.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moGpoUpdate.add(moRadUpdateTicketStart);
        moRadUpdateTicketStart.setText("Actualizar boletos a partir del");
        moRadUpdateTicketStart.setPreferredSize(new java.awt.Dimension(170, 23));
        jPanel5.add(moRadUpdateTicketStart);
        jPanel5.add(moDateDate);

        jPanel16.add(jPanel5);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moGpoUpdate.add(moRadUpdateTicketAll);
        moRadUpdateTicketAll.setText("Actualizar todos los boletos");
        moRadUpdateTicketAll.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel17.add(moRadUpdateTicketAll);

        jPanel16.add(jPanel17);

        jPanel15.add(jPanel16, java.awt.BorderLayout.NORTH);

        jPanel1.add(jPanel15, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlMaximumDensity;
    private javax.swing.JLabel jlMaximumImpuritiesPercentage;
    private javax.swing.JLabel jlMaximumIodineValue;
    private javax.swing.JLabel jlMaximumMoisturePercentage;
    private javax.swing.JLabel jlMaximumRefractionIndex;
    private javax.swing.JLabel jlPricePerTon;
    private javax.swing.JLabel jlRegion;
    private javax.swing.JLabel jlSeason;
    private sa.lib.gui.bean.SBeanFieldDate moDateDate;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecMaximumDensity;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecMaximumImpuritiesPercentage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecMaximumIodineValue;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecMaximumMoisturePercentage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecMaximumRefractionIndex;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecPricePerTon;
    private javax.swing.ButtonGroup moGpoUpdate;
    private sa.lib.gui.bean.SBeanFieldKey moKeyItem;
    private sa.lib.gui.bean.SBeanFieldKey moKeyRegion;
    private sa.lib.gui.bean.SBeanFieldKey moKeySeason;
    private sa.lib.gui.bean.SBeanFieldRadio moRadNotUpdateTicket;
    private sa.lib.gui.bean.SBeanFieldRadio moRadUpdateTicketAll;
    private sa.lib.gui.bean.SBeanFieldRadio moRadUpdateTicketStart;
    private sa.lib.gui.bean.SBeanFieldText moTextCurrencyCode;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 720, 450);

        moKeySeason.setKeySettings(miClient, SGuiUtils.getLabelName(jlSeason.getText()), true);
        moKeyRegion.setKeySettings(miClient, SGuiUtils.getLabelName(jlRegion.getText()), true);
        moKeyItem.setKeySettings(miClient, SGuiUtils.getLabelName(jlItem.getText()), true);
        moDecMaximumImpuritiesPercentage.setDecimalSettings(SGuiUtils.getLabelName(jlMaximumImpuritiesPercentage.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecMaximumMoisturePercentage.setDecimalSettings(SGuiUtils.getLabelName(jlMaximumMoisturePercentage.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecMaximumDensity.setDecimalSettings(SGuiUtils.getLabelName(jlMaximumDensity.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecMaximumRefractionIndex.setDecimalSettings(SGuiUtils.getLabelName(jlMaximumRefractionIndex.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecMaximumIodineValue.setDecimalSettings(SGuiUtils.getLabelName(jlMaximumIodineValue.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecPricePerTon.setDecimalSettings(SGuiUtils.getLabelName(jlPricePerTon.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moTextCurrencyCode.setTextSettings(SGuiUtils.getLabelName(jlPricePerTon.getText()), 3);
        moRadNotUpdateTicket.setBooleanSettings(SGuiUtils.getLabelName(moRadNotUpdateTicket.getText()), true);
        moRadUpdateTicketStart.setBooleanSettings(SGuiUtils.getLabelName(moRadUpdateTicketStart.getText()), false);
        moDateDate.setDateSettings(miClient, SGuiUtils.getLabelName(moRadUpdateTicketStart.getText()), true);
        moRadUpdateTicketAll.setBooleanSettings(SGuiUtils.getLabelName(moRadUpdateTicketAll.getText()), false);

        moFields.addField(moKeySeason);
        moFields.addField(moKeyRegion);
        moFields.addField(moKeyItem);
        moFields.addField(moDecMaximumImpuritiesPercentage);
        moFields.addField(moDecMaximumMoisturePercentage);
        moFields.addField(moDecMaximumDensity);
        moFields.addField(moDecMaximumRefractionIndex);
        moFields.addField(moDecMaximumIodineValue);
        moFields.addField(moDecPricePerTon);
        moFields.addField(moRadNotUpdateTicket);
        moFields.addField(moRadUpdateTicketStart);
        moFields.addField(moDateDate);
        moFields.addField(moRadUpdateTicketAll);

        moFields.setFormButton(jbSave);
    }
    
    private void actionUpdateTicket() {
        if (moRadUpdateTicketStart.isSelected() && !moDateDate.isEditable()) {
            moDateDate.setValue(miClient.getSession().getWorkingDate());
        }
        moDateDate.setEditable(moRadUpdateTicketStart.isSelected());
    }

    @Override
    public void addAllListeners() {
        moRadNotUpdateTicket.addChangeListener(this);
        moRadUpdateTicketStart.addChangeListener(this);
        moRadUpdateTicketAll.addChangeListener(this);
    }

    @Override
    public void removeAllListeners() {
        moRadNotUpdateTicket.removeChangeListener(this);
        moRadUpdateTicketStart.removeChangeListener(this);
        moRadUpdateTicketAll.removeChangeListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeySeason, SModConsts.SU_SEAS, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyRegion, SModConsts.SU_REG, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyItem, SModConsts.SU_ITEM, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        int[] key = null;
        moRegistry = (SDbSeasonRegion) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        key = moRegistry.getPrimaryKey();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moKeySeason.setValue(new int[] { key[0] });
        moKeyRegion.setValue(new int[] { key[1] });
        moKeyItem.setValue(new int[] { key[2] });
        moDecMaximumImpuritiesPercentage.setValue(moRegistry.getMaximumImpuritiesPercentage());
        moDecMaximumDensity.setValue(moRegistry.getMaximumDensity());
        moDecMaximumMoisturePercentage.setValue(moRegistry.getMaximumMoisturePercentage());
        moDecMaximumRefractionIndex.setValue(moRegistry.getMaximumRefractionIndex());
        moDecMaximumIodineValue.setValue(moRegistry.getMaximumIodineValue());
        moDecPricePerTon.setValue(mdAuxPricePerTon = moRegistry.getPricePerTon());
        moTextCurrencyCode.setValue(((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getLocalCurrencyCode());

        setFormEditable(true);

        if (moRegistry.isRegistryNew()) {
        }
        else {
            moKeySeason.setEnabled(false);
            moKeyItem.setEnabled(false);
            moKeyRegion.setEnabled(false);
        }
        moDateDate.setValue(miClient.getSession().getWorkingDate());
        moRadNotUpdateTicket.setSelected(true);

        addAllListeners();
        
        actionUpdateTicket();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbSeasonRegion registry = moRegistry.clone();

        if (registry.isRegistryNew()) {
            registry.setPkSeasonId(moKeySeason.getValue()[0]);
            registry.setPkItemId(moKeyItem.getValue()[0]);
            registry.setPkRegionId(moKeyRegion.getValue()[0]);
        }

        registry.setMaximumImpuritiesPercentage(moDecMaximumImpuritiesPercentage.getValue());
        registry.setMaximumDensity(moDecMaximumDensity.getValue());
        registry.setMaximumMoisturePercentage(moDecMaximumMoisturePercentage.getValue());
        registry.setMaximumRefractionIndex(moDecMaximumRefractionIndex.getValue());
        registry.setMaximumIodineValue(moDecMaximumIodineValue.getValue());
        registry.setPricePerTon(moDecPricePerTon.getValue());

        if (mdAuxPricePerTon != 0) {
            registry.setAuxUpdatePriceTonTickets(mdAuxPricePerTon != moDecPricePerTon.getValue() && (moRadUpdateTicketStart.isSelected() || moRadUpdateTicketAll.isSelected()));
        }
        registry.setAuxUpdateTicketDateStart(moDateDate.isEditable() ? moDateDate.getValue() : null);
        
        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        return validation;
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        if (e.getSource() instanceof SBeanFieldRadio) {
            if ((SBeanFieldRadio) e.getSource() == moRadNotUpdateTicket || (SBeanFieldRadio) e.getSource() == moRadUpdateTicketStart ||
                    (SBeanFieldRadio) e.getSource() == moRadUpdateTicketAll) {
                actionUpdateTicket();
            }
        }
    }
}
