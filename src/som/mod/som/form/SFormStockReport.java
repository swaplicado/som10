/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import som.mod.SModConsts;
import som.mod.som.db.SDbConsumableRecord;
import som.mod.som.db.SDbConsumableWarehouse;
import som.mod.som.db.SDbFunctionalArea;
import som.mod.som.db.SDbProcessingRawMaterials;
import som.mod.som.db.SDbStockReport;

/**
 *
 * @author Isabel Servín
 */
public class SFormStockReport extends sa.lib.gui.bean.SBeanForm implements ItemListener, ActionListener, ChangeListener, FocusListener {

    private final int MISTELLA = 1;
    private final int HEXANO = 2;
    
    private SDbStockReport moRegistry;
    
    private ArrayList<SDbFunctionalArea> maFunctionalAreas;
    private ArrayList<SDbConsumableWarehouse> maConsumableWarehouses;

    /**
     * Creates new form SFormInputClass
     * @param client
     * @param title
     */
    public SFormStockReport(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.S_STK_REPORT, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jpAllPanels = new javax.swing.JPanel();
        jpDate = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDate = new sa.lib.gui.bean.SBeanFieldDate();
        jbContinue = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jlMixWah = new javax.swing.JLabel();
        moKeyMixWah = new sa.lib.gui.bean.SBeanFieldKey();
        jpPanelDecimal = new javax.swing.JPanel();
        jlMixWahItem = new javax.swing.JLabel();
        jpPanelDecimal1 = new javax.swing.JPanel();
        jlMixPer = new javax.swing.JLabel();
        moDecimalMixPer = new sa.lib.gui.bean.SBeanFieldDecimal();
        jpRawMaterials = new javax.swing.JPanel();
        jpPlant1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jlPlant1 = new javax.swing.JLabel();
        moTextPlant1 = new sa.lib.gui.bean.SBeanFieldText();
        moBoolWithoutProdP1 = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel5 = new javax.swing.JPanel();
        jlRawMaterialP1 = new javax.swing.JLabel();
        moKeyRawMaterialP1 = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel12 = new javax.swing.JPanel();
        jlProcQtyP1 = new javax.swing.JLabel();
        moDecimalProcQtyP1 = new sa.lib.gui.bean.SBeanFieldDecimal();
        moTextUnitP1 = new sa.lib.gui.bean.SBeanFieldText();
        jlOil24 = new javax.swing.JLabel();
        jlKilosP1 = new javax.swing.JLabel();
        moDecimalKilosP1 = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel13 = new javax.swing.JPanel();
        jlBatchP1 = new javax.swing.JLabel();
        moKeyBatchP1 = new sa.lib.gui.bean.SBeanFieldKey();
        jbPrcBatch1 = new javax.swing.JButton();
        jpPlant2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlPlant2 = new javax.swing.JLabel();
        moTextPlant2 = new sa.lib.gui.bean.SBeanFieldText();
        moBoolWithoutProdP2 = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel14 = new javax.swing.JPanel();
        jlRawMaterialP2 = new javax.swing.JLabel();
        moKeyRawMaterialP2 = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel15 = new javax.swing.JPanel();
        jlProcQtyP2 = new javax.swing.JLabel();
        moDecimalProcQtyP2 = new sa.lib.gui.bean.SBeanFieldDecimal();
        moTextUnitP2 = new sa.lib.gui.bean.SBeanFieldText();
        jlOil26 = new javax.swing.JLabel();
        jlKilosP2 = new javax.swing.JLabel();
        moDecimalKilosP2 = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel16 = new javax.swing.JPanel();
        jlBatchP2 = new javax.swing.JLabel();
        moKeyBatchP2 = new sa.lib.gui.bean.SBeanFieldKey();
        jbPrcBatch2 = new javax.swing.JButton();
        jpConsumables = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jlWahMis = new javax.swing.JLabel();
        moDecimalMisCm = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlcm1 = new javax.swing.JLabel();
        jlSpace = new javax.swing.JLabel();
        jlMis = new javax.swing.JLabel();
        moDecimalMisLts = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlLts = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jlWahName = new javax.swing.JLabel();
        moDecimalHexCm = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlcm2 = new javax.swing.JLabel();
        jlSpace2 = new javax.swing.JLabel();
        jlHex = new javax.swing.JLabel();
        moDecimalHexLts = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlLts2 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        moBoolSend = new sa.lib.gui.bean.SBeanFieldBoolean();

        jpAllPanels.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpAllPanels.setLayout(new java.awt.BorderLayout());

        jpDate.setLayout(new java.awt.GridLayout(4, 0));

        jPanel1.setPreferredSize(new java.awt.Dimension(555, 27));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlDate.setText("Fecha:*");
        jlDate.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel1.add(jlDate);
        jPanel1.add(moDate);

        jbContinue.setText("Continuar");
        jbContinue.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel1.add(jbContinue);

        jpDate.add(jPanel1);

        jPanel6.setPreferredSize(new java.awt.Dimension(555, 27));
        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlMixWah.setText("Tanque mezcla:*");
        jlMixWah.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel6.add(jlMixWah);

        moKeyMixWah.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel6.add(moKeyMixWah);

        jpDate.add(jPanel6);

        jpPanelDecimal.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlMixWahItem.setText("Ítem");
        jlMixWahItem.setPreferredSize(new java.awt.Dimension(700, 23));
        jpPanelDecimal.add(jlMixWahItem);

        jpDate.add(jpPanelDecimal);

        jpPanelDecimal1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlMixPer.setText("Porcentaje mezcla:*");
        jlMixPer.setPreferredSize(new java.awt.Dimension(135, 16));
        jpPanelDecimal1.add(jlMixPer);
        jpPanelDecimal1.add(moDecimalMixPer);

        jpDate.add(jpPanelDecimal1);

        jpAllPanels.add(jpDate, java.awt.BorderLayout.NORTH);

        jpRawMaterials.setLayout(new java.awt.BorderLayout());

        jpPlant1.setBorder(javax.swing.BorderFactory.createTitledBorder("Planta 1:"));
        jpPlant1.setLayout(new java.awt.GridLayout(4, 0, 0, 5));

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPlant1.setText("Planta:");
        jlPlant1.setPreferredSize(new java.awt.Dimension(130, 16));
        jPanel2.add(jlPlant1);

        moTextPlant1.setEditable(false);
        moTextPlant1.setEnabled(false);
        moTextPlant1.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel2.add(moTextPlant1);

        moBoolWithoutProdP1.setText("Sin producción");
        moBoolWithoutProdP1.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel2.add(moBoolWithoutProdP1);

        jpPlant1.add(jPanel2);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRawMaterialP1.setText("MP procesada:*");
        jlRawMaterialP1.setPreferredSize(new java.awt.Dimension(130, 16));
        jPanel5.add(jlRawMaterialP1);

        moKeyRawMaterialP1.setEditable(true);
        moKeyRawMaterialP1.setPreferredSize(new java.awt.Dimension(500, 23));
        jPanel5.add(moKeyRawMaterialP1);

        jpPlant1.add(jPanel5);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProcQtyP1.setText("Cant. procesada:*");
        jlProcQtyP1.setPreferredSize(new java.awt.Dimension(130, 16));
        jPanel12.add(jlProcQtyP1);
        jlProcQtyP1.getAccessibleContext().setAccessibleName("Cantidad procesada:");

        jPanel12.add(moDecimalProcQtyP1);

        moTextUnitP1.setEditable(false);
        moTextUnitP1.setText("Unidad");
        moTextUnitP1.setEnabled(false);
        moTextUnitP1.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel12.add(moTextUnitP1);

        jlOil24.setPreferredSize(new java.awt.Dimension(25, 16));
        jPanel12.add(jlOil24);

        jlKilosP1.setText("Kilogramos:");
        jlKilosP1.setPreferredSize(new java.awt.Dimension(70, 16));
        jPanel12.add(jlKilosP1);

        moDecimalKilosP1.setEditable(false);
        moDecimalKilosP1.setEnabled(false);
        jPanel12.add(moDecimalKilosP1);

        jpPlant1.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBatchP1.setText("Lote producción:*");
        jlBatchP1.setPreferredSize(new java.awt.Dimension(130, 16));
        jPanel13.add(jlBatchP1);

        moKeyBatchP1.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel13.add(moKeyBatchP1);

        jbPrcBatch1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/som/gui/img/icon_std_new.gif"))); // NOI18N
        jbPrcBatch1.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel13.add(jbPrcBatch1);

        jpPlant1.add(jPanel13);

        jpRawMaterials.add(jpPlant1, java.awt.BorderLayout.NORTH);

        jpPlant2.setBorder(javax.swing.BorderFactory.createTitledBorder("Planta 2:"));
        jpPlant2.setLayout(new java.awt.GridLayout(4, 0, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPlant2.setText("Planta:");
        jlPlant2.setPreferredSize(new java.awt.Dimension(130, 16));
        jPanel4.add(jlPlant2);

        moTextPlant2.setEditable(false);
        moTextPlant2.setEnabled(false);
        moTextPlant2.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel4.add(moTextPlant2);

        moBoolWithoutProdP2.setText("Sin producción");
        moBoolWithoutProdP2.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel4.add(moBoolWithoutProdP2);

        jpPlant2.add(jPanel4);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRawMaterialP2.setText("MP procesada:*");
        jlRawMaterialP2.setPreferredSize(new java.awt.Dimension(130, 16));
        jPanel14.add(jlRawMaterialP2);

        moKeyRawMaterialP2.setEditable(true);
        moKeyRawMaterialP2.setPreferredSize(new java.awt.Dimension(500, 23));
        jPanel14.add(moKeyRawMaterialP2);

        jpPlant2.add(jPanel14);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProcQtyP2.setText("Cant. procesada:*");
        jlProcQtyP2.setPreferredSize(new java.awt.Dimension(130, 16));
        jPanel15.add(jlProcQtyP2);
        jPanel15.add(moDecimalProcQtyP2);

        moTextUnitP2.setEditable(false);
        moTextUnitP2.setText("Unidad");
        moTextUnitP2.setEnabled(false);
        moTextUnitP2.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel15.add(moTextUnitP2);

        jlOil26.setPreferredSize(new java.awt.Dimension(25, 16));
        jPanel15.add(jlOil26);

        jlKilosP2.setText("Kilogramos:");
        jlKilosP2.setPreferredSize(new java.awt.Dimension(70, 16));
        jPanel15.add(jlKilosP2);

        moDecimalKilosP2.setEditable(false);
        moDecimalKilosP2.setEnabled(false);
        jPanel15.add(moDecimalKilosP2);

        jpPlant2.add(jPanel15);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBatchP2.setText("Lote producción:*");
        jlBatchP2.setPreferredSize(new java.awt.Dimension(130, 16));
        jPanel16.add(jlBatchP2);

        moKeyBatchP2.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel16.add(moKeyBatchP2);

        jbPrcBatch2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/som/gui/img/icon_std_new.gif"))); // NOI18N
        jbPrcBatch2.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel16.add(jbPrcBatch2);

        jpPlant2.add(jPanel16);

        jpRawMaterials.add(jpPlant2, java.awt.BorderLayout.SOUTH);

        jpAllPanels.add(jpRawMaterials, java.awt.BorderLayout.CENTER);

        jpConsumables.setBorder(javax.swing.BorderFactory.createTitledBorder("Consumibles:"));
        jpConsumables.setPreferredSize(new java.awt.Dimension(636, 110));
        jpConsumables.setLayout(new java.awt.GridLayout(3, 0, 0, 5));

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWahMis.setText("SE-63A:*");
        jlWahMis.setPreferredSize(new java.awt.Dimension(111, 16));
        jPanel10.add(jlWahMis);
        jPanel10.add(moDecimalMisCm);

        jlcm1.setText("cm");
        jlcm1.setPreferredSize(new java.awt.Dimension(25, 16));
        jPanel10.add(jlcm1);

        jlSpace.setPreferredSize(new java.awt.Dimension(50, 16));
        jPanel10.add(jlSpace);

        jlMis.setText("Misella:");
        jlMis.setPreferredSize(new java.awt.Dimension(111, 16));
        jPanel10.add(jlMis);

        moDecimalMisLts.setEditable(false);
        moDecimalMisLts.setEnabled(false);
        jPanel10.add(moDecimalMisLts);

        jlLts.setText("lts.");
        jlLts.setPreferredSize(new java.awt.Dimension(25, 16));
        jPanel10.add(jlLts);

        jpConsumables.add(jPanel10);

        jPanel11.setPreferredSize(new java.awt.Dimension(600, 23));
        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWahName.setText("SE-63B:*");
        jlWahName.setPreferredSize(new java.awt.Dimension(111, 16));
        jPanel11.add(jlWahName);
        jPanel11.add(moDecimalHexCm);

        jlcm2.setText("cm");
        jlcm2.setPreferredSize(new java.awt.Dimension(25, 16));
        jPanel11.add(jlcm2);

        jlSpace2.setPreferredSize(new java.awt.Dimension(50, 16));
        jPanel11.add(jlSpace2);

        jlHex.setText("Hexano:");
        jlHex.setPreferredSize(new java.awt.Dimension(111, 16));
        jPanel11.add(jlHex);

        moDecimalHexLts.setEditable(false);
        moDecimalHexLts.setEnabled(false);
        jPanel11.add(moDecimalHexLts);

        jlLts2.setText("lts.");
        jlLts2.setPreferredSize(new java.awt.Dimension(25, 16));
        jPanel11.add(jlLts2);

        jpConsumables.add(jPanel11);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        moBoolSend.setText("Enviar reportes al guardar");
        moBoolSend.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel8.add(moBoolSend);

        jpConsumables.add(jPanel8);

        jpAllPanels.add(jpConsumables, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jpAllPanels, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JButton jbContinue;
    private javax.swing.JButton jbPrcBatch1;
    private javax.swing.JButton jbPrcBatch2;
    private javax.swing.JLabel jlBatchP1;
    private javax.swing.JLabel jlBatchP2;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlHex;
    private javax.swing.JLabel jlKilosP1;
    private javax.swing.JLabel jlKilosP2;
    private javax.swing.JLabel jlLts;
    private javax.swing.JLabel jlLts2;
    private javax.swing.JLabel jlMis;
    private javax.swing.JLabel jlMixPer;
    private javax.swing.JLabel jlMixWah;
    private javax.swing.JLabel jlMixWahItem;
    private javax.swing.JLabel jlOil24;
    private javax.swing.JLabel jlOil26;
    private javax.swing.JLabel jlPlant1;
    private javax.swing.JLabel jlPlant2;
    private javax.swing.JLabel jlProcQtyP1;
    private javax.swing.JLabel jlProcQtyP2;
    private javax.swing.JLabel jlRawMaterialP1;
    private javax.swing.JLabel jlRawMaterialP2;
    private javax.swing.JLabel jlSpace;
    private javax.swing.JLabel jlSpace2;
    private javax.swing.JLabel jlWahMis;
    private javax.swing.JLabel jlWahName;
    private javax.swing.JLabel jlcm1;
    private javax.swing.JLabel jlcm2;
    private javax.swing.JPanel jpAllPanels;
    private javax.swing.JPanel jpConsumables;
    private javax.swing.JPanel jpDate;
    private javax.swing.JPanel jpPanelDecimal;
    private javax.swing.JPanel jpPanelDecimal1;
    private javax.swing.JPanel jpPlant1;
    private javax.swing.JPanel jpPlant2;
    private javax.swing.JPanel jpRawMaterials;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolSend;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolWithoutProdP1;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolWithoutProdP2;
    private sa.lib.gui.bean.SBeanFieldDate moDate;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalHexCm;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalHexLts;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalKilosP1;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalKilosP2;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalMisCm;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalMisLts;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalMixPer;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalProcQtyP1;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalProcQtyP2;
    private sa.lib.gui.bean.SBeanFieldKey moKeyBatchP1;
    private sa.lib.gui.bean.SBeanFieldKey moKeyBatchP2;
    private sa.lib.gui.bean.SBeanFieldKey moKeyMixWah;
    private sa.lib.gui.bean.SBeanFieldKey moKeyRawMaterialP1;
    private sa.lib.gui.bean.SBeanFieldKey moKeyRawMaterialP2;
    private sa.lib.gui.bean.SBeanFieldText moTextPlant1;
    private sa.lib.gui.bean.SBeanFieldText moTextPlant2;
    private sa.lib.gui.bean.SBeanFieldText moTextUnitP1;
    private sa.lib.gui.bean.SBeanFieldText moTextUnitP2;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 900, 572);

        // Seccion pricipal
        moDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate), true);
        moBoolSend.setBooleanSettings(SGuiUtils.getLabelName(moBoolSend.getText()), false);
        moKeyMixWah.setKeySettings(miClient, SGuiUtils.getLabelName(jlMixWah), true);
        moDecimalMixPer.setDecimalSettings(SGuiUtils.getLabelName(jlMixPer), SGuiConsts.GUI_TYPE_DEC_PER, true);
        
        // Planta 1
        
        moTextPlant1.setTextSettings(SGuiUtils.getLabelName(jlPlant1), 50);
        moBoolWithoutProdP1.setBooleanSettings(SGuiUtils.getLabelName(moBoolWithoutProdP1.getText()), false);
        moKeyRawMaterialP1.setKeySettings(miClient, SGuiUtils.getLabelName(jlRawMaterialP1), true);
        moDecimalProcQtyP1.setDecimalSettings(SGuiUtils.getLabelName(jlProcQtyP1), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moTextUnitP1.setTextSettings(SGuiUtils.getLabelName("Unidad planta 1"), 50);
        moDecimalKilosP1.setDecimalSettings(SGuiUtils.getLabelName(jlKilosP1), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moKeyBatchP1.setKeySettings(miClient, SGuiUtils.getLabelName(jlBatchP1), true);
        
        // Planta 2
        
        moTextPlant2.setTextSettings(SGuiUtils.getLabelName(jlPlant2), 50);
        moBoolWithoutProdP2.setBooleanSettings(SGuiUtils.getLabelName(moBoolWithoutProdP2.getText()), false);
        moKeyRawMaterialP2.setKeySettings(miClient, SGuiUtils.getLabelName(jlRawMaterialP2), true);
        moDecimalProcQtyP2.setDecimalSettings(SGuiUtils.getLabelName(jlProcQtyP2), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moTextUnitP2.setTextSettings(SGuiUtils.getLabelName("Unidad planta 2"), 50);
        moDecimalKilosP2.setDecimalSettings(SGuiUtils.getLabelName(jlKilosP2), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moKeyBatchP2.setKeySettings(miClient, SGuiUtils.getLabelName(jlBatchP2), true);
        
        // Consumibles
        
        moDecimalMisCm.setDecimalSettings(SGuiUtils.getLabelName(jlWahMis), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moDecimalMisLts.setDecimalSettings(SGuiUtils.getLabelName(jlMis), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moDecimalHexCm.setDecimalSettings(SGuiUtils.getLabelName(jlWahName), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moDecimalHexLts.setDecimalSettings(SGuiUtils.getLabelName(jlHex), SGuiConsts.GUI_TYPE_DEC_QTY, true);

        moFields.addField(moDate);
        moFields.addField(moBoolSend);
        moFields.addField(moKeyMixWah);
        moFields.addField(moDecimalMixPer);
        moFields.addField(moTextPlant1);
        moFields.addField(moBoolWithoutProdP1);
        moFields.addField(moKeyRawMaterialP1);
        moFields.addField(moDecimalProcQtyP1);
        moFields.addField(moTextUnitP1);
        moFields.addField(moDecimalKilosP1);
        moFields.addField(moKeyBatchP1);
        moFields.addField(moTextPlant2);
        moFields.addField(moBoolWithoutProdP2);
        moFields.addField(moKeyRawMaterialP2);
        moFields.addField(moDecimalProcQtyP2);
        moFields.addField(moTextUnitP2);
        moFields.addField(moDecimalKilosP2);
        moFields.addField(moKeyBatchP2);
        moFields.addField(moDecimalMisCm);
        moFields.addField(moDecimalMisLts);
        moFields.addField(moDecimalHexCm);
        moFields.addField(moDecimalHexLts);
        moFields.setFormButton(jbSave);
        
        jbEdit.setVisible(false);
        jbReadInfo.setVisible(false);
    }

    private void readFunctionalAreas() {
        try {
            maFunctionalAreas = new ArrayList<>();
            String sql = "SELECT id_func_area FROM su_func_area " +
                    "WHERE plant <> 0 " +
                    "ORDER BY plant;";
            ResultSet resultSet = miClient.getSession().getDatabase().getConnection().createStatement().executeQuery(sql);
            while (resultSet.next()) {
                SDbFunctionalArea funcArea = new SDbFunctionalArea();
                funcArea.read(miClient.getSession(), new int[] { resultSet.getInt(1) });
                maFunctionalAreas.add(funcArea);
            }
        }
        catch(Exception e) {
        }
    }
    
    private void readConsumableWarehouses() {
        try {
            maConsumableWarehouses = new ArrayList<>();
            String sql = "SELECT id_cons_wah FROM su_cons_wah ORDER BY id_cons_wah;";
            ResultSet resultSet = miClient.getSession().getDatabase().getConnection().createStatement().executeQuery(sql);
            while (resultSet.next()) {
                SDbConsumableWarehouse consWah = new SDbConsumableWarehouse();
                consWah.read(miClient.getSession(), new int[] { resultSet.getInt(1) });
                maConsumableWarehouses.add(consWah);
            }
        }
        catch(Exception e){
        }
    }
    
    private void actionKeyMixWah() {
        try {
            String sql = "SELECT " +
                    "w.code AS tanque, " +
                    "i.name AS item, " +
                    "s.stock AS existencias " +
                    "FROM s_stk_record AS s " +
                    "INNER JOIN su_item AS i ON s.id_item = i.id_item " +
                    "INNER JOIN cu_wah AS w ON s.id_co = w.id_co AND s.id_cob = w.id_cob AND s.id_wah = w.id_wah " +
                    "WHERE s.dt = (SELECT ADDDATE('" + SLibUtils.DbmsDateFormatDate.format(moDate.getValue()) + "' , -1)) " +
                    "AND s.id_co = " + moKeyMixWah.getValue()[0] + " " +
                    "AND s.id_cob = " + moKeyMixWah.getValue()[1] + " " +
                    "AND s.id_wah = " + moKeyMixWah.getValue()[2] + ";";
            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);

            if (resultSet.next()) {
                jlMixWahItem.setText(resultSet.getString("item") + " (" + resultSet.getDouble("existencias") + "kg)");
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void actionRawMaterialP1() {
        SGuiParams params = new SGuiParams();
        params.getParamsMap().put(SModConsts.SU_ITEM, moKeyRawMaterialP1.getValue());
        miClient.getSession().populateCatalogue(moKeyBatchP1, SModConsts.S_PRC_BATCH, SLibConsts.UNDEFINED, params);
    }
    
    private void actionRawMaterialP2() {
        SGuiParams params = new SGuiParams();
        params.getParamsMap().put(SModConsts.SU_ITEM, moKeyRawMaterialP2.getValue());
        miClient.getSession().populateCatalogue(moKeyBatchP2, SModConsts.S_PRC_BATCH, SLibConsts.UNDEFINED, params);
    }
    
    private void actionContinue() {
        try {
            readFunctionalAreas();
            int idStk = 0;
            String sql = "SELECT * FROM s_stk_day WHERE dt = (SELECT ADDDATE('" + SLibUtils.DbmsDateFormatDate.format(moDate.getValue()) + "', -1));";
            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
            if (resultSet.next()) {
                enableComponents(true);
                sql = "SELECT * FROM s_stk_report WHERE dt = (SELECT ADDDATE('" + SLibUtils.DbmsDateFormatDate.format(moDate.getValue()) + "', -1));";
                ResultSet resultSetRep = miClient.getSession().getDatabase().getConnection().createStatement().executeQuery(sql);
                if (resultSetRep.next()) {
                    idStk = resultSetRep.getInt("id_stk_report");
                    moKeyMixWah.setValue(new int[] { 
                        resultSetRep.getInt("fk_mix_wah_co"), 
                        resultSetRep.getInt("fk_mix_wah_cob"),
                        resultSetRep.getInt("fk_mix_wah_wah")
                    });
                    moDecimalMixPer.setValue(resultSetRep.getDouble("mix_per"));
                    actionKeyMixWah();
                }
            }
            else {
                miClient.showMsgBoxError("No hay estimación de la produccion para la fecha seleccionada.");
            }
            if (idStk != 0) {
                SDbStockReport lastStkRep = new SDbStockReport();
                lastStkRep.read(miClient.getSession(), new int[] { idStk });
                for (SDbProcessingRawMaterials prm : lastStkRep.getProcessingRawMaterials()) {
                    if (SLibUtils.compareKeys(new int[] { prm.getFkFunctionalAreaId() }, maFunctionalAreas.get(0).getPrimaryKey())) {
                        moKeyRawMaterialP1.setValue(new int[] { prm.getFkItemId() });
                        actionRawMaterialP1();
                        moTextUnitP1.setValue(prm.getProcessingUnitName());
                        moKeyBatchP1.setValue(new int[] { prm.getFkProcessingBatchId() });
                    }
                    if (SLibUtils.compareKeys(new int[] { prm.getFkFunctionalAreaId() }, maFunctionalAreas.get(1).getPrimaryKey())) {
                        moKeyRawMaterialP2.setValue(new int[] { prm.getFkItemId() });
                        actionRawMaterialP2();
                        moTextUnitP2.setValue(prm.getProcessingUnitName());
                        moKeyBatchP2.setValue(new int[] { prm.getFkProcessingBatchId() });
                    }
                }
            }
        }
        catch (Exception e) {
        }
    }
    
    private void actionPrcBatch() {
        miClient.getSession().showForm(SModConsts.S_PRC_BATCH, SLibConsts.UNDEFINED, null);
        SGuiParams params = new SGuiParams();
        if (moKeyBatchP1.getSelectedIndex() > 0) {
            params.getParamsMap().put(SModConsts.SU_ITEM, moKeyRawMaterialP1.getValue());
            miClient.getSession().populateCatalogue(moKeyBatchP1, SModConsts.S_PRC_BATCH, SLibConsts.UNDEFINED, params);
        }
        if (moKeyBatchP2.getSelectedIndex() > 0) {
            params.getParamsMap().clear();
            params.getParamsMap().put(SModConsts.SU_ITEM, moKeyRawMaterialP2.getValue());
            miClient.getSession().populateCatalogue(moKeyBatchP2, SModConsts.S_PRC_BATCH, SLibConsts.UNDEFINED, params);
        }
    }
    
    private void actionWithoutProdP1() {
        moKeyRawMaterialP1.setEnabled(!moBoolWithoutProdP1.isSelected());
        moDecimalProcQtyP1.setEnabled(!moBoolWithoutProdP1.isSelected());
        moKeyBatchP1.setEnabled(!moBoolWithoutProdP1.isSelected());
    }
    
    private void actionWithoutProdP2() {
        moKeyRawMaterialP2.setEnabled(!moBoolWithoutProdP2.isSelected());
        moDecimalProcQtyP2.setEnabled(!moBoolWithoutProdP2.isSelected());
        moKeyBatchP2.setEnabled(!moBoolWithoutProdP2.isSelected());
    }
    
    private void actionProcQtyP1() {
        moDecimalKilosP1.setValue(moDecimalProcQtyP1.getValue() * maFunctionalAreas.get(0).getProcessingKgFactor());
    }

    private void actionProcQtyP2() {
        moDecimalKilosP2.setValue(moDecimalProcQtyP2.getValue() * maFunctionalAreas.get(1).getProcessingKgFactor());
    }

    private void actionCalculateVolume(int cons) {
        double volume;
        if (cons == MISTELLA) {
            double misCm = moDecimalMisCm.getValue();
            volume = (Math.PI * Math.pow(152.5,2) * 566 / 1000 - (Math.pow(152.5,2) * Math.acos((misCm - 152.5) / 152.5) - (misCm - 152.5) * 152.5 * Math.sin(Math.acos((misCm - 152.5) / 152.5))) * 566/1000) * 0.7; 
            moDecimalMisLts.setValue(volume);
        }
        else if (cons == HEXANO) {
            double hexCm = moDecimalHexCm.getValue();
            volume = (Math.PI * Math.pow(152.5,2) * 566 / 1000 - (Math.pow(152.5,2) * Math.acos((hexCm - 152.5) / 152.5) - (hexCm - 152.5) * 152.5 * Math.sin(Math.acos((hexCm - 152.5) / 152.5))) * 566/1000); 
            moDecimalHexLts.setValue(volume);
        }
    }
    
    private void enableComponents(boolean enable) {
        moDate.setEnabled(!enable);
        moKeyMixWah.setEnabled(enable);
        moKeyRawMaterialP1.setEnabled(enable);
        moKeyRawMaterialP2.setEnabled(enable);
        moKeyBatchP1.setEnabled(enable);
        moKeyBatchP2.setEnabled(enable);
        moDecimalMixPer.setEnabled(enable);
        moBoolWithoutProdP1.setEnabled(enable);
        moDecimalProcQtyP1.setEnabled(enable);
        moBoolWithoutProdP2.setEnabled(enable);
        moDecimalProcQtyP2.setEnabled(enable);
        moDecimalMisCm.setEnabled(enable);
        moDecimalHexCm.setEnabled(enable);
    }

    @Override
    public void addAllListeners() {
        moKeyMixWah.addItemListener(this);
        moKeyRawMaterialP1.addItemListener(this);
        moKeyRawMaterialP2.addItemListener(this);
        jbContinue.addActionListener(this);
        jbPrcBatch1.addActionListener(this);
        jbPrcBatch2.addActionListener(this);
        moBoolWithoutProdP1.addChangeListener(this);
        moBoolWithoutProdP2.addChangeListener(this);
        moDecimalProcQtyP1.addFocusListener(this);
        moDecimalProcQtyP2.addFocusListener(this);
        moDecimalMisCm.addFocusListener(this);
        moDecimalHexCm.addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        moKeyMixWah.removeItemListener(this);
        moKeyRawMaterialP1.removeItemListener(this);
        moKeyRawMaterialP2.removeItemListener(this);
        jbContinue.removeActionListener(this);
        jbPrcBatch1.removeActionListener(this);
        jbPrcBatch2.removeActionListener(this);
        moBoolWithoutProdP1.removeChangeListener(this);
        moBoolWithoutProdP2.removeChangeListener(this);
        moDecimalProcQtyP1.removeFocusListener(this);
        moDecimalProcQtyP2.removeFocusListener(this);
        moDecimalMisCm.removeFocusListener(this);
        moDecimalHexCm.removeFocusListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyMixWah, SModConsts.CU_WAH, SLibConsts.UNDEFINED, null);
        
        SGuiParams params = new SGuiParams();
        params.getParamsMap().put(SModConsts.SU_INP_CT, new int[] { maFunctionalAreas.get(0).getFkInputCategoryId_n() });
        miClient.getSession().populateCatalogue(moKeyRawMaterialP1, SModConsts.SU_ITEM, SLibConsts.UNDEFINED, params);
        
        params.getParamsMap().clear();
        params.getParamsMap().put(SModConsts.SU_INP_CT, new int[] { maFunctionalAreas.get(1).getFkInputCategoryId_n() });
        miClient.getSession().populateCatalogue(moKeyRawMaterialP2, SModConsts.SU_ITEM, SLibConsts.UNDEFINED, params);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbStockReport) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        readFunctionalAreas();
        readConsumableWarehouses();
        reloadCatalogues();
        
        moBoolWithoutProdP1.setValue(false);
        moBoolWithoutProdP2.setValue(false);
        jlMixWahItem.setText("");
        moTextPlant1.setText("");
        moTextPlant2.setText("");
        moTextUnitP1.setText("");
        moTextUnitP2.setText("");
        moDecimalProcQtyP1.setValue(0.0);
        moDecimalProcQtyP2.setValue(0.0);
        moDecimalKilosP1.setValue(0.0);
        moDecimalKilosP2.setValue(0.0);
        moDecimalMisCm.setValue(0.0);
        moDecimalMisLts.setValue(0.0);
        moDecimalHexCm.setValue(0.0);
        moDecimalHexLts.setValue(0.0);

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
            moDate.setValue(miClient.getSession().getWorkingDate());
            jbContinue.setEnabled(true);
            enableComponents(false);
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
            moDate.setValue(moRegistry.getDate());
            jbContinue.setEnabled(false);
            enableComponents(true);
        }

        moKeyMixWah.setValue(new int[]{ 
            moRegistry.getFkMixingWarehouseCompanyId(), 
            moRegistry.getFkMixingWarehouseBranchId(), 
            moRegistry.getFkMixingWarehouseWarehouseId() });
        moDecimalMixPer.setValue(moRegistry.getMixingPercentage());
        
        if (!moRegistry.isRegistryNew()) actionKeyMixWah();
        
        moTextPlant1.setText(maFunctionalAreas.get(0).getName());
        moTextUnitP1.setText(maFunctionalAreas.get(0).getProcessingUnitName());
        moTextPlant2.setText(maFunctionalAreas.get(1).getName());
        moTextUnitP2.setText(maFunctionalAreas.get(1).getProcessingUnitName());
        
        for (SDbProcessingRawMaterials prm : moRegistry.getProcessingRawMaterials()) { 
            if (SLibUtils.compareKeys(new int[] { prm.getFkFunctionalAreaId() }, maFunctionalAreas.get(0).getPrimaryKey())) {
                moKeyRawMaterialP1.setValue(new int[] { prm.getFkItemId() });
                actionRawMaterialP1();
                moDecimalProcQtyP1.setValue(prm.getProcessedUnits());
                moTextUnitP1.setValue(prm.getProcessingUnitName());
                moDecimalKilosP1.setValue(prm.getProcessedKg());
                moKeyBatchP1.setValue(new int[] { prm.getFkProcessingBatchId() });
            }
            if (SLibUtils.compareKeys(new int[] { prm.getFkFunctionalAreaId() }, maFunctionalAreas.get(1).getPrimaryKey())) {
                moKeyRawMaterialP2.setValue(new int[] { prm.getFkItemId() });
                actionRawMaterialP2();
                moDecimalProcQtyP2.setValue(prm.getProcessedUnits());
                moTextUnitP2.setValue(prm.getProcessingUnitName());
                moDecimalKilosP2.setValue(prm.getProcessedKg());
                moKeyBatchP2.setValue(new int[] { prm.getFkProcessingBatchId() });
            }
        }
        
        for (SDbConsumableRecord cr : moRegistry.getConsumableRecords()) {
            if (SLibUtils.compareKeys(new int[] { cr.getFkConsumableWahId() }, maConsumableWarehouses.get(0).getPrimaryKey())) {
                moDecimalMisCm.setValue(cr.getMeasure());
                moDecimalMisLts.setValue(cr.getVolume());
            }
            if (SLibUtils.compareKeys(new int[] { cr.getFkConsumableWahId() }, maConsumableWarehouses.get(1).getPrimaryKey())) {
                moDecimalHexCm.setValue(cr.getMeasure());
                moDecimalHexLts.setValue(cr.getVolume());
            }
        }
        
        //setFormEditable(true);
        
        addAllListeners();
        actionWithoutProdP1();
        actionWithoutProdP2();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbStockReport registry = moRegistry.clone();

        if (registry.isRegistryNew()) { }
        registry.setDate(moDate.getValue());
        registry.setMixingPercentage(moDecimalMixPer.getValue());
        registry.setFkMixingWarehouseCompanyId(moKeyMixWah.getValue()[0]);
        registry.setFkMixingWarehouseBranchId(moKeyMixWah.getValue()[1]);
        registry.setFkMixingWarehouseWarehouseId(moKeyMixWah.getValue()[2]);
        
        registry.getProcessingRawMaterials().clear();
        if (!moBoolWithoutProdP1.isSelected()) {
            SDbProcessingRawMaterials rawMaterial = new SDbProcessingRawMaterials();
            rawMaterial.setProcessingUnitName(moTextUnitP1.getValue());
            rawMaterial.setProcessedUnits(moDecimalProcQtyP1.getValue());
            rawMaterial.setProcessedKg(moDecimalKilosP1.getValue());
            rawMaterial.setFkFunctionalAreaId(maFunctionalAreas.get(0).getPkFunctionalAreaId());
            rawMaterial.setFkItemId(moKeyRawMaterialP1.getValue()[0]);
            rawMaterial.setFkProcessingBatchId(moKeyBatchP1.getValue()[0]);
            registry.getProcessingRawMaterials().add(rawMaterial);
        }
        if (!moBoolWithoutProdP2.isSelected()) {
            SDbProcessingRawMaterials rawMaterial = new SDbProcessingRawMaterials();
            rawMaterial.setProcessingUnitName(moTextUnitP2.getValue());
            rawMaterial.setProcessedUnits(moDecimalProcQtyP2.getValue());
            rawMaterial.setProcessedKg(moDecimalKilosP2.getValue());
            rawMaterial.setFkFunctionalAreaId(maFunctionalAreas.get(1).getPkFunctionalAreaId());
            rawMaterial.setFkItemId(moKeyRawMaterialP2.getValue()[0]);
            rawMaterial.setFkProcessingBatchId(moKeyBatchP2.getValue()[0]);
            registry.getProcessingRawMaterials().add(rawMaterial);
        }
        
        registry.getConsumableRecords().clear();
        SDbConsumableRecord cr1 = new SDbConsumableRecord();
        cr1.setMeasure(moDecimalMisCm.getValue());
        cr1.setVolume(moDecimalMisLts.getValue());
        cr1.setFkConsumableWahId(maConsumableWarehouses.get(0).getPkConsumableWarehouseId());
        SDbConsumableRecord cr2 = new SDbConsumableRecord();
        cr2.setMeasure(moDecimalHexCm.getValue());
        cr2.setVolume(moDecimalHexLts.getValue());
        cr2.setFkConsumableWahId(maConsumableWarehouses.get(1).getPkConsumableWarehouseId());
        registry.getConsumableRecords().add(cr1);
        registry.getConsumableRecords().add(cr2);
        
        registry.setAuxSendMails(moBoolSend.getValue());
        
        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        return validation;
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox) {
            JComboBox comboBox = (JComboBox) e.getSource();
            
            if (comboBox == moKeyMixWah) {
                actionKeyMixWah();
            }
            else if (comboBox == moKeyRawMaterialP1) {
                actionRawMaterialP1();
            }
            else if (comboBox == moKeyRawMaterialP2) {
                actionRawMaterialP2();
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbContinue) {
                actionContinue();
            }
            else if (button == jbPrcBatch1) {
                actionPrcBatch();
            }
            else if (button == jbPrcBatch2) {
                actionPrcBatch();
            }
        }
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        if (e.getSource() instanceof JCheckBox) {
            JCheckBox checkBox = (JCheckBox) e.getSource();
            
            if (checkBox == moBoolWithoutProdP1) {
                actionWithoutProdP1();
            }
            else if (checkBox == moBoolWithoutProdP2) {
                actionWithoutProdP2();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof JTextField) {
            JTextField textField = (JTextField) e.getSource();
            
            if (textField == moDecimalProcQtyP1) {
                actionProcQtyP1();
            }
            else if (textField == moDecimalProcQtyP2) {
                actionProcQtyP2();
            }
            else if (textField == moDecimalMisCm) {
                actionCalculateVolume(MISTELLA);
            }
            else if (textField == moDecimalHexCm) {
                actionCalculateVolume(HEXANO);
            }
        }
    }
}
