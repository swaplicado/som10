/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanDialogReport;
import som.gui.SGuiClientSessionCustom;
import som.gui.prt.SPrtUtils;
import som.mod.SModConsts;

/**
 *
 * @author Néstor Ávalos
 */
public class SDialogRepStock extends SBeanDialogReport {

    /**
     * Creates new form SDialogRepStock
     */
    public SDialogRepStock(SGuiClient client, String title, int formSubtype) {
        setFormSettings(client, SModConsts.SR_STK, formSubtype, title);

        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jlDateCut = new javax.swing.JLabel();
        moDateCut = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel6 = new javax.swing.JPanel();
        jlBranch = new javax.swing.JLabel();
        moKeyBranch = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel7 = new javax.swing.JPanel();
        jlWarehouse = new javax.swing.JLabel();
        moKeyWarehouse = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel30 = new javax.swing.JPanel();
        jlDivision = new javax.swing.JLabel();
        moKeyDivision = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel8 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moKeyItem = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel9 = new javax.swing.JPanel();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros del reporte:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(7, 1, 0, 5));

        jPanel12.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlDateCut.setText("Fecha corte:*");
        jlDateCut.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlDateCut);
        jPanel12.add(moDateCut);

        jPanel2.add(jPanel12);

        jPanel6.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlBranch.setText("Sucursal: *");
        jlBranch.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlBranch);

        moKeyBranch.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel6.add(moKeyBranch);

        jPanel2.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlWarehouse.setText("Almacén:");
        jlWarehouse.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlWarehouse);

        moKeyWarehouse.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel7.add(moKeyWarehouse);

        jPanel2.add(jPanel7);

        jPanel30.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlDivision.setText("División:");
        jlDivision.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel30.add(jlDivision);

        moKeyDivision.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel30.add(moKeyDivision);

        jPanel2.add(jPanel30);

        jPanel8.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlItem.setText("Ítem:");
        jlItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlItem);

        moKeyItem.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel8.add(moKeyItem);

        jPanel2.add(jPanel8);
        jPanel2.add(jPanel9);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jlBranch;
    private javax.swing.JLabel jlDateCut;
    private javax.swing.JLabel jlDivision;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlWarehouse;
    private sa.lib.gui.bean.SBeanFieldDate moDateCut;
    private sa.lib.gui.bean.SBeanFieldKey moKeyBranch;
    private sa.lib.gui.bean.SBeanFieldKey moKeyDivision;
    private sa.lib.gui.bean.SBeanFieldKey moKeyItem;
    private sa.lib.gui.bean.SBeanFieldKey moKeyWarehouse;
    // End of variables declaration//GEN-END:variables

    /*
    * Private methods
    */

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 400, 250);

        moDateCut.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateCut.getText()), true);
        moKeyBranch.setKeySettings(miClient, SGuiUtils.getLabelName(jlBranch.getText()), true);
        moKeyWarehouse.setKeySettings(miClient, SGuiUtils.getLabelName(jlWarehouse.getText()), false);
        moKeyDivision.setKeySettings(miClient, SGuiUtils.getLabelName(jlDivision.getText()), false);
        moKeyItem.setKeySettings(miClient, SGuiUtils.getLabelName(jlItem.getText()), false);

        moFields.addField(moDateCut);
        moFields.addField(moKeyBranch);
        moFields.addField(moKeyWarehouse);
        moFields.addField(moKeyDivision);
        moFields.addField(moKeyItem);

        moFields.setFormButton(jbPrint);

        moDateCut.setValue(SLibTimeUtils.getEndOfYear(miClient.getSession().getWorkingDate()));

        reloadCatalogues();
        moKeyBranch.setValue(((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getCompany().getChildBranches().get(0).getPrimaryKey());
        jlBranch.setEnabled(false);
        moKeyBranch.setEnabled(false);
    }

    private void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyItem, SModConsts.SU_ITEM, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyBranch, SModConsts.CU_COB, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyWarehouse, SModConsts.CU_WAH, SLibConsts.UNDEFINED, new SGuiParams(((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getCompany().getChildBranches().get(0).getPrimaryKey()));
        miClient.getSession().populateCatalogue(moKeyDivision, SModConsts.CU_DIV, SLibConsts.UNDEFINED, null);
    }

    private boolean showWarehouses() {
        return mnFormSubtype == SModConsts.SX_STK_WAH_WAH ||
                mnFormSubtype == SModConsts.SX_STK_WAH_DIV;
    }

    private boolean showDivision() {
        return mnFormSubtype == SModConsts.SX_STK_DIV ||
                mnFormSubtype == SModConsts.SX_STK_WAH_DIV;
    }

    /*
    * Public methods
    */

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        return validation;
    }

    @Override
    public void createParamsMap() {
        String sqlItem;
        String sqlWarehouse;
        String sqlGroupBy;
        String sqlHaving;
        String sqlOrderBy;
        moParamsMap = SPrtUtils.createReportParamsMap(miClient.getSession());

        sqlGroupBy = "GROUP BY s.id_item, s.id_unit, "
                + (!showWarehouses() ? "" : "s.id_co, s.id_cob, s.id_wah, wa.code, wa.name, ")
                + (!showDivision() ? "" : "s.id_div, d.code, d.name, ")
                + "i.code, i.name, u.code ";
        sqlOrderBy = "ORDER BY i.name, i.code, s.id_item, u.code, s.id_unit "
                + (!showWarehouses() ? "" : ", wa.code, wa.name, s.id_co, s.id_cob, s.id_wah ")
                + (!showDivision() ? "" : ", d.code, d.name, s.id_div ");

        sqlHaving = "HAVING f_stk <> 0 ";

        sqlWarehouse = " AND s.id_co = " + moKeyBranch.getValue()[0];
        sqlWarehouse += (moKeyBranch.getSelectedIndex() > 0 ? " AND s.id_cob = " + moKeyBranch.getValue()[1] : "");
        sqlWarehouse += (moKeyWarehouse.getSelectedIndex() > 0 ? " AND s.id_wah = " + moKeyWarehouse.getValue()[2] : "");
        sqlWarehouse += (moKeyDivision.getSelectedIndex() > 0 ? " AND s.id_div = " + moKeyDivision.getValue()[0] : "");
        sqlItem = (moKeyItem.getSelectedIndex() > 0 ? " AND s.id_item = " + moKeyItem.getValue()[0] + " AND s.id_unit = " +
                moKeyItem.getSelectedItem().getForeignKey()[0]: "");

        moParamsMap.put("sCompanyBranch", moKeyBranch.getSelectedItem().getItem());
        moParamsMap.put("sWarehouse", moKeyWarehouse.getSelectedIndex() > 0 ? moKeyWarehouse.getSelectedItem().getItem() : "TODOS");
        moParamsMap.put("sDivision", moKeyDivision.getSelectedIndex() > 0 ? moKeyDivision.getSelectedItem().getItem() : "TODAS");
        moParamsMap.put("sItem", moKeyItem.getSelectedIndex() > 0 ? moKeyItem.getSelectedItem().getItem() : "TODOS");
        moParamsMap.put("nPkYearId", SLibTimeUtils.digestYear(moDateCut.getValue())[0]);
        moParamsMap.put("tDateCut", moDateCut.getValue());
        moParamsMap.put("sSqlItem", sqlItem);
        moParamsMap.put("sSqlWarehouse", sqlWarehouse);
        moParamsMap.put("bIsWarehouse", showWarehouses());
        moParamsMap.put("bIsDivision", showDivision());
        moParamsMap.put("sSqlGroupBy", sqlGroupBy);
        moParamsMap.put("sSqlHaving", sqlHaving);
        moParamsMap.put("sSqlOrderBy", sqlOrderBy);
        moParamsMap.put("sTitle", showWarehouses() ? showDivision() ? "Existencias por almacén, división" : "Existencias por almacén" :
                showDivision() ? "Existencias por división" : "Existencias");
    }
}
