/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridPaneFormOwner;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;
import som.mod.SModConsts;
import som.mod.som.db.SDbWahLab;
import som.mod.som.db.SDbWahLabTest;

/**
 *
 * @author Isabel Servín
 */
public class SFormWahLab extends SBeanForm implements SGridPaneFormOwner, ActionListener, ListSelectionListener, FocusListener {

    private SDbWahLab moRegistry;
    private ArrayList<SDbWahLabTest> maWahLabTests;
    private SGridPaneForm moGridWahList;
    
    private SFormWahLabTest moFormWahLabTest;
    private SDialogAllWahLabTest moDialogAllWahLabTest;

    private final boolean mbWithLastTests;
    
    /**
     * Creates new form SFormLaboratory
     * @param client
     * @param title
     * @param withLastTests
     */
    public SFormWahLab(SGuiClient client, String title, boolean withLastTests) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.S_WAH_LAB, SLibConsts.UNDEFINED, title);
        mbWithLastTests = withLastTests;
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jlCurDateTest = new javax.swing.JLabel();
        jlLastDateTest = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel();
        jlCaptureDate = new javax.swing.JLabel();
        moDateCaptureDate = new sa.lib.gui.bean.SBeanFieldDate();
        moBoolDone = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel19 = new javax.swing.JPanel();
        jlCurYearTest = new javax.swing.JLabel();
        moYearCurYearTest = new sa.lib.gui.bean.SBeanFieldCalendarYear();
        jlCurWeekTest = new javax.swing.JLabel();
        moWeekCurWeekTest = new sa.lib.gui.bean.SBeanFieldCalendarWeek();
        jlSpace = new javax.swing.JLabel();
        jlLastYearTest = new javax.swing.JLabel();
        moYearLastYearTest = new sa.lib.gui.bean.SBeanFieldCalendarYear();
        jlLastWeekTest = new javax.swing.JLabel();
        moWeekLastWeekTest = new sa.lib.gui.bean.SBeanFieldCalendarWeek();
        jPanel20 = new javax.swing.JPanel();
        jlCurStartDateTest = new javax.swing.JLabel();
        moDateCurStartDateTest = new sa.lib.gui.bean.SBeanFieldDate();
        jlCurEndDateTest = new javax.swing.JLabel();
        moDateCurEndDateTest = new sa.lib.gui.bean.SBeanFieldDate();
        jlSpace2 = new javax.swing.JLabel();
        jlLastStartDateTest = new javax.swing.JLabel();
        moDateLastStartDateTest = new sa.lib.gui.bean.SBeanFieldDate();
        jlLastEndDateTest = new javax.swing.JLabel();
        moDateLastEndDateTest = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel30 = new javax.swing.JPanel();
        jbContinue = new javax.swing.JButton();
        jbRestart = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jpTest = new javax.swing.JPanel();
        jPanel31 = new javax.swing.JPanel();
        jbUp = new javax.swing.JButton();
        jbDown = new javax.swing.JButton();
        jPanel17 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jlTypeTest = new javax.swing.JLabel();
        jlOutOfRange = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        jlCurAciPer = new javax.swing.JLabel();
        moTextCurAciPer = new sa.lib.gui.bean.SBeanFieldText();
        moBoolCurAciPerOverange = new sa.lib.gui.bean.SBeanFieldBoolean();
        jlCurPerInd = new javax.swing.JLabel();
        moTextCurPerInd = new sa.lib.gui.bean.SBeanFieldText();
        moBoolCurPerIndOverange = new sa.lib.gui.bean.SBeanFieldBoolean();
        jlCurMoiPer = new javax.swing.JLabel();
        moTextCurMoiPer = new sa.lib.gui.bean.SBeanFieldText();
        moBoolCurMoiPerOverange = new sa.lib.gui.bean.SBeanFieldBoolean();
        jlCurSolPer = new javax.swing.JLabel();
        moTextCurSolPer = new sa.lib.gui.bean.SBeanFieldText();
        moBoolCurSolPerOverange = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel15 = new javax.swing.JPanel();
        jlScale16 = new javax.swing.JLabel();
        jPanel22 = new javax.swing.JPanel();
        jlCurLinPer = new javax.swing.JLabel();
        moTextCurLinPer = new sa.lib.gui.bean.SBeanFieldText();
        moBoolCurLinPerOverange = new sa.lib.gui.bean.SBeanFieldBoolean();
        jlCurOlePer = new javax.swing.JLabel();
        moTextCurOlePer = new sa.lib.gui.bean.SBeanFieldText();
        moBoolCurOlePerOverange = new sa.lib.gui.bean.SBeanFieldBoolean();
        jlCurLlcPer = new javax.swing.JLabel();
        moTextCurLlcPer = new sa.lib.gui.bean.SBeanFieldText();
        moBoolCurLlcPerOverange = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel23 = new javax.swing.JPanel();
        jlCurStePer = new javax.swing.JLabel();
        moTextCurStePer = new sa.lib.gui.bean.SBeanFieldText();
        moBoolCurStePerOverange = new sa.lib.gui.bean.SBeanFieldBoolean();
        jlCurPalPer = new javax.swing.JLabel();
        moTextCurPalPer = new sa.lib.gui.bean.SBeanFieldText();
        moBoolCurPalPerOverange = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel24 = new javax.swing.JPanel();
        jlCurNotes = new javax.swing.JLabel();
        moTextCurNotes = new sa.lib.gui.bean.SBeanFieldText();
        jbSaveRow = new javax.swing.JButton();
        jbSaveAndNextRow = new javax.swing.JButton();
        jbEditTest = new javax.swing.JButton();
        jbErase = new javax.swing.JButton();
        jPanel16 = new javax.swing.JPanel();
        jlLastTestResults = new javax.swing.JLabel();
        jPanel25 = new javax.swing.JPanel();
        jlLastAciPer = new javax.swing.JLabel();
        moTextLastAciPer = new sa.lib.gui.bean.SBeanFieldText();
        moBoolLastAciPerOverange = new sa.lib.gui.bean.SBeanFieldBoolean();
        jlLastPerInd = new javax.swing.JLabel();
        moTextLastPerInd = new sa.lib.gui.bean.SBeanFieldText();
        moBoolLastPerIndOverange = new sa.lib.gui.bean.SBeanFieldBoolean();
        jlLastMoiPer = new javax.swing.JLabel();
        moTextLastMoiPer = new sa.lib.gui.bean.SBeanFieldText();
        moBoolLastMoiPerOverange = new sa.lib.gui.bean.SBeanFieldBoolean();
        jlLastSolPer = new javax.swing.JLabel();
        moTextLastSolPer = new sa.lib.gui.bean.SBeanFieldText();
        moBoolLastSolPerOverange = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel26 = new javax.swing.JPanel();
        jlLastLinPer = new javax.swing.JLabel();
        moTextLastLinPer = new sa.lib.gui.bean.SBeanFieldText();
        moBoolLastLinPerOverange = new sa.lib.gui.bean.SBeanFieldBoolean();
        jlLastOlePer = new javax.swing.JLabel();
        moTextLastOlePer = new sa.lib.gui.bean.SBeanFieldText();
        moBoolLastOlePerOverange = new sa.lib.gui.bean.SBeanFieldBoolean();
        jlLastLlcPer = new javax.swing.JLabel();
        moTextLastLlcPer = new sa.lib.gui.bean.SBeanFieldText();
        moBoolLastLlcPerOverange = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel27 = new javax.swing.JPanel();
        jlLastStePer = new javax.swing.JLabel();
        moTextLastStePer = new sa.lib.gui.bean.SBeanFieldText();
        moBoolLastStePerOverange = new sa.lib.gui.bean.SBeanFieldBoolean();
        jlLastPalPer = new javax.swing.JLabel();
        moTextLastPalPer = new sa.lib.gui.bean.SBeanFieldText();
        moBoolLastPalPerOverange = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel28 = new javax.swing.JPanel();
        jlLastNotes = new javax.swing.JLabel();
        moTextLastNotes = new sa.lib.gui.bean.SBeanFieldText();
        jPanel29 = new javax.swing.JPanel();
        jbAllTest = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Fechas de ánalisis:"));
        jPanel2.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCurDateTest.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        jlCurDateTest.setText("Análisis actual");
        jlCurDateTest.setPreferredSize(new java.awt.Dimension(435, 23));
        jPanel13.add(jlCurDateTest);

        jlLastDateTest.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        jlLastDateTest.setText("Análisis anterior");
        jlLastDateTest.setPreferredSize(new java.awt.Dimension(465, 23));
        jPanel13.add(jlLastDateTest);

        jPanel2.add(jPanel13);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCaptureDate.setText("Fecha de captura:");
        jlCaptureDate.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel18.add(jlCaptureDate);
        jPanel18.add(moDateCaptureDate);

        moBoolDone.setText("Terminado");
        moBoolDone.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel18.add(moBoolDone);

        jPanel2.add(jPanel18);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCurYearTest.setText("Año:");
        jlCurYearTest.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel19.add(jlCurYearTest);

        moYearCurYearTest.setEditable(false);
        moYearCurYearTest.setPreferredSize(new java.awt.Dimension(103, 23));
        jPanel19.add(moYearCurYearTest);

        jlCurWeekTest.setText("Semana:");
        jlCurWeekTest.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel19.add(jlCurWeekTest);

        moWeekCurWeekTest.setEditable(false);
        moWeekCurWeekTest.setPreferredSize(new java.awt.Dimension(103, 23));
        jPanel19.add(moWeekCurWeekTest);

        jlSpace.setPreferredSize(new java.awt.Dimension(20, 23));
        jPanel19.add(jlSpace);

        jlLastYearTest.setText("Año:");
        jlLastYearTest.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel19.add(jlLastYearTest);

        moYearLastYearTest.setEditable(false);
        moYearLastYearTest.setPreferredSize(new java.awt.Dimension(103, 23));
        jPanel19.add(moYearLastYearTest);

        jlLastWeekTest.setText("Semana:");
        jlLastWeekTest.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel19.add(jlLastWeekTest);

        moWeekLastWeekTest.setEditable(false);
        moWeekLastWeekTest.setPreferredSize(new java.awt.Dimension(103, 23));
        jPanel19.add(moWeekLastWeekTest);

        jPanel2.add(jPanel19);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCurStartDateTest.setText("Del:");
        jlCurStartDateTest.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel20.add(jlCurStartDateTest);

        moDateCurStartDateTest.setEditable(false);
        moDateCurStartDateTest.setEnabled(false);
        jPanel20.add(moDateCurStartDateTest);

        jlCurEndDateTest.setText("Al:");
        jlCurEndDateTest.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel20.add(jlCurEndDateTest);

        moDateCurEndDateTest.setEditable(false);
        moDateCurEndDateTest.setEnabled(false);
        jPanel20.add(moDateCurEndDateTest);

        jlSpace2.setPreferredSize(new java.awt.Dimension(20, 23));
        jPanel20.add(jlSpace2);

        jlLastStartDateTest.setText("Del:");
        jlLastStartDateTest.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel20.add(jlLastStartDateTest);

        moDateLastStartDateTest.setEditable(false);
        moDateLastStartDateTest.setEnabled(false);
        jPanel20.add(moDateLastStartDateTest);

        jlLastEndDateTest.setText("Al:");
        jlLastEndDateTest.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel20.add(jlLastEndDateTest);

        moDateLastEndDateTest.setEditable(false);
        moDateLastEndDateTest.setEnabled(false);
        jPanel20.add(moDateLastEndDateTest);

        jPanel2.add(jPanel20);

        jPanel30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbContinue.setText("Continuar");
        jbContinue.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel30.add(jbContinue);

        jbRestart.setText("Reiniciar");
        jbRestart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel30.add(jbRestart);

        jPanel2.add(jPanel30);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel6.setLayout(new java.awt.BorderLayout());

        jpTest.setBorder(javax.swing.BorderFactory.createTitledBorder("Almacenes:"));
        jpTest.setLayout(new java.awt.BorderLayout());
        jPanel6.add(jpTest, java.awt.BorderLayout.CENTER);

        jPanel31.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel31.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbUp.setText("Subir");
        jbUp.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel31.add(jbUp);

        jbDown.setText("Bajar");
        jbDown.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel31.add(jbDown);

        jPanel6.add(jPanel31, java.awt.BorderLayout.EAST);

        jPanel1.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder("Captura de resultados:"));
        jPanel17.setLayout(new java.awt.GridLayout(12, 1, 0, 1));

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTypeTest.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        jlTypeTest.setText("Fisicoquímicos");
        jlTypeTest.setPreferredSize(new java.awt.Dimension(475, 23));
        jPanel14.add(jlTypeTest);

        jlOutOfRange.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlOutOfRange.setText("FR = Fuera de rango*");
        jlOutOfRange.setPreferredSize(new java.awt.Dimension(540, 23));
        jPanel14.add(jlOutOfRange);

        jPanel17.add(jPanel14);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCurAciPer.setText("Acidez %:");
        jlCurAciPer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel21.add(jlCurAciPer);
        jPanel21.add(moTextCurAciPer);

        moBoolCurAciPerOverange.setText("FR");
        moBoolCurAciPerOverange.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel21.add(moBoolCurAciPerOverange);

        jlCurPerInd.setText("I. peróxidos:");
        jlCurPerInd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel21.add(jlCurPerInd);
        jPanel21.add(moTextCurPerInd);

        moBoolCurPerIndOverange.setText("FR");
        moBoolCurPerIndOverange.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel21.add(moBoolCurPerIndOverange);

        jlCurMoiPer.setText("Humedad %:");
        jlCurMoiPer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel21.add(jlCurMoiPer);
        jPanel21.add(moTextCurMoiPer);

        moBoolCurMoiPerOverange.setText("FR");
        moBoolCurMoiPerOverange.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel21.add(moBoolCurMoiPerOverange);

        jlCurSolPer.setText("Sólidos %:");
        jlCurSolPer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel21.add(jlCurSolPer);
        jPanel21.add(moTextCurSolPer);

        moBoolCurSolPerOverange.setText("FR");
        moBoolCurSolPerOverange.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel21.add(moBoolCurSolPerOverange);

        jPanel17.add(jPanel21);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlScale16.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        jlScale16.setText("Cromatografía");
        jlScale16.setPreferredSize(new java.awt.Dimension(475, 23));
        jPanel15.add(jlScale16);

        jPanel17.add(jPanel15);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCurLinPer.setText("Linoleico %:");
        jlCurLinPer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel22.add(jlCurLinPer);
        jPanel22.add(moTextCurLinPer);

        moBoolCurLinPerOverange.setText("FR");
        moBoolCurLinPerOverange.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel22.add(moBoolCurLinPerOverange);

        jlCurOlePer.setText("Oléico %:");
        jlCurOlePer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel22.add(jlCurOlePer);
        jPanel22.add(moTextCurOlePer);

        moBoolCurOlePerOverange.setText("FR");
        moBoolCurOlePerOverange.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel22.add(moBoolCurOlePerOverange);

        jlCurLlcPer.setText("Linolénico %:");
        jlCurLlcPer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel22.add(jlCurLlcPer);
        jPanel22.add(moTextCurLlcPer);

        moBoolCurLlcPerOverange.setText("FR");
        moBoolCurLlcPerOverange.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel22.add(moBoolCurLlcPerOverange);

        jPanel17.add(jPanel22);

        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCurStePer.setText("Esteárico %:");
        jlCurStePer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel23.add(jlCurStePer);
        jPanel23.add(moTextCurStePer);

        moBoolCurStePerOverange.setText("FR");
        moBoolCurStePerOverange.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel23.add(moBoolCurStePerOverange);

        jlCurPalPer.setText("Palmítico %:");
        jlCurPalPer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel23.add(jlCurPalPer);
        jPanel23.add(moTextCurPalPer);

        moBoolCurPalPerOverange.setText("FR");
        moBoolCurPalPerOverange.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel23.add(moBoolCurPalPerOverange);

        jPanel17.add(jPanel23);

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCurNotes.setText("Observaciones:");
        jlCurNotes.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel24.add(jlCurNotes);

        moTextCurNotes.setPreferredSize(new java.awt.Dimension(615, 23));
        jPanel24.add(moTextCurNotes);

        jbSaveRow.setText("Guardar");
        jbSaveRow.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel24.add(jbSaveRow);

        jbSaveAndNextRow.setText("Guardar y siguiente");
        jbSaveAndNextRow.setPreferredSize(new java.awt.Dimension(130, 23));
        jPanel24.add(jbSaveAndNextRow);

        jbEditTest.setText("Editar");
        jbEditTest.setPreferredSize(new java.awt.Dimension(65, 23));
        jPanel24.add(jbEditTest);

        jbErase.setText("Borrar");
        jbErase.setPreferredSize(new java.awt.Dimension(67, 23));
        jPanel24.add(jbErase);

        jPanel17.add(jPanel24);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLastTestResults.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        jlLastTestResults.setText("Resultados análisis anterior");
        jlLastTestResults.setPreferredSize(new java.awt.Dimension(475, 23));
        jPanel16.add(jlLastTestResults);

        jPanel17.add(jPanel16);

        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLastAciPer.setText("Acidez %:");
        jlLastAciPer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel25.add(jlLastAciPer);

        moTextLastAciPer.setEditable(false);
        moTextLastAciPer.setEnabled(false);
        jPanel25.add(moTextLastAciPer);

        moBoolLastAciPerOverange.setText("FR");
        moBoolLastAciPerOverange.setEnabled(false);
        moBoolLastAciPerOverange.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel25.add(moBoolLastAciPerOverange);

        jlLastPerInd.setText("I. peróxidos:");
        jlLastPerInd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel25.add(jlLastPerInd);

        moTextLastPerInd.setEditable(false);
        moTextLastPerInd.setEnabled(false);
        jPanel25.add(moTextLastPerInd);

        moBoolLastPerIndOverange.setText("FR");
        moBoolLastPerIndOverange.setEnabled(false);
        moBoolLastPerIndOverange.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel25.add(moBoolLastPerIndOverange);

        jlLastMoiPer.setText("Humedad %:");
        jlLastMoiPer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel25.add(jlLastMoiPer);

        moTextLastMoiPer.setEditable(false);
        moTextLastMoiPer.setEnabled(false);
        jPanel25.add(moTextLastMoiPer);

        moBoolLastMoiPerOverange.setText("FR");
        moBoolLastMoiPerOverange.setEnabled(false);
        moBoolLastMoiPerOverange.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel25.add(moBoolLastMoiPerOverange);

        jlLastSolPer.setText("Sólidos %:");
        jlLastSolPer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel25.add(jlLastSolPer);

        moTextLastSolPer.setEditable(false);
        moTextLastSolPer.setEnabled(false);
        jPanel25.add(moTextLastSolPer);

        moBoolLastSolPerOverange.setText("FR");
        moBoolLastSolPerOverange.setEnabled(false);
        moBoolLastSolPerOverange.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel25.add(moBoolLastSolPerOverange);

        jPanel17.add(jPanel25);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLastLinPer.setText("Linoleico %:");
        jlLastLinPer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel26.add(jlLastLinPer);

        moTextLastLinPer.setEditable(false);
        moTextLastLinPer.setEnabled(false);
        jPanel26.add(moTextLastLinPer);

        moBoolLastLinPerOverange.setText("FR");
        moBoolLastLinPerOverange.setEnabled(false);
        moBoolLastLinPerOverange.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel26.add(moBoolLastLinPerOverange);

        jlLastOlePer.setText("Oléico %:");
        jlLastOlePer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel26.add(jlLastOlePer);

        moTextLastOlePer.setEditable(false);
        moTextLastOlePer.setEnabled(false);
        jPanel26.add(moTextLastOlePer);

        moBoolLastOlePerOverange.setText("FR");
        moBoolLastOlePerOverange.setEnabled(false);
        moBoolLastOlePerOverange.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel26.add(moBoolLastOlePerOverange);

        jlLastLlcPer.setText("Linolénico %:");
        jlLastLlcPer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel26.add(jlLastLlcPer);

        moTextLastLlcPer.setEditable(false);
        moTextLastLlcPer.setEnabled(false);
        jPanel26.add(moTextLastLlcPer);

        moBoolLastLlcPerOverange.setText("FR");
        moBoolLastLlcPerOverange.setEnabled(false);
        moBoolLastLlcPerOverange.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel26.add(moBoolLastLlcPerOverange);

        jPanel17.add(jPanel26);

        jPanel27.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLastStePer.setText("Esteárico %:");
        jlLastStePer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel27.add(jlLastStePer);

        moTextLastStePer.setEditable(false);
        moTextLastStePer.setEnabled(false);
        jPanel27.add(moTextLastStePer);

        moBoolLastStePerOverange.setText("FR");
        moBoolLastStePerOverange.setEnabled(false);
        moBoolLastStePerOverange.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel27.add(moBoolLastStePerOverange);

        jlLastPalPer.setText("Palmítico %:");
        jlLastPalPer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel27.add(jlLastPalPer);

        moTextLastPalPer.setEditable(false);
        moTextLastPalPer.setEnabled(false);
        jPanel27.add(moTextLastPalPer);

        moBoolLastPalPerOverange.setText("FR");
        moBoolLastPalPerOverange.setEnabled(false);
        moBoolLastPalPerOverange.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel27.add(moBoolLastPalPerOverange);

        jPanel17.add(jPanel27);

        jPanel28.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLastNotes.setText("Observaciones:");
        jlLastNotes.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel28.add(jlLastNotes);

        moTextLastNotes.setEnabled(false);
        moTextLastNotes.setPreferredSize(new java.awt.Dimension(615, 23));
        jPanel28.add(moTextLastNotes);

        jPanel17.add(jPanel28);

        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbAllTest.setText("Análisis capturados");
        jbAllTest.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel29.add(jbAllTest);

        jPanel17.add(jPanel29);

        jPanel1.add(jPanel17, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JButton jbAllTest;
    private javax.swing.JButton jbContinue;
    private javax.swing.JButton jbDown;
    private javax.swing.JButton jbEditTest;
    private javax.swing.JButton jbErase;
    private javax.swing.JButton jbRestart;
    private javax.swing.JButton jbSaveAndNextRow;
    private javax.swing.JButton jbSaveRow;
    private javax.swing.JButton jbUp;
    private javax.swing.JLabel jlCaptureDate;
    private javax.swing.JLabel jlCurAciPer;
    private javax.swing.JLabel jlCurDateTest;
    private javax.swing.JLabel jlCurEndDateTest;
    private javax.swing.JLabel jlCurLinPer;
    private javax.swing.JLabel jlCurLlcPer;
    private javax.swing.JLabel jlCurMoiPer;
    private javax.swing.JLabel jlCurNotes;
    private javax.swing.JLabel jlCurOlePer;
    private javax.swing.JLabel jlCurPalPer;
    private javax.swing.JLabel jlCurPerInd;
    private javax.swing.JLabel jlCurSolPer;
    private javax.swing.JLabel jlCurStartDateTest;
    private javax.swing.JLabel jlCurStePer;
    private javax.swing.JLabel jlCurWeekTest;
    private javax.swing.JLabel jlCurYearTest;
    private javax.swing.JLabel jlLastAciPer;
    private javax.swing.JLabel jlLastDateTest;
    private javax.swing.JLabel jlLastEndDateTest;
    private javax.swing.JLabel jlLastLinPer;
    private javax.swing.JLabel jlLastLlcPer;
    private javax.swing.JLabel jlLastMoiPer;
    private javax.swing.JLabel jlLastNotes;
    private javax.swing.JLabel jlLastOlePer;
    private javax.swing.JLabel jlLastPalPer;
    private javax.swing.JLabel jlLastPerInd;
    private javax.swing.JLabel jlLastSolPer;
    private javax.swing.JLabel jlLastStartDateTest;
    private javax.swing.JLabel jlLastStePer;
    private javax.swing.JLabel jlLastTestResults;
    private javax.swing.JLabel jlLastWeekTest;
    private javax.swing.JLabel jlLastYearTest;
    private javax.swing.JLabel jlOutOfRange;
    private javax.swing.JLabel jlScale16;
    private javax.swing.JLabel jlSpace;
    private javax.swing.JLabel jlSpace2;
    private javax.swing.JLabel jlTypeTest;
    private javax.swing.JPanel jpTest;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolCurAciPerOverange;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolCurLinPerOverange;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolCurLlcPerOverange;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolCurMoiPerOverange;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolCurOlePerOverange;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolCurPalPerOverange;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolCurPerIndOverange;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolCurSolPerOverange;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolCurStePerOverange;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolDone;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolLastAciPerOverange;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolLastLinPerOverange;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolLastLlcPerOverange;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolLastMoiPerOverange;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolLastOlePerOverange;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolLastPalPerOverange;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolLastPerIndOverange;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolLastSolPerOverange;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolLastStePerOverange;
    private sa.lib.gui.bean.SBeanFieldDate moDateCaptureDate;
    private sa.lib.gui.bean.SBeanFieldDate moDateCurEndDateTest;
    private sa.lib.gui.bean.SBeanFieldDate moDateCurStartDateTest;
    private sa.lib.gui.bean.SBeanFieldDate moDateLastEndDateTest;
    private sa.lib.gui.bean.SBeanFieldDate moDateLastStartDateTest;
    private sa.lib.gui.bean.SBeanFieldText moTextCurAciPer;
    private sa.lib.gui.bean.SBeanFieldText moTextCurLinPer;
    private sa.lib.gui.bean.SBeanFieldText moTextCurLlcPer;
    private sa.lib.gui.bean.SBeanFieldText moTextCurMoiPer;
    private sa.lib.gui.bean.SBeanFieldText moTextCurNotes;
    private sa.lib.gui.bean.SBeanFieldText moTextCurOlePer;
    private sa.lib.gui.bean.SBeanFieldText moTextCurPalPer;
    private sa.lib.gui.bean.SBeanFieldText moTextCurPerInd;
    private sa.lib.gui.bean.SBeanFieldText moTextCurSolPer;
    private sa.lib.gui.bean.SBeanFieldText moTextCurStePer;
    private sa.lib.gui.bean.SBeanFieldText moTextLastAciPer;
    private sa.lib.gui.bean.SBeanFieldText moTextLastLinPer;
    private sa.lib.gui.bean.SBeanFieldText moTextLastLlcPer;
    private sa.lib.gui.bean.SBeanFieldText moTextLastMoiPer;
    private sa.lib.gui.bean.SBeanFieldText moTextLastNotes;
    private sa.lib.gui.bean.SBeanFieldText moTextLastOlePer;
    private sa.lib.gui.bean.SBeanFieldText moTextLastPalPer;
    private sa.lib.gui.bean.SBeanFieldText moTextLastPerInd;
    private sa.lib.gui.bean.SBeanFieldText moTextLastSolPer;
    private sa.lib.gui.bean.SBeanFieldText moTextLastStePer;
    private sa.lib.gui.bean.SBeanFieldCalendarWeek moWeekCurWeekTest;
    private sa.lib.gui.bean.SBeanFieldCalendarWeek moWeekLastWeekTest;
    private sa.lib.gui.bean.SBeanFieldCalendarYear moYearCurYearTest;
    private sa.lib.gui.bean.SBeanFieldCalendarYear moYearLastYearTest;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 1120, 700);

        moDateCaptureDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlCaptureDate), false);
        moBoolDone.setBooleanSettings(moBoolDone.getText(), false);
        moYearCurYearTest.setCalendarSettings(SGuiUtils.getLabelName(jlCurYearTest));
        moWeekCurWeekTest.setCalendarSettings(SGuiUtils.getLabelName(jlCurWeekTest));
        moYearLastYearTest.setCalendarSettings(SGuiUtils.getLabelName(jlLastYearTest));
        moWeekLastWeekTest.setCalendarSettings(SGuiUtils.getLabelName(jlLastWeekTest));
        moDateCurStartDateTest.setDateSettings(miClient, SGuiUtils.getLabelName(jlCurStartDateTest), false);
        moDateCurEndDateTest.setDateSettings(miClient, SGuiUtils.getLabelName(jlCurEndDateTest), false);
        moDateLastStartDateTest.setDateSettings(miClient, SGuiUtils.getLabelName(jlLastStartDateTest), false);
        moDateLastEndDateTest.setDateSettings(miClient, SGuiUtils.getLabelName(jlLastEndDateTest), false);
        moTextCurAciPer.setTextSettings(SGuiUtils.getLabelName(jlCurAciPer), 9);
        moBoolCurAciPerOverange.setBooleanSettings(SGuiUtils.getLabelName(moBoolCurAciPerOverange.getText()), false);
        moTextCurPerInd.setTextSettings(SGuiUtils.getLabelName(jlCurPerInd), 9);
        moBoolCurPerIndOverange.setBooleanSettings(SGuiUtils.getLabelName(moBoolCurPerIndOverange.getText()), false);
        moTextCurMoiPer.setTextSettings(SGuiUtils.getLabelName(jlCurMoiPer), 9);
        moBoolCurMoiPerOverange.setBooleanSettings(SGuiUtils.getLabelName(moBoolCurMoiPerOverange.getText()), false);
        moTextCurSolPer.setTextSettings(SGuiUtils.getLabelName(jlCurSolPer), 9);
        moBoolCurSolPerOverange.setBooleanSettings(SGuiUtils.getLabelName(moBoolCurSolPerOverange.getText()), false);
        moTextCurLinPer.setTextSettings(SGuiUtils.getLabelName(jlCurLinPer), 9);
        moBoolCurLinPerOverange.setBooleanSettings(SGuiUtils.getLabelName(moBoolCurLinPerOverange.getText()), false);
        moTextCurOlePer.setTextSettings(SGuiUtils.getLabelName(jlCurOlePer), 9);
        moBoolCurOlePerOverange.setBooleanSettings(SGuiUtils.getLabelName(moBoolCurOlePerOverange.getText()), false);
        moTextCurLlcPer.setTextSettings(SGuiUtils.getLabelName(jlCurLlcPer), 9);
        moBoolCurLlcPerOverange.setBooleanSettings(SGuiUtils.getLabelName(moBoolCurLlcPerOverange.getText()), false);
        moTextCurStePer.setTextSettings(SGuiUtils.getLabelName(jlCurStePer), 9);
        moBoolCurStePerOverange.setBooleanSettings(SGuiUtils.getLabelName(moBoolCurStePerOverange.getText()), false);
        moTextCurPalPer.setTextSettings(SGuiUtils.getLabelName(jlCurPalPer), 9);
        moBoolCurPalPerOverange.setBooleanSettings(SGuiUtils.getLabelName(moBoolCurPalPerOverange.getText()), false);
        moTextCurNotes.setTextSettings(SGuiUtils.getLabelName(jlCurNotes), 100);
        moTextLastAciPer.setTextSettings(SGuiUtils.getLabelName(jlLastAciPer), 9);
        moBoolLastAciPerOverange.setBooleanSettings(SGuiUtils.getLabelName(moBoolLastAciPerOverange.getText()), false);
        moTextLastPerInd.setTextSettings(SGuiUtils.getLabelName(jlLastPerInd), 9);
        moBoolLastPerIndOverange.setBooleanSettings(SGuiUtils.getLabelName(moBoolLastPerIndOverange.getText()), false);
        moTextLastMoiPer.setTextSettings(SGuiUtils.getLabelName(jlLastMoiPer), 9);
        moBoolLastMoiPerOverange.setBooleanSettings(SGuiUtils.getLabelName(moBoolLastMoiPerOverange.getText()), false);
        moTextLastSolPer.setTextSettings(SGuiUtils.getLabelName(jlLastSolPer), 9);
        moBoolLastSolPerOverange.setBooleanSettings(SGuiUtils.getLabelName(moBoolLastSolPerOverange.getText()), false);
        moTextLastLinPer.setTextSettings(SGuiUtils.getLabelName(jlLastLinPer), 9);
        moBoolLastLinPerOverange.setBooleanSettings(SGuiUtils.getLabelName(moBoolLastLinPerOverange.getText()), false);
        moTextLastOlePer.setTextSettings(SGuiUtils.getLabelName(jlLastOlePer), 9);
        moBoolLastOlePerOverange.setBooleanSettings(SGuiUtils.getLabelName(moBoolLastOlePerOverange.getText()), false);
        moTextLastLlcPer.setTextSettings(SGuiUtils.getLabelName(jlLastLlcPer), 9);
        moBoolLastLlcPerOverange.setBooleanSettings(SGuiUtils.getLabelName(moBoolLastLlcPerOverange.getText()), false);
        moTextLastStePer.setTextSettings(SGuiUtils.getLabelName(jlLastStePer), 9);
        moBoolLastStePerOverange.setBooleanSettings(SGuiUtils.getLabelName(moBoolLastStePerOverange.getText()), false);
        moTextLastPalPer.setTextSettings(SGuiUtils.getLabelName(jlLastPalPer), 9);
        moBoolLastPalPerOverange.setBooleanSettings(SGuiUtils.getLabelName(moBoolLastPalPerOverange.getText()), false);
        moTextLastNotes.setTextSettings(SGuiUtils.getLabelName(jlLastNotes), 100);
        
        moFields.addField(moDateCaptureDate);
        moFields.addField(moBoolDone);
        moFields.addField(moYearCurYearTest);
        moFields.addField(moWeekCurWeekTest);
        moFields.addField(moYearLastYearTest);
        moFields.addField(moWeekLastWeekTest);
        moFields.addField(moDateCurStartDateTest);
        moFields.addField(moDateCurEndDateTest);
        moFields.addField(moDateLastStartDateTest);
        moFields.addField(moDateLastEndDateTest);
        moFields.addField(moTextCurAciPer);
        moFields.addField(moBoolCurAciPerOverange);
        moFields.addField(moTextCurPerInd);
        moFields.addField(moBoolCurPerIndOverange);
        moFields.addField(moTextCurMoiPer);
        moFields.addField(moBoolCurMoiPerOverange);
        moFields.addField(moTextCurSolPer);
        moFields.addField(moBoolCurSolPerOverange);
        moFields.addField(moTextCurLinPer);
        moFields.addField(moBoolCurLinPerOverange);
        moFields.addField(moTextCurOlePer);
        moFields.addField(moBoolCurOlePerOverange);
        moFields.addField(moTextCurLlcPer);
        moFields.addField(moBoolCurLlcPerOverange);
        moFields.addField(moTextCurStePer);
        moFields.addField(moBoolCurStePerOverange);
        moFields.addField(moTextCurPalPer);
        moFields.addField(moBoolCurPalPerOverange);
        moFields.addField(moTextCurNotes);
        moFields.addField(moTextLastAciPer);
        moFields.addField(moBoolLastAciPerOverange);
        moFields.addField(moTextLastPerInd);
        moFields.addField(moBoolLastPerIndOverange);
        moFields.addField(moTextLastMoiPer);
        moFields.addField(moBoolLastMoiPerOverange);
        moFields.addField(moTextLastSolPer);
        moFields.addField(moBoolLastSolPerOverange);
        moFields.addField(moTextLastLinPer);
        moFields.addField(moBoolLastLinPerOverange);
        moFields.addField(moTextLastOlePer);
        moFields.addField(moBoolLastOlePerOverange);
        moFields.addField(moTextLastLlcPer);
        moFields.addField(moBoolLastLlcPerOverange);
        moFields.addField(moTextLastStePer);
        moFields.addField(moBoolLastStePerOverange);
        moFields.addField(moTextLastPalPer);
        moFields.addField(moBoolLastPalPerOverange);
        moFields.addField(moTextLastNotes);

        
        moGridWahList = new SGridPaneForm(miClient, SModConsts.S_WAH_LAB_TEST, SLibConsts.UNDEFINED, "Pruebas de laboratorio") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(true);
            }
            
            @Override
            public void createGridColumns() {
                int col = 0;
                SGridColumnForm[] columns = new SGridColumnForm[5];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Almacén");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Nombre almacén");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_L, "Ítem");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Existencias");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Unidad");
                
                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        moFormWahLabTest = new SFormWahLabTest(miClient, "Almacenes e ítems");
        moGridWahList.setForm(moFormWahLabTest);
        moGridWahList.setPaneFormOwner(this);
        mvFormGrids.add(moGridWahList);

        jpTest.add(moGridWahList, BorderLayout.CENTER);
        
        jbRestart.setEnabled(false);
        jbEdit.setEnabled(false);
        jbReadInfo.setEnabled(false);
    }

    private void setLaboratoryTestResults(SDbWahLabTest labTest) {
        if (labTest != null) {
            moTextCurAciPer.setValue(labTest.getAcidityPercentage_n() == null ? "" : labTest.getAcidityPercentage_n() * 100 + "");
            moTextCurPerInd.setValue(labTest.getPeroxideIndex_n() == null ? "" : labTest.getPeroxideIndex_n() * 100 + "");
            moTextCurMoiPer.setValue(labTest.getMoisturePercentage_n() == null ? "" : labTest.getMoisturePercentage_n() * 100 + "");
            moTextCurSolPer.setValue(labTest.getSolidPersentage_n() == null ? "" : labTest.getSolidPersentage_n() * 100 + "");
            moTextCurLinPer.setValue(labTest.getLinoleicAcidPercentage_n() == null ? "" : labTest.getLinoleicAcidPercentage_n() * 100 + "");
            moTextCurOlePer.setValue(labTest.getOleicAcidPercentage_n() == null ? "" : labTest.getOleicAcidPercentage_n() * 100 + "");
            moTextCurLlcPer.setValue(labTest.getLinolenicAcidPercentage_n() == null ? "" : labTest.getLinolenicAcidPercentage_n() * 100 + "");
            moTextCurStePer.setValue(labTest.getStearicAcidPercentage_n() == null ? "" : labTest.getStearicAcidPercentage_n() * 100  + "");
            moTextCurPalPer.setValue(labTest.getPalmiticAcidPercentage_n() == null ? "" : labTest.getPalmiticAcidPercentage_n()  * 100  + "");
            moTextCurNotes.setValue(labTest.getNote());
            moBoolCurAciPerOverange.setValue(labTest.isAcidityPercentageOverange());
            moBoolCurPerIndOverange.setValue(labTest.isPeroxideIndexOverange());
            moBoolCurMoiPerOverange.setValue(labTest.isMoisturePercentageOverange());
            moBoolCurSolPerOverange.setValue(labTest.isSolidPersentageOverange());
            moBoolCurLinPerOverange.setValue(labTest.isLinoleicAcidPercentageOverange());
            moBoolCurOlePerOverange.setValue(labTest.isOleicAcidPercentageOverange());
            moBoolCurLlcPerOverange.setValue(labTest.isLinolenicAcidPercentageOverange());
            moBoolCurStePerOverange.setValue(labTest.isStearicAcidPercentageOverange());
            moBoolCurPalPerOverange.setValue(labTest.isPalmiticAcidPercentageOverange());

            setEnabledFields(!labTest.getCapturedAndSaveRow());

            if (labTest.getLastWahLabTest() != null) {
                SDbWahLabTest lastLabTest = labTest.getLastWahLabTest();

                moTextLastAciPer.setValue(lastLabTest.getAcidityPercentage_n() == null ? "" : lastLabTest.getAcidityPercentage_n() * 100  + "");
                moTextLastPerInd.setValue(lastLabTest.getPeroxideIndex_n() == null ? "" : lastLabTest.getPeroxideIndex_n() * 100 + "");
                moTextLastMoiPer.setValue(lastLabTest.getMoisturePercentage_n() == null ? "" : lastLabTest.getMoisturePercentage_n() * 100 + "");
                moTextLastSolPer.setValue(lastLabTest.getSolidPersentage_n() == null ? "" : lastLabTest.getSolidPersentage_n() * 100 + "");
                moTextLastLinPer.setValue(lastLabTest.getLinoleicAcidPercentage_n() == null ? "" : lastLabTest.getLinoleicAcidPercentage_n() * 100 + "");
                moTextLastOlePer.setValue(lastLabTest.getOleicAcidPercentage_n() == null ? "" : lastLabTest.getOleicAcidPercentage_n() * 100 + "");
                moTextLastLlcPer.setValue(lastLabTest.getLinolenicAcidPercentage_n() == null ? "" : lastLabTest.getLinolenicAcidPercentage_n() * 100 + "");
                moTextLastStePer.setValue(lastLabTest.getStearicAcidPercentage_n() == null ? "" : lastLabTest.getStearicAcidPercentage_n() * 100  + "");
                moTextLastPalPer.setValue(lastLabTest.getPalmiticAcidPercentage_n() == null ? "" : lastLabTest.getPalmiticAcidPercentage_n() * 100  + "");
                moTextLastNotes.setValue(lastLabTest.getNote());
                moBoolLastAciPerOverange.setValue(lastLabTest.isAcidityPercentageOverange());
                moBoolLastPerIndOverange.setValue(lastLabTest.isPeroxideIndexOverange());
                moBoolLastMoiPerOverange.setValue(lastLabTest.isMoisturePercentageOverange());
                moBoolLastSolPerOverange.setValue(lastLabTest.isSolidPersentageOverange());
                moBoolLastLinPerOverange.setValue(lastLabTest.isLinoleicAcidPercentageOverange());
                moBoolLastOlePerOverange.setValue(lastLabTest.isOleicAcidPercentageOverange());
                moBoolLastLlcPerOverange.setValue(lastLabTest.isLinolenicAcidPercentageOverange());
                moBoolLastStePerOverange.setValue(lastLabTest.isStearicAcidPercentageOverange());
                moBoolLastPalPerOverange.setValue(lastLabTest.isPalmiticAcidPercentageOverange());
            }
            else {
                moTextLastAciPer.setValue("");
                moTextLastPerInd.setValue("");
                moTextLastMoiPer.setValue("");
                moTextLastSolPer.setValue("");
                moTextLastLinPer.setValue("");
                moTextLastOlePer.setValue("");
                moTextLastLlcPer.setValue("");
                moTextLastStePer.setValue("");
                moTextLastPalPer.setValue("");
                moTextLastNotes.setValue("");
                moBoolLastAciPerOverange.setValue(false);
                moBoolLastPerIndOverange.setValue(false);
                moBoolLastMoiPerOverange.setValue(false);
                moBoolLastSolPerOverange.setValue(false);
                moBoolLastLinPerOverange.setValue(false);
                moBoolLastOlePerOverange.setValue(false);
                moBoolLastLlcPerOverange.setValue(false);
                moBoolLastStePerOverange.setValue(false);
                moBoolLastPalPerOverange.setValue(false);
            }
        }
    }
    
    private void setEnabledFields(boolean enable) {
        moTextCurAciPer.setEnabled(enable);
        moTextCurPerInd.setEnabled(enable);
        moTextCurMoiPer.setEnabled(enable);
        moTextCurSolPer.setEnabled(enable);
        moTextCurLinPer.setEnabled(enable);
        moTextCurOlePer.setEnabled(enable);
        moTextCurLlcPer.setEnabled(enable);
        moTextCurStePer.setEnabled(enable);
        moTextCurPalPer.setEnabled(enable);
        moTextCurNotes.setEnabled(enable);
        moBoolCurAciPerOverange.setEnabled(enable);
        moBoolCurPerIndOverange.setEnabled(enable);
        moBoolCurMoiPerOverange.setEnabled(enable);
        moBoolCurSolPerOverange.setEnabled(enable);
        moBoolCurLinPerOverange.setEnabled(enable);
        moBoolCurOlePerOverange.setEnabled(enable);
        moBoolCurLlcPerOverange.setEnabled(enable);
        moBoolCurStePerOverange.setEnabled(enable);
        moBoolCurPalPerOverange.setEnabled(enable);
    }
    
    private void verifyYearWeek(int year, int week) {
        try {
            String sql = "SELECT * FROM s_wah_lab WHERE year = " + year + " AND week = " + week;
            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
            if (resultSet.next()) {
                miClient.showMsgBoxInformation("Ya existe captura de resultados para la fecha inicial y final seleccionada.");
            }
        }
        catch(Exception e) { }
    }
    
    private int getYear(Date date) {
        int year = 0;
        try {
            String sql = "SELECT YEAR('" + SLibUtils.DbmsDateFormatDate.format(date) + "');";
            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
            if (resultSet.next()) {
                year = resultSet.getInt(1);
            }
        }
        catch(Exception e) { }
        
        return year;
    }

    private int getWeekOfYear(Date date) {
        int week = 0;
        try {
            String sql = "SELECT WEEKOFYEAR('" + SLibUtils.DbmsDateFormatDate.format(date) + "');";
            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
            if (resultSet.next()) {
                week = resultSet.getInt(1);
            }
        }
        catch(Exception e) { }
        
        return week;
    }

    private Date getDateStart(Date date) {
        Date dateStart = null;
        try {
            String sql = "SELECT DATE_ADD('" + SLibUtils.DbmsDateFormatDate.format(date) + "', "
                    + "INTERVAL - WEEKDAY('" + SLibUtils.DbmsDateFormatDate.format(date) + "') DAY);";
            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
            if (resultSet.next()) {
                dateStart = resultSet.getDate(1);
            }
        }
        catch(Exception e) { }
        
        return dateStart;
    }

    private Date getDateEnd(Date date) {
        Date dateEnd = null;
        try {
            String sql = "SELECT DATE_ADD('" + SLibUtils.DbmsDateFormatDate.format(getDateStart(date)) + "', INTERVAL 6 DAY);";
            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
            if (resultSet.next()) {
                dateEnd = resultSet.getDate(1);
            }
        }
        catch(Exception e) { }
        
        return dateEnd;
    }
    
    private void obtainWarehouseWithStk() {
        try {
            Statement statement = miClient.getSession().getDatabase().getConnection().createStatement();
            String sql = "SELECT " +
                    "vw.id_co, " +
                    "vw.id_cob, " +
                    "vw.id_wah, " +
                    "vi.id_item, " +
                    "SUM(v.mov_in - v.mov_out), " +
                    "vu.code " +
                    "FROM s_stk AS v " +
                    "INNER JOIN su_item AS vi ON v.id_item = vi.id_item " +
                    "INNER JOIN su_unit AS vu ON v.id_unit = vu.id_unit " +
                    "INNER JOIN cu_wah AS vw ON v.id_co = vw.id_co AND v.id_cob = vw.id_cob AND v.id_wah = vw.id_wah " +
                    "INNER JOIN cu_cob AS vc ON v.id_co = vc.id_co AND v.id_cob = vc.id_cob " +
                    "WHERE v.b_del = 0 AND v.id_year = " + moYearCurYearTest.getValue() + " " +
                    "AND v.dt <= '" + SLibUtils.DbmsDateFormatDate.format(moDateCaptureDate.getValue()) + "' " +
                    "GROUP BY v.id_item, v.id_unit, v.id_cob, v.id_wah, vc.code, vw.name, vi.code, vi.name, vu.code " +
                    "HAVING SUM(v.mov_in - v.mov_out) <> 0 " +
                    "ORDER BY vw.code, vi.name;" ;
            
            ResultSet resultSet = statement.executeQuery(sql);
            while (resultSet.next()) {
                if (maWahLabTests == null) {
                    maWahLabTests = new ArrayList<>();
                }
                
                boolean found = false;
                int[] wahPk = { resultSet.getInt(1), resultSet.getInt(2), resultSet.getInt(3) };
                int[] itemPk = { resultSet.getInt(4) };
                
                for (SDbWahLabTest wahTest : maWahLabTests) {
                    if (SLibUtils.compareKeys(wahPk, wahTest.getRowPrimaryKey()) 
                            && SLibUtils.compareKeys(itemPk, new int[] { wahTest.getFkItem() })) {
                        found = true;
                        break;
                    }
                } 
                
                if (!found) {
                    SDbWahLabTest newWahTest = new SDbWahLabTest();
                    newWahTest.setStk(resultSet.getDouble(5));
                    newWahTest.setUnit(resultSet.getString(6));
                    newWahTest.setRowPrimaryKey(wahPk);
                    newWahTest.setFkItem(itemPk[0]);
                    newWahTest.readWarehouse(miClient.getSession());
                    newWahTest.readItem(miClient.getSession());
                    if (moRegistry.getLastWahLab() != null) {
                        newWahTest.readLastWahLabTest(miClient.getSession(), moRegistry.getLastWahLab().getPkWarehouseLaboratoryId());
                    }
                    maWahLabTests.add(newWahTest);
                }
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void populateLaboratoryTest() throws SQLException {
        Vector<SGridRow> vRows = new Vector<>();
        vRows.addAll(maWahLabTests);
        
        moGridWahList.populateGrid(vRows, this); 
        moGridWahList.clearSortKeys();
        moGridWahList.setSelectedGridRow(0);
    }
    
    private void eraseAll() {
        moGridWahList.clearGrid();
        maWahLabTests = null;
        
        moTextCurAciPer.setValue("");
        moTextCurPerInd.setValue("");
        moTextCurMoiPer.setValue("");
        moTextCurSolPer.setValue("");
        moTextCurLinPer.setValue("");
        moTextCurOlePer.setValue("");
        moTextCurLlcPer.setValue("");
        moTextCurStePer.setValue("");
        moTextCurPalPer.setValue("");
        moTextCurNotes.setValue("");
        moBoolCurAciPerOverange.setValue(false);
        moBoolCurPerIndOverange.setValue(false);
        moBoolCurMoiPerOverange.setValue(false);
        moBoolCurSolPerOverange.setValue(false);
        moBoolCurLinPerOverange.setValue(false);
        moBoolCurOlePerOverange.setValue(false);
        moBoolCurLlcPerOverange.setValue(false);
        moBoolCurStePerOverange.setValue(false);
        moBoolCurPalPerOverange.setValue(false);
        
        moTextLastAciPer.setValue("");
        moTextLastPerInd.setValue("");
        moTextLastMoiPer.setValue("");
        moTextLastSolPer.setValue("");
        moTextLastLinPer.setValue("");
        moTextLastOlePer.setValue("");
        moTextLastLlcPer.setValue("");
        moTextLastStePer.setValue("");
        moTextLastPalPer.setValue("");
        moTextLastNotes.setValue("");
        moBoolLastAciPerOverange.setValue(false);
        moBoolLastPerIndOverange.setValue(false);
        moBoolLastMoiPerOverange.setValue(false);
        moBoolLastSolPerOverange.setValue(false);
        moBoolLastLinPerOverange.setValue(false);
        moBoolLastOlePerOverange.setValue(false);
        moBoolLastLlcPerOverange.setValue(false);
        moBoolLastStePerOverange.setValue(false);
        moBoolLastPalPerOverange.setValue(false);
    }
    
    private void chargeOldRegistry() {
        try {
            moDateCaptureDate.setEnabled(false);
            jbContinue.setEnabled(false);
            jbRestart.setEnabled(true);

            // Con resultados del analisis anterior:
            moRegistry.readLastWahLab(miClient.getSession(), moYearCurYearTest.getValue(), moWeekCurWeekTest.getValue(), false);
            maWahLabTests = moRegistry.getWahLabTests();
            
            for (SDbWahLabTest test : maWahLabTests) {
                if (moRegistry.getLastWahLab() != null) {
                    test.readLastWahLabTest(miClient.getSession(), moRegistry.getLastWahLab().getPkWarehouseLaboratoryId());
                }
            }
            populateLaboratoryTest();
            setEnabledFields(true);
        }
        catch (Exception e) {}
    }
    
    private void actionContinue() {
       try {
            verifyYearWeek(moYearCurYearTest.getValue(), moWeekCurWeekTest.getValue());
            moDateCaptureDate.setEnabled(false);
            jbContinue.setEnabled(false);
            jbRestart.setEnabled(true);
            
            // Con resultados del analisis anterior:
            if (mbWithLastTests) {
                moRegistry.readLastWahLab(miClient.getSession(), moYearCurYearTest.getValue(), moWeekCurWeekTest.getValue(), false);
                if (moRegistry.getLastWahLab() != null) {
                    maWahLabTests = moRegistry.getLastWahLab().getWahLabTests();
                }
            }
            
            for (SDbWahLabTest test : maWahLabTests) {
                test.setCapturedAndSaveRow(false);
                if (moRegistry.getLastWahLab() != null) {
                    test.readLastWahLabTest(miClient.getSession(), moRegistry.getLastWahLab().getPkWarehouseLaboratoryId());
                }
            }
            
           obtainWarehouseWithStk();
           populateLaboratoryTest();
           setEnabledFields(true);
       }
       catch(Exception e) {}
    }
    
    private void actionRestart() {
        if (miClient.showMsgBoxConfirm("Se borrarán los resultados capturados.\n¿Desea continuar?") == JOptionPane.OK_OPTION) {
            moDateCaptureDate.setEnabled(true);
            jbContinue.setEnabled(true);
            jbRestart.setEnabled(false);
            eraseAll();
        }
    }
    
    private void actionUp() {
        int index = moGridWahList.getTable().getSelectedRow();
        if (index > 0) {
            SGridRow row = moGridWahList.getSelectedGridRow();
            moGridWahList.removeGridRow(index);
            moGridWahList.getModel().getGridRows().add(index - 1, row);
            moGridWahList.renderGridRows();
            moGridWahList.setSelectedGridRow(index - 1);
        }
    }

    private void actionDown() {
        int index = moGridWahList.getTable().getSelectedRow();
        if (index < moGridWahList.getModel().getRowCount()) {
            SGridRow row = moGridWahList.getSelectedGridRow();
            moGridWahList.removeGridRow(index);
            moGridWahList.getModel().getGridRows().add(index + 1, row);
            moGridWahList.renderGridRows();
            moGridWahList.setSelectedGridRow(index + 1);
        }
    }
    
    private void actionEditTest() {
        SDbWahLabTest test = (SDbWahLabTest) moGridWahList.getSelectedGridRow();
        test.setCapturedAndSaveRow(false);
        setEnabledFields(true);
    }

    private void actionErase() {
        if (moTextCurAciPer.isEnabled()) {
            moTextCurAciPer.setValue("");
            moTextCurPerInd.setValue("");
            moTextCurMoiPer.setValue("");
            moTextCurSolPer.setValue("");
            moTextCurLinPer.setValue("");
            moTextCurOlePer.setValue("");
            moTextCurLlcPer.setValue("");
            moTextCurStePer.setValue("");
            moTextCurPalPer.setValue("");
            moTextCurNotes.setValue("");
            moBoolCurAciPerOverange.setValue(false);
            moBoolCurPerIndOverange.setValue(false);
            moBoolCurMoiPerOverange.setValue(false);
            moBoolCurSolPerOverange.setValue(false);
            moBoolCurLinPerOverange.setValue(false);
            moBoolCurOlePerOverange.setValue(false);
            moBoolCurLlcPerOverange.setValue(false);
            moBoolCurStePerOverange.setValue(false);
            moBoolCurPalPerOverange.setValue(false);
        }
    }
    
    private void actionSaveRow() {
        SDbWahLabTest test = (SDbWahLabTest) moGridWahList.getSelectedGridRow();
        try {
            test.setAcidityPercentage_n(moTextCurAciPer.getValue().equals("") ? null : Double.parseDouble(moTextCurAciPer.getValue()) / 100);
            test.setPeroxideIndex_n(moTextCurPerInd.getValue().equals("") ? null : Double.parseDouble(moTextCurPerInd.getValue()) / 100);
            test.setMoisturePercentage_n(moTextCurMoiPer.getValue().equals("") ? null : Double.parseDouble(moTextCurMoiPer.getValue()) / 100);
            test.setSolidPersentage_n(moTextCurSolPer.getValue().equals("") ? null : Double.parseDouble(moTextCurSolPer.getValue()) / 100);
            test.setLinoleicAcidPercentage_n(moTextCurLinPer.getValue().equals("") ? null : Double.parseDouble(moTextCurLinPer.getValue()) / 100);
            test.setOleicAcidPercentage_n(moTextCurOlePer.getValue().equals("") ? null : Double.parseDouble(moTextCurOlePer.getValue()) / 100);
            test.setLinolenicAcidPercentage_n(moTextCurLlcPer.getValue().equals("") ? null : Double.parseDouble(moTextCurLlcPer.getValue()) / 100);
            test.setStearicAcidPercentage_n(moTextCurStePer.getValue().equals("") ? null : Double.parseDouble(moTextCurStePer.getValue()) / 100);
            test.setPalmiticAcidPercentage_n(moTextCurPalPer.getValue().equals("") ? null : Double.parseDouble(moTextCurPalPer.getValue()) / 100);
            test.setNote(moTextCurNotes.getValue()); 
            test.setAcidityPercentageOverange(moBoolCurAciPerOverange.getValue());
            test.setPeroxideIndexOverange(moBoolCurPerIndOverange.getValue());
            test.setMoisturePercentageOverange(moBoolCurMoiPerOverange.getValue());
            test.setSolidPersentageOverange(moBoolCurSolPerOverange.getValue());
            test.setLinoleicAcidPercentageOverange(moBoolCurLinPerOverange.getValue());
            test.setOleicAcidPercentageOverange(moBoolCurOlePerOverange.getValue());
            test.setLinolenicAcidPercentageOverange(moBoolCurLlcPerOverange.getValue());
            test.setStearicAcidPercentageOverange(moBoolCurStePerOverange.getValue());
            test.setPalmiticAcidPercentageOverange(moBoolCurPalPerOverange.getValue());

            test.setCapturedAndSaveRow(true);
            setEnabledFields(false);
        }
        catch (Exception e) {
            miClient.showMsgBoxError("Uno de los datos capturados no corresponde a un número.");
        }
    }

    private void actionSaveAndNextRow() {
        actionSaveRow();
        moGridWahList.setSelectedGridRow(moGridWahList.getTable().getSelectedRow() + 1);
    }
    
    private void actionAllTest() {
        if (moDialogAllWahLabTest == null) {
            moDialogAllWahLabTest = new SDialogAllWahLabTest(miClient);
        }
        moDialogAllWahLabTest.setValue(SDialogAllWahLabTest.PARAM_ROWS, moGridWahList.getModel().getGridRows());
        moDialogAllWahLabTest.setVisible(true);
    }
    
    private void actionCaptureDate() {
        moYearCurYearTest.setValue(getYear(moDateCaptureDate.getValue()));
        moWeekCurWeekTest.setValue(getWeekOfYear(moDateCaptureDate.getValue()));
        moDateCurStartDateTest.setValue(getDateStart(moDateCaptureDate.getValue()));
        moDateCurEndDateTest.setValue(getDateEnd(moDateCaptureDate.getValue()));
    }

    @Override
    public void addAllListeners() {
        jbContinue.addActionListener(this);
        jbRestart.addActionListener(this);
        jbErase.addActionListener(this);
        jbUp.addActionListener(this);
        jbDown.addActionListener(this);
        jbEditTest.addActionListener(this);
        jbSaveRow.addActionListener(this);
        jbSaveAndNextRow.addActionListener(this);
        jbAllTest.addActionListener(this);
        moDateCaptureDate.getComponent().addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbContinue.removeActionListener(this);
        jbRestart.removeActionListener(this);
        jbErase.removeActionListener(this);
        jbUp.removeActionListener(this);
        jbDown.removeActionListener(this);
        jbEditTest.removeActionListener(this);
        jbSaveRow.removeActionListener(this);
        jbSaveAndNextRow.removeActionListener(this);
        jbAllTest.removeActionListener(this);
        moDateCaptureDate.getComponent().removeFocusListener(this);
    }

    @Override
    public void reloadCatalogues() {
        moDialogAllWahLabTest = null;
        moBoolDone.setValue(false);
        moDateCaptureDate.setEnabled(true);
        moYearCurYearTest.setValue(0);
        moWeekCurWeekTest.setValue(0);
        moDateCurStartDateTest.setValue(null);
        moDateCurEndDateTest.setValue(null);
        moYearLastYearTest.setValue(0);
        moWeekLastWeekTest.setValue(0);
        moDateLastStartDateTest.setValue(null);
        moDateLastEndDateTest.setValue(null);
        jbContinue.setEnabled(true);
        jbRestart.setEnabled(false);
        eraseAll();
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbWahLab) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;
        
        removeAllListeners();
        reloadCatalogues();
        
        maWahLabTests = moRegistry.getWahLabTests();
        moDateCaptureDate.setValue(miClient.getSession().getWorkingDate());
        
        // Registro nuevo :

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
            
            moYearCurYearTest.setValue(getYear(miClient.getSession().getSystemDate()));
            moWeekCurWeekTest.setValue(getWeekOfYear(miClient.getSession().getSystemDate()));
            moDateCurStartDateTest.setValue(getDateStart(miClient.getSession().getSystemDate()));
            moDateCurEndDateTest.setValue(getDateEnd(miClient.getSession().getSystemDate()));
            
            if (mbWithLastTests) {
                moRegistry.readLastWahLab(miClient.getSession(), moYearCurYearTest.getValue(), moWeekCurWeekTest.getValue(), true);
            }
        }
        // Registro viejo :
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
            moBoolDone.setValue(moRegistry.isDone());
            moYearCurYearTest.setValue(moRegistry.getYear());
            moWeekCurWeekTest.setValue(moRegistry.getWeek());
            moDateCurStartDateTest.setValue(moRegistry.getDateStart());
            moDateCurEndDateTest.setValue(moRegistry.getDateEnd());
        }
        
        // Analisis anterior independientemente si el registro es nuevo o viejo:

        if (moRegistry.getLastWahLab() != null) {
            SDbWahLab lastRegistry = moRegistry.getLastWahLab();
            
            moYearLastYearTest.setValue(lastRegistry.getYear());
            moWeekLastWeekTest.setValue(lastRegistry.getWeek());
            moDateLastStartDateTest.setValue(lastRegistry.getDateStart());
            moDateLastEndDateTest.setValue(lastRegistry.getDateEnd());
        }
        
        if (!moRegistry.isRegistryNew()) {
            chargeOldRegistry();
        }
        setEnabledFields(false);
        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbWahLab registry = moRegistry.clone();

        if (registry.isRegistryNew()) { }

        registry.setDone(moBoolDone.getValue());
        registry.setYear(moYearCurYearTest.getValue());
        registry.setWeek(moWeekCurWeekTest.getValue());
        registry.setDateStart(moDateCurStartDateTest.getValue());
        registry.setDateEnd(moDateCurEndDateTest.getValue());
        
        maWahLabTests.clear();
        for (SGridRow row : moGridWahList.getModel().getGridRows()){
            maWahLabTests.add((SDbWahLabTest) row);
        }
        
        registry.getWahLabTests().clear();
        if (!maWahLabTests.isEmpty()) {
            for (SDbWahLabTest childLab : maWahLabTests) {
                if (childLab.getDate() == null) {
                    childLab.setDate(moDateCaptureDate.getValue());
                }
                childLab.setRegistryEdited(true);
                registry.getWahLabTests().add(childLab);
            }
        }
        
        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            int count = 0;
            for (SGridRow row : moGridWahList.getModel().getGridRows()) {
                if (!((SDbWahLabTest) row).getCapturedAndSaveRow()) {
                    count++;
                }
            }
            if (count > 0) {
                if (miClient.showMsgBoxConfirm("Hay " + count + " almacenes sin captura de resultados.\n¿Esta seguro que desea dejarlos en blanco?")
                        != JOptionPane.OK_OPTION) {
                    validation.setMessage("Elimine o capture resultados en los tanques sin captura.");
                }
            }
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbContinue) {
                actionContinue();
            }
            else if (button == jbRestart) {
                actionRestart();
            }
            else if (button == jbUp) {
                actionUp();
            }
            else if (button == jbDown) {
                actionDown();
            }
            else if (button == jbEditTest) {
                actionEditTest();
            }
            else if (button == jbErase) {
                actionErase();
            }
            else if (button == jbSaveRow) {
                actionSaveRow();
            }
            else if (button == jbSaveAndNextRow) {
                actionSaveAndNextRow();
            }
            else if (button == jbAllTest) {
                actionAllTest();
            }
        }
    }

    @Override
    public void notifyRowNew(int i, int i1, int i2, SGridRow sgr) {
    }

    @Override
    public void notifyRowEdit(int i, int i1, int i2, SGridRow sgr) {
    }

    @Override
    public void notifyRowDelete(int i, int i1, int i2, SGridRow sgr) {
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            setLaboratoryTestResults((SDbWahLabTest) moGridWahList.getSelectedGridRow());
        }
    }

    @Override
    public void focusGained(FocusEvent e) {}

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof JFormattedTextField) {
            JFormattedTextField textField = (JFormattedTextField) e.getSource();
            
            if (textField == moDateCaptureDate.getComponent()) {
                actionCaptureDate();
            }
        }
    }
}
