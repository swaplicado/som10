/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import erp.lib.SLibTimeUtilities;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.SQLException;
import javax.swing.JButton;
import javax.swing.JComboBox;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiFieldKeyGroup;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;
import som.gui.SGuiClientSessionCustom;
import som.mod.SModConsts;
import som.mod.SModSysConsts;
import som.mod.som.db.SDbIog;
import som.mod.som.db.SDbMfgEstimation;
import som.mod.som.db.SSomMfgWarehouseProduct;
import som.mod.som.db.SSomStock;
import som.mod.som.db.SSomUtils;

/**
 *
 * @author Néstor Ávalos, Sergio Flores
 */
public class SDialogMfgEstimationFgHandingOver extends SBeanFormDialog implements ItemListener, ActionListener {

    private SGuiFieldKeyGroup moFieldKeyGroup;

    private SDbMfgEstimation moMfgEstimation;
    private SSomMfgWarehouseProduct moMfgWarehouseProductProduction;
    private SDialogStockCardex moDialogStockCardex;

    /**
     * Creates new form SDialogProductionEstimateFgDelivery
     */
    public SDialogMfgEstimationFgHandingOver(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.SX_STK_PROD_FG, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDateDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel5 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moTextItem = new sa.lib.gui.bean.SBeanFieldText();
        jPanel8 = new javax.swing.JPanel();
        jlItemCode = new javax.swing.JLabel();
        moTextItemCode = new sa.lib.gui.bean.SBeanFieldText();
        jPanel3 = new javax.swing.JPanel();
        jlQuantity = new javax.swing.JLabel();
        moDecQuantity = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlUnit = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jlBranch = new javax.swing.JLabel();
        moKeyBranch = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel7 = new javax.swing.JPanel();
        jlWarehouse = new javax.swing.JLabel();
        moKeyWarehouse = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel30 = new javax.swing.JPanel();
        jlDivision = new javax.swing.JLabel();
        moKeyDivision = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel11 = new javax.swing.JPanel();
        jlXtaStock = new javax.swing.JLabel();
        moDecXtaStock = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlXtaStockUnit = new javax.swing.JLabel();
        jlXtaStockPeriod = new javax.swing.JLabel();
        moTextXtaStockPeriod = new sa.lib.gui.bean.SBeanFieldText();
        jbCardex = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jbDeliveryProd = new javax.swing.JButton();

        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.GridLayout(9, 1, 0, 5));

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha:*");
        jlDate.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel9.add(jlDate);

        moDateDate.setPreferredSize(new java.awt.Dimension(100, 23));
        moDateDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                moDateDateFocusLost(evt);
            }
        });
        jPanel9.add(moDateDate);

        jPanel2.add(jPanel9);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Ítem:");
        jlItem.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel5.add(jlItem);

        moTextItem.setEditable(false);
        moTextItem.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel5.add(moTextItem);

        jPanel2.add(jPanel5);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemCode.setText("Código:");
        jlItemCode.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel8.add(jlItemCode);

        moTextItemCode.setEditable(false);
        jPanel8.add(moTextItemCode);

        jPanel2.add(jPanel8);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQuantity.setText("Cantidad a entregar:*");
        jlQuantity.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel3.add(jlQuantity);
        jPanel3.add(moDecQuantity);

        jlUnit.setText("UNIT");
        jlUnit.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel3.add(jlUnit);

        jPanel2.add(jPanel3);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBranch.setText("Sucursal:*");
        jlBranch.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel6.add(jlBranch);

        moKeyBranch.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel6.add(moKeyBranch);

        jPanel2.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWarehouse.setText("Tanque:*");
        jlWarehouse.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel7.add(jlWarehouse);

        moKeyWarehouse.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel7.add(moKeyWarehouse);

        jPanel2.add(jPanel7);

        jPanel30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDivision.setText("División:*");
        jlDivision.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel30.add(jlDivision);

        moKeyDivision.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel30.add(moKeyDivision);

        jPanel2.add(jPanel30);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlXtaStock.setText("Existencias:");
        jlXtaStock.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel11.add(jlXtaStock);

        moDecXtaStock.setEditable(false);
        jPanel11.add(moDecXtaStock);

        jlXtaStockUnit.setText("UNID");
        jlXtaStockUnit.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel11.add(jlXtaStockUnit);

        jlXtaStockPeriod.setText("Ejercicio:");
        jlXtaStockPeriod.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel11.add(jlXtaStockPeriod);

        moTextXtaStockPeriod.setEditable(false);
        moTextXtaStockPeriod.setText("2013");
        moTextXtaStockPeriod.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel11.add(moTextXtaStockPeriod);

        jbCardex.setIcon(new javax.swing.ImageIcon(getClass().getResource("/som/gui/img/icon_std_kardex.gif"))); // NOI18N
        jbCardex.setToolTipText("Ver cardex");
        jbCardex.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel11.add(jbCardex);

        jPanel2.add(jPanel11);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));

        jbDeliveryProd.setText("Entregar producción");
        jPanel10.add(jbDeliveryProd);

        jPanel2.add(jPanel10);

        jPanel1.add(jPanel2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void moDateDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_moDateDateFocusLost
        actionDateFocusLost();
    }//GEN-LAST:event_moDateDateFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCardex;
    private javax.swing.JButton jbDeliveryProd;
    private javax.swing.JLabel jlBranch;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlDivision;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlItemCode;
    private javax.swing.JLabel jlQuantity;
    private javax.swing.JLabel jlUnit;
    private javax.swing.JLabel jlWarehouse;
    private javax.swing.JLabel jlXtaStock;
    private javax.swing.JLabel jlXtaStockPeriod;
    private javax.swing.JLabel jlXtaStockUnit;
    private sa.lib.gui.bean.SBeanFieldDate moDateDate;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecQuantity;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecXtaStock;
    private sa.lib.gui.bean.SBeanFieldKey moKeyBranch;
    private sa.lib.gui.bean.SBeanFieldKey moKeyDivision;
    private sa.lib.gui.bean.SBeanFieldKey moKeyWarehouse;
    private sa.lib.gui.bean.SBeanFieldText moTextItem;
    private sa.lib.gui.bean.SBeanFieldText moTextItemCode;
    private sa.lib.gui.bean.SBeanFieldText moTextXtaStockPeriod;
    // End of variables declaration//GEN-END:variables

    /*
    * Private methods
    */

    private void initComponentsCustom() {
        moMfgEstimation = null;
        moFieldKeyGroup = new SGuiFieldKeyGroup(miClient);
        moMfgWarehouseProductProduction = new SSomMfgWarehouseProduct();
        moDialogStockCardex = new SDialogStockCardex(miClient);

        SGuiUtils.setWindowBounds(this, 560, 350);

        jbSave.setEnabled(false);
        jbCancel.setText("Cerrar");

        moDateDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate.getText()), true);
        moDecQuantity.setDecimalSettings(SGuiUtils.getLabelName(jlQuantity.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moKeyBranch.setKeySettings(miClient, SGuiUtils.getLabelName(jlBranch.getText()), true);
        moKeyWarehouse.setKeySettings(miClient, SGuiUtils.getLabelName(jlWarehouse.getText()), true);
        moKeyDivision.setKeySettings(miClient, SGuiUtils.getLabelName(jlDivision.getText()), true);
        moDecXtaStock.setDecimalSettings(SGuiUtils.getLabelName(jlXtaStock.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moTextXtaStockPeriod.setTextSettings(jlXtaStockPeriod.getText(), 5, 0);

        moFields.addField(moDecQuantity);
        moFields.addField(moKeyBranch);
        moFields.addField(moKeyWarehouse);

        removeAllListeners();
        reloadCatalogues();

        moDateDate.setValue(miClient.getSession().getWorkingDate());
        moKeyBranch.setValue(((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getCompany().getChildBranches().get(0).getPrimaryKey());
        moKeyBranch.setEnabled(false);
        jlUnit.setText("");

        addAllListeners();

        /* XXX Cell renderers not implemented yet in XML
        mvFormGrids.add(moGridUserRights);
        mvFormGrids.add(moGridUserScales);
        */
    }

    private void renderData() {
        moTextItem.setValue(moMfgWarehouseProductProduction.getItem());
        moTextItemCode.setValue(moMfgWarehouseProductProduction.getItemCode());
        moDecQuantity.setValue(moMfgWarehouseProductProduction.getQuantity());
        moKeyWarehouse.setSelectedIndex(0);

        jlUnit.setText(moMfgWarehouseProductProduction.getUnitCode());
        jlXtaStockUnit.setText(moMfgWarehouseProductProduction.getUnitCode());
    }

    private void actionKeyWarehouseStateChanged() {
        obtainStock();
        enabledCardex();
    }

    private void actionDateFocusLost() {
        obtainStock();
        enabledCardex();
    }

    private void obtainStock() {
        SSomStock stock = null;

        if (moKeyWarehouse.getSelectedIndex() > 0) {
            stock = SSomUtils.obtainStock(
                miClient.getSession(),
                SLibTimeUtilities.digestYear(moDateDate.getValue())[0],
                moMfgWarehouseProductProduction.getPkItemId(),
                moMfgWarehouseProductProduction.getPkUnitId(),
                SLibConsts.UNDEFINED,
                moKeyWarehouse.getValue(),
                SLibConsts.UNDEFINED,
                null,
                moDateDate.getValue(), false);

            moDecXtaStock.setValue(stock.getStock());
            jlXtaStockUnit.setText(moMfgWarehouseProductProduction.getUnitCode());
            moTextXtaStockPeriod.setText("" + SLibTimeUtilities.digestYear(moDateDate.getValue())[0]);
        }
        else {
            moDecXtaStock.setValue(0d);
            jlXtaStockUnit.setText("");
            moTextXtaStockPeriod.setText("");
        }
    }

    private void enabledCardex() {
        if (moKeyWarehouse.getSelectedIndex() > 0) {
            jbCardex.setEnabled(true);
        }
        else {
            jbCardex.setEnabled(false);
        }
    }

    private void actionCardex() {
        if (jbCardex.isEnabled()) {
            moDialogStockCardex.formReset();
            moDialogStockCardex.setFormParams(moDateDate.getValue(), moMfgWarehouseProductProduction.getPkItemId(), moMfgWarehouseProductProduction.getPkUnitId(), moKeyWarehouse.getValue(), moKeyDivision.getValue()[0]);
            moDialogStockCardex.setVisible(true);
        }
    }

    private void actionDeliveryFinishedGood() throws SQLException, Exception {
        String sMoves = "";
        SDbIog iog = new SDbIog();

        SGuiValidation validation = validateForm();

        if (!validation.isValid()) {
            miClient.showMsgBoxInformation(validation.getMessage());
            validation.getComponent().requestFocus();
        }
        else {

            iog.computeIog(SLibTimeUtils.createDate(SLibTimeUtils.digestDate(moDateDate.getValue())[0], SLibTimeUtils.digestDate(moDateDate.getValue())[1],
                SLibTimeUtils.digestDate(moDateDate.getValue())[2]-1), moDecQuantity.getValue(), true, SModSysConsts.SS_IOG_TP_IN_MFG_FG_ASD,
                SModSysConsts.SU_IOG_ADJ_TP_NA, moMfgWarehouseProductProduction.getPkItemId(), moMfgWarehouseProductProduction.getPkUnitId(),
                moKeyWarehouse.getValue(), moKeyDivision.getValue()[0], moMfgEstimation.getPkMfgEstimationId(), moMfgEstimation.getVersion(), miClient.getSession().getUser().getPkUserId());

            iog.setXtaStkDayPkYearId(SLibTimeUtilities.digestYear(moDateDate.getValue())[0]);
            iog.setXtaStkDayDate(moDateDate.getValue());

            if (iog.deliveryFinishedGood(miClient.getSession(), iog)) {

                iog.save(miClient.getSession());
            }

            if (iog.getQueryResultId() != SDbConsts.SAVE_OK) {
                miClient.showMsgBoxInformation(iog.getQueryResult());
            }
            else {
                miClient.showMsgBoxInformation("La entrega de producción se realizo con éxito.");
                actionCancel();
            }
        }
    }

    /*
    * Public methods
    */

    @Override
    public void addAllListeners() {
        jbDeliveryProd.addActionListener(this);
        jbCardex.addActionListener(this);
        moKeyWarehouse.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbDeliveryProd.removeActionListener(this);
        jbCardex.addActionListener(this);
        moKeyWarehouse.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        SGuiParams params = new SGuiParams();
        params.getParamsMap().put(SModSysConsts.CS_WAH_TP_TAN_MFG, SModSysConsts.CS_WAH_TP_TAN_MFG);

        moFieldKeyGroup.initGroup();
        moFieldKeyGroup.addFieldKey(moKeyBranch, SModConsts.CU_COB, SLibConsts.UNDEFINED, null);
        moFieldKeyGroup.addFieldKey(moKeyWarehouse, SModConsts.CU_WAH, SModSysConsts.CS_WAH_TP_TAN_MFG, params);
        moFieldKeyGroup.populateCatalogues();

        miClient.getSession().populateCatalogue(moKeyDivision, SModConsts.CU_DIV, SLibConsts.UNDEFINED, null);

        if (moKeyDivision.getModel().getSize() == 2) {
            moKeyDivision.setSelectedIndex(1);
        }
    }

    @Override
    public void setValue(int type, Object value) {
         switch (type) {
             case SModConsts.S_MFG_EST:
                 moMfgEstimation = (SDbMfgEstimation) value;
                 break;
             case SGuiConsts.PARAM_DATE:
                moDateDate.setValue(value);
                moDateDate.setEditable(false);
                break;
            case SModConsts.SX_STK_PROD_EST:
                moMfgWarehouseProductProduction = (SSomMfgWarehouseProduct) value;
                renderData();
                break;
            case SModConsts.CU_DIV:
                moKeyDivision.setValue(value);
                moKeyDivision.setEnabled(false);
                break;

            default:
        }
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        return validation;
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                JComboBox comboBox = (JComboBox) e.getSource();
                if (comboBox == moKeyWarehouse) {
                    actionKeyWarehouseStateChanged();
                }
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent evt) {
        if (evt.getSource() instanceof JButton) {
            JButton button = (JButton) evt.getSource();

            if (button == jbDeliveryProd) {
                try {
                    actionDeliveryFinishedGood();
                }
                catch (Exception e) {
                    SLibUtils.showException(this, e);
                }
            }
            else if (button == jbCardex) {
                actionCardex();
            }
        }
    }
}
