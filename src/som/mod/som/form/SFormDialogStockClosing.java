/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;
import som.gui.SGuiClientUtils;
import som.mod.SModConsts;
import som.mod.som.db.SSomStockClosing;

/**
 *
 * @author Néstor Ávalos
 */
public class SFormDialogStockClosing extends SBeanFormDialog implements ActionListener {

    private SSomStockClosing moRegistry;

    /**
     * Creates new form SFormDialogStockClosing
     */
    public SFormDialogStockClosing(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.SX_STK_CLO, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sBeanFieldText1 = new sa.lib.gui.bean.SBeanFieldText();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlYear = new javax.swing.JLabel();
        moNumYear = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        sBeanFieldText1.setText("sBeanFieldText1");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.GridLayout(8, 0, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlYear.setText("Ejercicio para generar inventarios iniciales:*");
        jlYear.setPreferredSize(new java.awt.Dimension(230, 23));
        jPanel3.add(jlYear);

        moNumYear.setText("");
        moNumYear.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel3.add(moNumYear);

        jPanel1.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));
        jPanel1.add(jPanel4);
        jPanel1.add(jLabel1);

        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel2.setText("Nota:");
        jPanel1.add(jLabel2);

        jLabel3.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel3.setText("Si el ejercicio que se cierra es el 2000, el valor que se debe especificar para");
        jPanel1.add(jLabel3);

        jLabel4.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel4.setText("el campo 'Ejercicio para generar inventarios iniciales' debe ser 2001.");
        jPanel1.add(jLabel4);

        jLabel5.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel5.setText("El proceso puede demorar varios segundos.");
        jPanel1.add(jLabel5);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel jlYear;
    private sa.lib.gui.bean.SBeanFieldInteger moNumYear;
    private sa.lib.gui.bean.SBeanFieldText sBeanFieldText1;
    // End of variables declaration//GEN-END:variables

    /*
    * Private methods
    */

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 480, 300);
        jbSave.setEnabled(true);
        jbCancel.setEnabled(true);

        moRegistry = new SSomStockClosing();

        jbSave.setText("Generar");
        jbSave.setSize(120, 23);
        moNumYear.setIntegerSettings(jlYear.getText(), SGuiConsts.GUI_TYPE_INT_CAL_YEAR, true);

        moFields.addField(moNumYear);

        moFields.setFormButton(jbSave);
    }

    /*
    * Public methods
    */

    @Override
    public void actionSave() {
        if (jbSave.isEnabled()) {
            if (SGuiUtils.computeValidation(miClient, validateForm())) {
                try {
                    moRegistry.setYearId(moNumYear.getValue());
                    moRegistry.save(miClient.getSession());
                    if (moRegistry.getQueryResultId() == SDbConsts.SAVE_OK) {
                        mnFormResult = SGuiConsts.FORM_RESULT_CANCEL;
                        miClient.showMsgBoxInformation(SLibConsts.MSG_PROCESS_FINISHED);
                        miClient.getSession().notifySuscriptors(SModConsts.S_IOG);
                        miClient.getSession().notifySuscriptors(SModConsts.S_STK);
                        dispose();
                    }
                    else {
                        miClient.showMsgBoxError("Error en el proceso de generación de inventarios iniciales.\n" + moRegistry.getQueryResult());
                    }
                }
                catch (Exception e) {
                    SLibUtils.showException(this, e);
                }
            }
        }
    }

    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {

    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moNumYear.setValue(miClient.getSession().getWorkingYear());
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        return null;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (!SGuiClientUtils.isPeriodOpened(miClient.getSession(), SLibTimeUtils.createDate(moNumYear.getValue()))) {
                validation.setMessage("El período está cerrado.");
                validation.setComponent(moNumYear.getComponent());
            }
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent evt) {
        if (evt.getSource() instanceof JButton) {
            JButton button = (JButton) evt.getSource();

        }
    }
}
