/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.Date;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import som.mod.SModConsts;
import som.mod.SModSysConsts;
import som.mod.som.db.SDbDryerReport;
import som.mod.som.db.SSomUtils;

/**
 *
 * @author Isabel Serv√≠n
 */
public class SFormDryerReport extends sa.lib.gui.bean.SBeanForm implements ActionListener, FocusListener {

    private SDbDryerReport moRegistry;
    private Connection moConnectionRevuelta;
    private double mdLastPitContGrin;
    
    /**
     * Creates new form SFormInputClass
     * @param client
     * @param title
     */
    public SFormDryerReport(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.S_DRYER_REP, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jpRegistry = new javax.swing.JPanel();
        jpNorth = new javax.swing.JPanel();
        jpDate = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDate = new sa.lib.gui.bean.SBeanFieldDate();
        jbContinue = new javax.swing.JButton();
        moBoolWithoutProduction = new sa.lib.gui.bean.SBeanFieldBoolean();
        jbActTicWei = new javax.swing.JButton();
        jpNorthData = new javax.swing.JPanel();
        jpDryer = new javax.swing.JPanel();
        jpDryerGrid = new javax.swing.JPanel();
        jpRow1 = new javax.swing.JPanel();
        jlOperativeHours = new javax.swing.JLabel();
        moDecimalOperativeHours = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlPitLevelUnit1 = new javax.swing.JLabel();
        jpRow37 = new javax.swing.JPanel();
        jlPelletStkStart = new javax.swing.JLabel();
        moDecimalPelletStkStart = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlPelletStkStartUnit = new javax.swing.JLabel();
        jpRow19 = new javax.swing.JPanel();
        jlPelletGrossWei = new javax.swing.JLabel();
        moDecimalPelletGrossWei = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlPelletGrossWeiUnit = new javax.swing.JLabel();
        jpRow20 = new javax.swing.JPanel();
        jlPelletBrokenWei = new javax.swing.JLabel();
        moDecimalPelletBrokenWei = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlPelletBrokenWeiUnit = new javax.swing.JLabel();
        jpRow21 = new javax.swing.JPanel();
        jlPelletNetWei = new javax.swing.JLabel();
        moDecimalPelletNetWei = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlPelletNetWeiUnit = new javax.swing.JLabel();
        jpRow22 = new javax.swing.JPanel();
        jlPelletToExt = new javax.swing.JLabel();
        moDecimalPelletToExt = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlPelletToExtUnit = new javax.swing.JLabel();
        jpRow28 = new javax.swing.JPanel();
        jlPelletToWaste = new javax.swing.JLabel();
        moDecimalPelletToWaste = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlPelletToWasteUnit = new javax.swing.JLabel();
        jpRow29 = new javax.swing.JPanel();
        jlPelletStkEnd = new javax.swing.JLabel();
        moDecimalPelletStkEnd = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlPelletStkEndUnit = new javax.swing.JLabel();
        jpRow23 = new javax.swing.JPanel();
        jlPelletOil = new javax.swing.JLabel();
        moDecimalPelletOil = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlPelletOilUnit = new javax.swing.JLabel();
        jpSeedAndPeel = new javax.swing.JPanel();
        jpSeedAndPellGrid = new javax.swing.JPanel();
        jpRow3 = new javax.swing.JPanel();
        jlSeedPeelToProc = new javax.swing.JLabel();
        moDecimalSeedPeelToProc = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlSeedPellToProdUnit = new javax.swing.JLabel();
        jpRow4 = new javax.swing.JPanel();
        jlSeedPeelProc = new javax.swing.JLabel();
        moDecimalSeedPeelProc = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlSeedPeelProcUnit = new javax.swing.JLabel();
        jpRow5 = new javax.swing.JPanel();
        jlSeedPeelOil = new javax.swing.JLabel();
        moDecimalSeedPeelOil = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlSeefPeelOilUnit = new javax.swing.JLabel();
        jpRow24 = new javax.swing.JPanel();
        jlSeedPeelToPlant = new javax.swing.JLabel();
        moDecimalSeedPeelToPlant = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlSeefPeelToPlantUnit = new javax.swing.JLabel();
        jpRow25 = new javax.swing.JPanel();
        jlSeedPeelToTerrain = new javax.swing.JLabel();
        moDecimalSeedPeelToTerrain = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlSeefPeelToTerrainUnit = new javax.swing.JLabel();
        jpRow26 = new javax.swing.JPanel();
        jlBagasseToPlant = new javax.swing.JLabel();
        moDecimalBagasseToPlant = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlBagasseToPlantUnit = new javax.swing.JLabel();
        jpRow27 = new javax.swing.JPanel();
        jlBagasseToTerrain = new javax.swing.JLabel();
        moDecimalBagasseToTerrain = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlBagasseToTerrainUnit = new javax.swing.JLabel();
        jpPit = new javax.swing.JPanel();
        jpPitGrid = new javax.swing.JPanel();
        jpRow2 = new javax.swing.JPanel();
        jlPitMeasureEmp = new javax.swing.JLabel();
        moIntPitMeasureEmp = new sa.lib.gui.bean.SBeanFieldInteger();
        jlPitMeasureUnit = new javax.swing.JLabel();
        jpRow30 = new javax.swing.JPanel();
        jlProcFruit = new javax.swing.JLabel();
        moDecimalProcFruit = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlFrocFruitUnit = new javax.swing.JLabel();
        jpRow31 = new javax.swing.JPanel();
        moRadioPitContEmp = new sa.lib.gui.bean.SBeanFieldRadio();
        jpRow36 = new javax.swing.JPanel();
        moRadioPitContGrin = new sa.lib.gui.bean.SBeanFieldRadio();
        jpRow33 = new javax.swing.JPanel();
        moRadioPitContEff = new sa.lib.gui.bean.SBeanFieldRadio();
        jpRow32 = new javax.swing.JPanel();
        jlPitContEmp = new javax.swing.JLabel();
        moDecimalPitContEmp = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlBagasseToTerrainUnit3 = new javax.swing.JLabel();
        jpRow34 = new javax.swing.JPanel();
        jlPitContGrin = new javax.swing.JLabel();
        moDecimalPitContGrin = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlPiitContGrinUnit = new javax.swing.JLabel();
        jpRow35 = new javax.swing.JPanel();
        jlPitContEff = new javax.swing.JLabel();
        moDecimalPitContEff = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlPitConfEffUnit = new javax.swing.JLabel();
        jpRow38 = new javax.swing.JPanel();
        jlBagGrinFact = new javax.swing.JLabel();
        moDecimalBagGrinFact = new sa.lib.gui.bean.SBeanFieldDecimal();
        jpRow39 = new javax.swing.JPanel();
        jlBagExtFact = new javax.swing.JLabel();
        moDecimalBagExtFact = new sa.lib.gui.bean.SBeanFieldDecimal();
        jpCenter = new javax.swing.JPanel();
        jpLabParams = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jpRow12 = new javax.swing.JPanel();
        jlLabAvoAci = new javax.swing.JLabel();
        moTextLabAvoAci = new sa.lib.gui.bean.SBeanFieldText();
        jlAvoAciUnit = new javax.swing.JLabel();
        jpRow13 = new javax.swing.JPanel();
        jlLabAvgBagOil = new javax.swing.JLabel();
        moTextLabAvgBagOil = new sa.lib.gui.bean.SBeanFieldText();
        jlLabAvgBagOilUnit = new javax.swing.JLabel();
        jpRow14 = new javax.swing.JPanel();
        jlLabMoi = new javax.swing.JLabel();
        moTextLabMoi = new sa.lib.gui.bean.SBeanFieldText();
        jlLabMoiUnit = new javax.swing.JLabel();
        jpRow15 = new javax.swing.JPanel();
        jlLabPelletOil = new javax.swing.JLabel();
        moTextLabPelletOil = new sa.lib.gui.bean.SBeanFieldText();
        jlLabPelletOilUnit = new javax.swing.JLabel();
        jpRow16 = new javax.swing.JPanel();
        jlLabPelletAci = new javax.swing.JLabel();
        moTextLabPelletAci = new sa.lib.gui.bean.SBeanFieldText();
        jlLabPelletAciUnit = new javax.swing.JLabel();
        jpFireplace = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jpRow17 = new javax.swing.JPanel();
        jlSSEfficiency = new javax.swing.JLabel();
        moDecimalSSEfficiency = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlSSEfficiencyUnit = new javax.swing.JLabel();
        jpRow18 = new javax.swing.JPanel();
        jlSSMonoxide = new javax.swing.JLabel();
        moIntSSMonoxide = new sa.lib.gui.bean.SBeanFieldInteger();
        jlSSMonocideUnit = new javax.swing.JLabel();
        jpGoalParameters = new javax.swing.JPanel();
        jpGoalParametersGrid = new javax.swing.JPanel();
        jpRow6 = new javax.swing.JPanel();
        jlGoalMoiProc = new javax.swing.JLabel();
        moDecimalGoalMoiProc = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlGoalMoiProcUnit = new javax.swing.JLabel();
        jpRow7 = new javax.swing.JPanel();
        jlGoalPelletProdPerHour = new javax.swing.JLabel();
        moDecimalGoalPelletProdPerHour = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlGoalPelletProdPerHourUnit = new javax.swing.JLabel();
        jpRow8 = new javax.swing.JPanel();
        jlGoalAvgEfficiency = new javax.swing.JLabel();
        moDecimalGoalAvgEfficiency = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlGoalAvgEfficiencyUnit = new javax.swing.JLabel();
        jpRow9 = new javax.swing.JPanel();
        jlGoalTotProd = new javax.swing.JLabel();
        moDecimalGoalTotProd = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlGoalTotProdUnit = new javax.swing.JLabel();
        jpRow10 = new javax.swing.JPanel();
        jlGoalPelletOil = new javax.swing.JLabel();
        moDecimalGoalPelletOil = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlGoalPelletOilUnit = new javax.swing.JLabel();
        jpRow11 = new javax.swing.JPanel();
        jlGoalAvgBagOil = new javax.swing.JLabel();
        moDecimalGoalAvgBagOil = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlGoalAvgBagOilUnit = new javax.swing.JLabel();

        jpRegistry.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpRegistry.setLayout(new java.awt.BorderLayout());

        jpNorth.setPreferredSize(new java.awt.Dimension(694, 345));
        jpNorth.setLayout(new java.awt.BorderLayout());

        jpDate.setLayout(new java.awt.GridLayout(1, 1, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha:*");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlDate);
        jPanel4.add(moDate);

        jbContinue.setText("Continuar");
        jbContinue.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jbContinue);

        moBoolWithoutProduction.setText("Sin producci√≥n");
        moBoolWithoutProduction.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel4.add(moBoolWithoutProduction);

        jbActTicWei.setText("Actualizar peso bruto");
        jbActTicWei.setPreferredSize(new java.awt.Dimension(160, 23));
        jPanel4.add(jbActTicWei);

        jpDate.add(jPanel4);

        jpNorth.add(jpDate, java.awt.BorderLayout.NORTH);

        jpNorthData.setPreferredSize(new java.awt.Dimension(694, 330));
        jpNorthData.setLayout(new java.awt.BorderLayout());

        jpDryer.setBorder(javax.swing.BorderFactory.createTitledBorder("Par√°metros secador:"));
        jpDryer.setLayout(new java.awt.BorderLayout());

        jpDryerGrid.setLayout(new java.awt.GridLayout(9, 0));

        jpRow1.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlOperativeHours.setText("Horas operativas:");
        jlOperativeHours.setPreferredSize(new java.awt.Dimension(170, 23));
        jpRow1.add(jlOperativeHours);
        jpRow1.add(moDecimalOperativeHours);

        jlPitLevelUnit1.setText("hr");
        jpRow1.add(jlPitLevelUnit1);

        jpDryerGrid.add(jpRow1);

        jpRow37.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow37.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlPelletStkStart.setText("Pellet inventario inicial:");
        jlPelletStkStart.setPreferredSize(new java.awt.Dimension(170, 23));
        jpRow37.add(jlPelletStkStart);

        moDecimalPelletStkStart.setEditable(false);
        moDecimalPelletStkStart.setText("");
        moDecimalPelletStkStart.setEnabled(false);
        jpRow37.add(moDecimalPelletStkStart);

        jlPelletStkStartUnit.setText("kg");
        jpRow37.add(jlPelletStkStartUnit);

        jpDryerGrid.add(jpRow37);

        jpRow19.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlPelletGrossWei.setText("Peso pellet bruto:");
        jlPelletGrossWei.setPreferredSize(new java.awt.Dimension(170, 23));
        jpRow19.add(jlPelletGrossWei);

        moDecimalPelletGrossWei.setEditable(false);
        moDecimalPelletGrossWei.setText("");
        moDecimalPelletGrossWei.setEnabled(false);
        jpRow19.add(moDecimalPelletGrossWei);

        jlPelletGrossWeiUnit.setText("kg");
        jpRow19.add(jlPelletGrossWeiUnit);

        jpDryerGrid.add(jpRow19);

        jpRow20.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlPelletBrokenWei.setText("Peso pellet quebrado:");
        jlPelletBrokenWei.setPreferredSize(new java.awt.Dimension(170, 23));
        jpRow20.add(jlPelletBrokenWei);
        jpRow20.add(moDecimalPelletBrokenWei);

        jlPelletBrokenWeiUnit.setText("kg");
        jpRow20.add(jlPelletBrokenWeiUnit);

        jpDryerGrid.add(jpRow20);

        jpRow21.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlPelletNetWei.setText("Peso pellet neto:");
        jlPelletNetWei.setPreferredSize(new java.awt.Dimension(170, 23));
        jpRow21.add(jlPelletNetWei);

        moDecimalPelletNetWei.setEditable(false);
        moDecimalPelletNetWei.setText("");
        moDecimalPelletNetWei.setEnabled(false);
        jpRow21.add(moDecimalPelletNetWei);

        jlPelletNetWeiUnit.setText("kg");
        jpRow21.add(jlPelletNetWeiUnit);

        jpDryerGrid.add(jpRow21);

        jpRow22.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlPelletToExt.setText("Pellet a extracci√≥n:");
        jlPelletToExt.setPreferredSize(new java.awt.Dimension(170, 23));
        jpRow22.add(jlPelletToExt);

        moDecimalPelletToExt.setText("");
        jpRow22.add(moDecimalPelletToExt);

        jlPelletToExtUnit.setText("kg");
        jpRow22.add(jlPelletToExtUnit);

        jpDryerGrid.add(jpRow22);

        jpRow28.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow28.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlPelletToWaste.setText("Pellet a desecho:");
        jlPelletToWaste.setPreferredSize(new java.awt.Dimension(170, 23));
        jpRow28.add(jlPelletToWaste);

        moDecimalPelletToWaste.setText("");
        jpRow28.add(moDecimalPelletToWaste);

        jlPelletToWasteUnit.setText("kg");
        jpRow28.add(jlPelletToWasteUnit);

        jpDryerGrid.add(jpRow28);

        jpRow29.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlPelletStkEnd.setText("Pellet inventario final:");
        jlPelletStkEnd.setPreferredSize(new java.awt.Dimension(170, 23));
        jpRow29.add(jlPelletStkEnd);

        moDecimalPelletStkEnd.setEditable(false);
        moDecimalPelletStkEnd.setText("");
        moDecimalPelletStkEnd.setEnabled(false);
        jpRow29.add(moDecimalPelletStkEnd);

        jlPelletStkEndUnit.setText("kg");
        jpRow29.add(jlPelletStkEndUnit);

        jpDryerGrid.add(jpRow29);

        jpRow23.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlPelletOil.setText("Aceite de pellet:");
        jlPelletOil.setPreferredSize(new java.awt.Dimension(170, 23));
        jpRow23.add(jlPelletOil);

        moDecimalPelletOil.setText("");
        jpRow23.add(moDecimalPelletOil);

        jlPelletOilUnit.setText("kg");
        jpRow23.add(jlPelletOilUnit);

        jpDryerGrid.add(jpRow23);

        jpDryer.add(jpDryerGrid, java.awt.BorderLayout.NORTH);

        jpNorthData.add(jpDryer, java.awt.BorderLayout.WEST);

        jpSeedAndPeel.setBorder(javax.swing.BorderFactory.createTitledBorder("Par√°metros HYC y bagazo:"));
        jpSeedAndPeel.setLayout(new java.awt.BorderLayout());

        jpSeedAndPellGrid.setLayout(new java.awt.GridLayout(10, 0));

        jpRow3.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlSeedPeelToProc.setText("HYC en planta x procesar:");
        jlSeedPeelToProc.setPreferredSize(new java.awt.Dimension(155, 23));
        jpRow3.add(jlSeedPeelToProc);
        jpRow3.add(moDecimalSeedPeelToProc);

        jlSeedPellToProdUnit.setText("kg");
        jpRow3.add(jlSeedPellToProdUnit);

        jpSeedAndPellGrid.add(jpRow3);

        jpRow4.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlSeedPeelProc.setText("HYC procesado:");
        jlSeedPeelProc.setPreferredSize(new java.awt.Dimension(155, 23));
        jpRow4.add(jlSeedPeelProc);
        jpRow4.add(moDecimalSeedPeelProc);

        jlSeedPeelProcUnit.setText("kg");
        jpRow4.add(jlSeedPeelProcUnit);

        jpSeedAndPellGrid.add(jpRow4);

        jpRow5.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlSeedPeelOil.setText("Aceite de HYC:");
        jlSeedPeelOil.setPreferredSize(new java.awt.Dimension(155, 23));
        jpRow5.add(jlSeedPeelOil);
        jpRow5.add(moDecimalSeedPeelOil);

        jlSeefPeelOilUnit.setText("kg");
        jpRow5.add(jlSeefPeelOilUnit);

        jpSeedAndPellGrid.add(jpRow5);

        jpRow24.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlSeedPeelToPlant.setText("HYC a planta:");
        jlSeedPeelToPlant.setPreferredSize(new java.awt.Dimension(155, 23));
        jpRow24.add(jlSeedPeelToPlant);
        jpRow24.add(moDecimalSeedPeelToPlant);

        jlSeefPeelToPlantUnit.setText("kg");
        jpRow24.add(jlSeefPeelToPlantUnit);

        jpSeedAndPellGrid.add(jpRow24);

        jpRow25.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlSeedPeelToTerrain.setText("HYC a terreno:");
        jlSeedPeelToTerrain.setPreferredSize(new java.awt.Dimension(155, 23));
        jpRow25.add(jlSeedPeelToTerrain);
        jpRow25.add(moDecimalSeedPeelToTerrain);

        jlSeefPeelToTerrainUnit.setText("kg");
        jpRow25.add(jlSeefPeelToTerrainUnit);

        jpSeedAndPellGrid.add(jpRow25);

        jpRow26.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlBagasseToPlant.setText("Bagazo externo a planta:");
        jlBagasseToPlant.setPreferredSize(new java.awt.Dimension(155, 23));
        jpRow26.add(jlBagasseToPlant);
        jpRow26.add(moDecimalBagasseToPlant);

        jlBagasseToPlantUnit.setText("kg");
        jpRow26.add(jlBagasseToPlantUnit);

        jpSeedAndPellGrid.add(jpRow26);

        jpRow27.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow27.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlBagasseToTerrain.setText("Bagazo externo a terreno:");
        jlBagasseToTerrain.setPreferredSize(new java.awt.Dimension(155, 23));
        jpRow27.add(jlBagasseToTerrain);
        jpRow27.add(moDecimalBagasseToTerrain);

        jlBagasseToTerrainUnit.setText("kg");
        jpRow27.add(jlBagasseToTerrainUnit);

        jpSeedAndPellGrid.add(jpRow27);

        jpSeedAndPeel.add(jpSeedAndPellGrid, java.awt.BorderLayout.NORTH);

        jpNorthData.add(jpSeedAndPeel, java.awt.BorderLayout.CENTER);

        jpPit.setBorder(javax.swing.BorderFactory.createTitledBorder("Fosa:"));
        jpPit.setPreferredSize(new java.awt.Dimension(325, 173));
        jpPit.setLayout(new java.awt.BorderLayout());

        jpPitGrid.setLayout(new java.awt.GridLayout(10, 0));

        jpRow2.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlPitMeasureEmp.setText("Medida vac√≠o fosa:");
        jlPitMeasureEmp.setPreferredSize(new java.awt.Dimension(170, 23));
        jpRow2.add(jlPitMeasureEmp);
        jpRow2.add(moIntPitMeasureEmp);

        jlPitMeasureUnit.setText("cm");
        jpRow2.add(jlPitMeasureUnit);

        jpPitGrid.add(jpRow2);

        jpRow30.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlProcFruit.setText("Fruta procesada:");
        jlProcFruit.setPreferredSize(new java.awt.Dimension(170, 23));
        jpRow30.add(jlProcFruit);

        moDecimalProcFruit.setEditable(false);
        moDecimalProcFruit.setEnabled(false);
        jpRow30.add(moDecimalProcFruit);

        jlFrocFruitUnit.setText("kg");
        jpRow30.add(jlFrocFruitUnit);

        jpPitGrid.add(jpRow30);

        jpRow31.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow31.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        buttonGroup1.add(moRadioPitContEmp);
        moRadioPitContEmp.setSelected(true);
        moRadioPitContEmp.setText("Contenido en fosa de vac√≠o");
        moRadioPitContEmp.setPreferredSize(new java.awt.Dimension(215, 23));
        jpRow31.add(moRadioPitContEmp);

        jpPitGrid.add(jpRow31);

        jpRow36.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow36.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        buttonGroup1.add(moRadioPitContGrin);
        moRadioPitContGrin.setText("Contenido en fosa de molienda");
        moRadioPitContGrin.setPreferredSize(new java.awt.Dimension(215, 23));
        jpRow36.add(moRadioPitContGrin);

        jpPitGrid.add(jpRow36);

        jpRow33.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow33.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        buttonGroup1.add(moRadioPitContEff);
        moRadioPitContEff.setText("Contenido en fosa efectivo");
        moRadioPitContEff.setPreferredSize(new java.awt.Dimension(215, 23));
        jpRow33.add(moRadioPitContEff);

        jpPitGrid.add(jpRow33);

        jpRow32.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow32.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlPitContEmp.setText("Contenido fosa de vac√≠o:");
        jlPitContEmp.setPreferredSize(new java.awt.Dimension(170, 23));
        jpRow32.add(jlPitContEmp);

        moDecimalPitContEmp.setEditable(false);
        moDecimalPitContEmp.setEnabled(false);
        jpRow32.add(moDecimalPitContEmp);

        jlBagasseToTerrainUnit3.setText("kg");
        jpRow32.add(jlBagasseToTerrainUnit3);

        jpPitGrid.add(jpRow32);

        jpRow34.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow34.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlPitContGrin.setText("Contenido fosa de molienda:");
        jlPitContGrin.setPreferredSize(new java.awt.Dimension(170, 23));
        jpRow34.add(jlPitContGrin);

        moDecimalPitContGrin.setEditable(false);
        moDecimalPitContGrin.setEnabled(false);
        jpRow34.add(moDecimalPitContGrin);

        jlPiitContGrinUnit.setText("kg");
        jpRow34.add(jlPiitContGrinUnit);

        jpPitGrid.add(jpRow34);

        jpRow35.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow35.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlPitContEff.setText("Contenido fosa efectivo:");
        jlPitContEff.setPreferredSize(new java.awt.Dimension(170, 23));
        jpRow35.add(jlPitContEff);
        jpRow35.add(moDecimalPitContEff);

        jlPitConfEffUnit.setText("kg");
        jpRow35.add(jlPitConfEffUnit);

        jpPitGrid.add(jpRow35);

        jpRow38.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow38.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlBagGrinFact.setText("Factor bagazo molienda:");
        jlBagGrinFact.setPreferredSize(new java.awt.Dimension(170, 23));
        jpRow38.add(jlBagGrinFact);

        moDecimalBagGrinFact.setEditable(false);
        moDecimalBagGrinFact.setEnabled(false);
        jpRow38.add(moDecimalBagGrinFact);

        jpPitGrid.add(jpRow38);

        jpRow39.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow39.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlBagExtFact.setText("Factor bagazo externo:");
        jlBagExtFact.setPreferredSize(new java.awt.Dimension(170, 23));
        jpRow39.add(jlBagExtFact);

        moDecimalBagExtFact.setEditable(false);
        moDecimalBagExtFact.setEnabled(false);
        jpRow39.add(moDecimalBagExtFact);

        jpPitGrid.add(jpRow39);

        jpPit.add(jpPitGrid, java.awt.BorderLayout.NORTH);

        jpNorthData.add(jpPit, java.awt.BorderLayout.EAST);

        jpNorth.add(jpNorthData, java.awt.BorderLayout.CENTER);

        jpRegistry.add(jpNorth, java.awt.BorderLayout.NORTH);

        jpCenter.setLayout(new java.awt.BorderLayout());

        jpLabParams.setBorder(javax.swing.BorderFactory.createTitledBorder("Resultados laboratorio pellet:"));
        jpLabParams.setPreferredSize(new java.awt.Dimension(315, 200));
        jpLabParams.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(5, 0));

        jpRow12.setPreferredSize(new java.awt.Dimension(299, 30));
        jpRow12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlLabAvoAci.setText("Acidez planta aguacate:");
        jlLabAvoAci.setPreferredSize(new java.awt.Dimension(170, 23));
        jpRow12.add(jlLabAvoAci);

        moTextLabAvoAci.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jpRow12.add(moTextLabAvoAci);

        jlAvoAciUnit.setText("%");
        jpRow12.add(jlAvoAciUnit);

        jPanel2.add(jpRow12);

        jpRow13.setPreferredSize(new java.awt.Dimension(299, 30));
        jpRow13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlLabAvgBagOil.setText("Aceite promedio bagazo B/S:");
        jlLabAvgBagOil.setPreferredSize(new java.awt.Dimension(170, 23));
        jpRow13.add(jlLabAvgBagOil);

        moTextLabAvgBagOil.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jpRow13.add(moTextLabAvgBagOil);

        jlLabAvgBagOilUnit.setText("%");
        jpRow13.add(jlLabAvgBagOilUnit);

        jPanel2.add(jpRow13);

        jpRow14.setPreferredSize(new java.awt.Dimension(299, 30));
        jpRow14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlLabMoi.setText("Humedad:");
        jlLabMoi.setPreferredSize(new java.awt.Dimension(170, 23));
        jpRow14.add(jlLabMoi);

        moTextLabMoi.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jpRow14.add(moTextLabMoi);

        jlLabMoiUnit.setText("%");
        jpRow14.add(jlLabMoiUnit);

        jPanel2.add(jpRow14);

        jpRow15.setPreferredSize(new java.awt.Dimension(299, 30));
        jpRow15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlLabPelletOil.setText("Aceite en pellet:");
        jlLabPelletOil.setPreferredSize(new java.awt.Dimension(170, 23));
        jpRow15.add(jlLabPelletOil);

        moTextLabPelletOil.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jpRow15.add(moTextLabPelletOil);

        jlLabPelletOilUnit.setText("%");
        jpRow15.add(jlLabPelletOilUnit);

        jPanel2.add(jpRow15);

        jpRow16.setPreferredSize(new java.awt.Dimension(299, 30));
        jpRow16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlLabPelletAci.setText("Acidez en pelletizadora:");
        jlLabPelletAci.setPreferredSize(new java.awt.Dimension(170, 23));
        jpRow16.add(jlLabPelletAci);

        moTextLabPelletAci.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jpRow16.add(moTextLabPelletAci);

        jlLabPelletAciUnit.setText("%");
        jpRow16.add(jlLabPelletAciUnit);

        jPanel2.add(jpRow16);

        jpLabParams.add(jPanel2, java.awt.BorderLayout.NORTH);

        jpCenter.add(jpLabParams, java.awt.BorderLayout.WEST);

        jpFireplace.setBorder(javax.swing.BorderFactory.createTitledBorder("Par√°metros chimenea:"));
        jpFireplace.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(2, 0));

        jpRow17.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlSSEfficiency.setText("Eficiencia:");
        jlSSEfficiency.setPreferredSize(new java.awt.Dimension(150, 23));
        jpRow17.add(jlSSEfficiency);
        jpRow17.add(moDecimalSSEfficiency);

        jlSSEfficiencyUnit.setText("%");
        jpRow17.add(jlSSEfficiencyUnit);

        jPanel1.add(jpRow17);

        jpRow18.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlSSMonoxide.setText("Mon√≥xido de carbono:");
        jlSSMonoxide.setPreferredSize(new java.awt.Dimension(150, 23));
        jpRow18.add(jlSSMonoxide);
        jpRow18.add(moIntSSMonoxide);

        jlSSMonocideUnit.setText("ppm");
        jpRow18.add(jlSSMonocideUnit);

        jPanel1.add(jpRow18);

        jpFireplace.add(jPanel1, java.awt.BorderLayout.NORTH);

        jpCenter.add(jpFireplace, java.awt.BorderLayout.CENTER);

        jpGoalParameters.setBorder(javax.swing.BorderFactory.createTitledBorder("Par√°metros meta:"));
        jpGoalParameters.setPreferredSize(new java.awt.Dimension(325, 203));
        jpGoalParameters.setLayout(new java.awt.BorderLayout());

        jpGoalParametersGrid.setLayout(new java.awt.GridLayout(6, 0));

        jpRow6.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlGoalMoiProc.setText("H√∫medo procesado:*");
        jlGoalMoiProc.setPreferredSize(new java.awt.Dimension(170, 23));
        jpRow6.add(jlGoalMoiProc);
        jpRow6.add(moDecimalGoalMoiProc);

        jlGoalMoiProcUnit.setText("kg");
        jpRow6.add(jlGoalMoiProcUnit);

        jpGoalParametersGrid.add(jpRow6);

        jpRow7.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlGoalPelletProdPerHour.setText("Producci√≥n pellet x hr:*");
        jlGoalPelletProdPerHour.setPreferredSize(new java.awt.Dimension(170, 23));
        jpRow7.add(jlGoalPelletProdPerHour);
        jpRow7.add(moDecimalGoalPelletProdPerHour);

        jlGoalPelletProdPerHourUnit.setText("kg/hr");
        jpRow7.add(jlGoalPelletProdPerHourUnit);

        jpGoalParametersGrid.add(jpRow7);

        jpRow8.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlGoalAvgEfficiency.setText("Eficiencia promedio:*");
        jlGoalAvgEfficiency.setPreferredSize(new java.awt.Dimension(170, 23));
        jpRow8.add(jlGoalAvgEfficiency);
        jpRow8.add(moDecimalGoalAvgEfficiency);

        jlGoalAvgEfficiencyUnit.setText("%");
        jpRow8.add(jlGoalAvgEfficiencyUnit);

        jpGoalParametersGrid.add(jpRow8);

        jpRow9.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlGoalTotProd.setText("Peso pellet neto:*");
        jlGoalTotProd.setPreferredSize(new java.awt.Dimension(170, 23));
        jpRow9.add(jlGoalTotProd);
        jpRow9.add(moDecimalGoalTotProd);

        jlGoalTotProdUnit.setText("kg");
        jpRow9.add(jlGoalTotProdUnit);

        jpGoalParametersGrid.add(jpRow9);

        jpRow10.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlGoalPelletOil.setText("Aceite en pellet:*");
        jlGoalPelletOil.setPreferredSize(new java.awt.Dimension(170, 23));
        jpRow10.add(jlGoalPelletOil);
        jpRow10.add(moDecimalGoalPelletOil);

        jlGoalPelletOilUnit.setText("%");
        jpRow10.add(jlGoalPelletOilUnit);

        jpGoalParametersGrid.add(jpRow10);

        jpRow11.setPreferredSize(new java.awt.Dimension(304, 30));
        jpRow11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlGoalAvgBagOil.setText("Aceite promedio bagazo B/S:*");
        jlGoalAvgBagOil.setPreferredSize(new java.awt.Dimension(170, 23));
        jpRow11.add(jlGoalAvgBagOil);
        jpRow11.add(moDecimalGoalAvgBagOil);

        jlGoalAvgBagOilUnit.setText("%");
        jpRow11.add(jlGoalAvgBagOilUnit);

        jpGoalParametersGrid.add(jpRow11);

        jpGoalParameters.add(jpGoalParametersGrid, java.awt.BorderLayout.NORTH);

        jpCenter.add(jpGoalParameters, java.awt.BorderLayout.EAST);

        jpRegistry.add(jpCenter, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpRegistry, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton jbActTicWei;
    private javax.swing.JButton jbContinue;
    private javax.swing.JLabel jlAvoAciUnit;
    private javax.swing.JLabel jlBagExtFact;
    private javax.swing.JLabel jlBagGrinFact;
    private javax.swing.JLabel jlBagasseToPlant;
    private javax.swing.JLabel jlBagasseToPlantUnit;
    private javax.swing.JLabel jlBagasseToTerrain;
    private javax.swing.JLabel jlBagasseToTerrainUnit;
    private javax.swing.JLabel jlBagasseToTerrainUnit3;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlFrocFruitUnit;
    private javax.swing.JLabel jlGoalAvgBagOil;
    private javax.swing.JLabel jlGoalAvgBagOilUnit;
    private javax.swing.JLabel jlGoalAvgEfficiency;
    private javax.swing.JLabel jlGoalAvgEfficiencyUnit;
    private javax.swing.JLabel jlGoalMoiProc;
    private javax.swing.JLabel jlGoalMoiProcUnit;
    private javax.swing.JLabel jlGoalPelletOil;
    private javax.swing.JLabel jlGoalPelletOilUnit;
    private javax.swing.JLabel jlGoalPelletProdPerHour;
    private javax.swing.JLabel jlGoalPelletProdPerHourUnit;
    private javax.swing.JLabel jlGoalTotProd;
    private javax.swing.JLabel jlGoalTotProdUnit;
    private javax.swing.JLabel jlLabAvgBagOil;
    private javax.swing.JLabel jlLabAvgBagOilUnit;
    private javax.swing.JLabel jlLabAvoAci;
    private javax.swing.JLabel jlLabMoi;
    private javax.swing.JLabel jlLabMoiUnit;
    private javax.swing.JLabel jlLabPelletAci;
    private javax.swing.JLabel jlLabPelletAciUnit;
    private javax.swing.JLabel jlLabPelletOil;
    private javax.swing.JLabel jlLabPelletOilUnit;
    private javax.swing.JLabel jlOperativeHours;
    private javax.swing.JLabel jlPelletBrokenWei;
    private javax.swing.JLabel jlPelletBrokenWeiUnit;
    private javax.swing.JLabel jlPelletGrossWei;
    private javax.swing.JLabel jlPelletGrossWeiUnit;
    private javax.swing.JLabel jlPelletNetWei;
    private javax.swing.JLabel jlPelletNetWeiUnit;
    private javax.swing.JLabel jlPelletOil;
    private javax.swing.JLabel jlPelletOilUnit;
    private javax.swing.JLabel jlPelletStkEnd;
    private javax.swing.JLabel jlPelletStkEndUnit;
    private javax.swing.JLabel jlPelletStkStart;
    private javax.swing.JLabel jlPelletStkStartUnit;
    private javax.swing.JLabel jlPelletToExt;
    private javax.swing.JLabel jlPelletToExtUnit;
    private javax.swing.JLabel jlPelletToWaste;
    private javax.swing.JLabel jlPelletToWasteUnit;
    private javax.swing.JLabel jlPiitContGrinUnit;
    private javax.swing.JLabel jlPitConfEffUnit;
    private javax.swing.JLabel jlPitContEff;
    private javax.swing.JLabel jlPitContEmp;
    private javax.swing.JLabel jlPitContGrin;
    private javax.swing.JLabel jlPitLevelUnit1;
    private javax.swing.JLabel jlPitMeasureEmp;
    private javax.swing.JLabel jlPitMeasureUnit;
    private javax.swing.JLabel jlProcFruit;
    private javax.swing.JLabel jlSSEfficiency;
    private javax.swing.JLabel jlSSEfficiencyUnit;
    private javax.swing.JLabel jlSSMonocideUnit;
    private javax.swing.JLabel jlSSMonoxide;
    private javax.swing.JLabel jlSeedPeelOil;
    private javax.swing.JLabel jlSeedPeelProc;
    private javax.swing.JLabel jlSeedPeelProcUnit;
    private javax.swing.JLabel jlSeedPeelToPlant;
    private javax.swing.JLabel jlSeedPeelToProc;
    private javax.swing.JLabel jlSeedPeelToTerrain;
    private javax.swing.JLabel jlSeedPellToProdUnit;
    private javax.swing.JLabel jlSeefPeelOilUnit;
    private javax.swing.JLabel jlSeefPeelToPlantUnit;
    private javax.swing.JLabel jlSeefPeelToTerrainUnit;
    private javax.swing.JPanel jpCenter;
    private javax.swing.JPanel jpDate;
    private javax.swing.JPanel jpDryer;
    private javax.swing.JPanel jpDryerGrid;
    private javax.swing.JPanel jpFireplace;
    private javax.swing.JPanel jpGoalParameters;
    private javax.swing.JPanel jpGoalParametersGrid;
    private javax.swing.JPanel jpLabParams;
    private javax.swing.JPanel jpNorth;
    private javax.swing.JPanel jpNorthData;
    private javax.swing.JPanel jpPit;
    private javax.swing.JPanel jpPitGrid;
    private javax.swing.JPanel jpRegistry;
    private javax.swing.JPanel jpRow1;
    private javax.swing.JPanel jpRow10;
    private javax.swing.JPanel jpRow11;
    private javax.swing.JPanel jpRow12;
    private javax.swing.JPanel jpRow13;
    private javax.swing.JPanel jpRow14;
    private javax.swing.JPanel jpRow15;
    private javax.swing.JPanel jpRow16;
    private javax.swing.JPanel jpRow17;
    private javax.swing.JPanel jpRow18;
    private javax.swing.JPanel jpRow19;
    private javax.swing.JPanel jpRow2;
    private javax.swing.JPanel jpRow20;
    private javax.swing.JPanel jpRow21;
    private javax.swing.JPanel jpRow22;
    private javax.swing.JPanel jpRow23;
    private javax.swing.JPanel jpRow24;
    private javax.swing.JPanel jpRow25;
    private javax.swing.JPanel jpRow26;
    private javax.swing.JPanel jpRow27;
    private javax.swing.JPanel jpRow28;
    private javax.swing.JPanel jpRow29;
    private javax.swing.JPanel jpRow3;
    private javax.swing.JPanel jpRow30;
    private javax.swing.JPanel jpRow31;
    private javax.swing.JPanel jpRow32;
    private javax.swing.JPanel jpRow33;
    private javax.swing.JPanel jpRow34;
    private javax.swing.JPanel jpRow35;
    private javax.swing.JPanel jpRow36;
    private javax.swing.JPanel jpRow37;
    private javax.swing.JPanel jpRow38;
    private javax.swing.JPanel jpRow39;
    private javax.swing.JPanel jpRow4;
    private javax.swing.JPanel jpRow5;
    private javax.swing.JPanel jpRow6;
    private javax.swing.JPanel jpRow7;
    private javax.swing.JPanel jpRow8;
    private javax.swing.JPanel jpRow9;
    private javax.swing.JPanel jpSeedAndPeel;
    private javax.swing.JPanel jpSeedAndPellGrid;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolWithoutProduction;
    private sa.lib.gui.bean.SBeanFieldDate moDate;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalBagExtFact;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalBagGrinFact;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalBagasseToPlant;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalBagasseToTerrain;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalGoalAvgBagOil;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalGoalAvgEfficiency;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalGoalMoiProc;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalGoalPelletOil;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalGoalPelletProdPerHour;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalGoalTotProd;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalOperativeHours;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalPelletBrokenWei;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalPelletGrossWei;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalPelletNetWei;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalPelletOil;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalPelletStkEnd;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalPelletStkStart;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalPelletToExt;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalPelletToWaste;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalPitContEff;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalPitContEmp;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalPitContGrin;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalProcFruit;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalSSEfficiency;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalSeedPeelOil;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalSeedPeelProc;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalSeedPeelToPlant;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalSeedPeelToProc;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalSeedPeelToTerrain;
    private sa.lib.gui.bean.SBeanFieldInteger moIntPitMeasureEmp;
    private sa.lib.gui.bean.SBeanFieldInteger moIntSSMonoxide;
    private sa.lib.gui.bean.SBeanFieldRadio moRadioPitContEff;
    private sa.lib.gui.bean.SBeanFieldRadio moRadioPitContEmp;
    private sa.lib.gui.bean.SBeanFieldRadio moRadioPitContGrin;
    private sa.lib.gui.bean.SBeanFieldText moTextLabAvgBagOil;
    private sa.lib.gui.bean.SBeanFieldText moTextLabAvoAci;
    private sa.lib.gui.bean.SBeanFieldText moTextLabMoi;
    private sa.lib.gui.bean.SBeanFieldText moTextLabPelletAci;
    private sa.lib.gui.bean.SBeanFieldText moTextLabPelletOil;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 960, 600);

        moDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate), true);
        moBoolWithoutProduction.setBooleanSettings(moBoolWithoutProduction.getText(), false);
        
        moDecimalOperativeHours.setDecimalSettings(SGuiUtils.getLabelName(jlOperativeHours), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecimalPelletGrossWei.setDecimalSettings(SGuiUtils.getLabelName(jlPelletGrossWei), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecimalPelletBrokenWei.setDecimalSettings(SGuiUtils.getLabelName(jlPelletBrokenWei), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecimalPelletNetWei.setDecimalSettings(SGuiUtils.getLabelName(jlPelletNetWei), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecimalPelletToExt.setDecimalSettings(SGuiUtils.getLabelName(jlPelletToExt), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecimalPelletToWaste.setDecimalSettings(SGuiUtils.getLabelName(jlPelletToWaste), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecimalPelletStkEnd.setDecimalSettings(SGuiUtils.getLabelName(jlPelletStkEnd), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecimalPelletOil.setDecimalSettings(SGuiUtils.getLabelName(jlPelletOil), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        
        moDecimalSeedPeelProc.setDecimalSettings(SGuiUtils.getLabelName(jlSeedPeelProc), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecimalSeedPeelToProc.setDecimalSettings(SGuiUtils.getLabelName(jlSeedPeelToProc), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecimalSeedPeelOil.setDecimalSettings(SGuiUtils.getLabelName(jlSeedPeelOil), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecimalSeedPeelToPlant.setDecimalSettings(SGuiUtils.getLabelName(jlSeedPeelToPlant), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecimalSeedPeelToTerrain.setDecimalSettings(SGuiUtils.getLabelName(jlSeedPeelToTerrain), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecimalBagasseToPlant.setDecimalSettings(SGuiUtils.getLabelName(jlBagasseToPlant), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecimalBagasseToTerrain.setDecimalSettings(SGuiUtils.getLabelName(jlBagasseToTerrain), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        
        moIntPitMeasureEmp.setIntegerSettings(SGuiUtils.getLabelName(jlPitMeasureEmp), SGuiConsts.GUI_TYPE_INT, false);
        moDecimalProcFruit.setDecimalSettings(SGuiUtils.getLabelName(jlProcFruit), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moRadioPitContEmp.setBooleanSettings(SGuiUtils.getLabelName(moRadioPitContEmp.getText()), false);
        moRadioPitContGrin.setBooleanSettings(SGuiUtils.getLabelName(moRadioPitContGrin.getText()), false);
        moRadioPitContEff.setBooleanSettings(SGuiUtils.getLabelName(moRadioPitContEff.getText()), false);
        moDecimalPitContEmp.setDecimalSettings(SGuiUtils.getLabelName(jlPitContEmp), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecimalPitContGrin.setDecimalSettings(SGuiUtils.getLabelName(jlPitContGrin), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecimalPitContEff.setDecimalSettings(SGuiUtils.getLabelName(jlPitContEff), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecimalBagGrinFact.setDecimalSettings(SGuiUtils.getLabelName(jlBagGrinFact), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecimalBagExtFact.setDecimalSettings(SGuiUtils.getLabelName(jlBagExtFact), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        
        moDecimalGoalMoiProc.setDecimalSettings(SGuiUtils.getLabelName(jlGoalMoiProc), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moDecimalGoalPelletProdPerHour.setDecimalSettings(SGuiUtils.getLabelName(jlGoalPelletProdPerHour), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moDecimalGoalAvgEfficiency.setDecimalSettings(SGuiUtils.getLabelName(jlGoalAvgEfficiency), SGuiConsts.GUI_TYPE_DEC_PER, true);
        moDecimalGoalTotProd.setDecimalSettings(SGuiUtils.getLabelName(jlGoalTotProd), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moDecimalGoalPelletOil.setDecimalSettings(SGuiUtils.getLabelName(jlGoalPelletOil), SGuiConsts.GUI_TYPE_DEC_PER, true);
        moDecimalGoalAvgBagOil.setDecimalSettings(SGuiUtils.getLabelName(jlGoalAvgBagOil), SGuiConsts.GUI_TYPE_DEC_PER, true);
        
        moTextLabAvoAci.setTextSettings(SGuiUtils.getLabelName(jlLabAvoAci), 9, 0);
        moTextLabAvgBagOil.setTextSettings(SGuiUtils.getLabelName(jlLabAvgBagOil), 9, 0);
        moTextLabMoi.setTextSettings(SGuiUtils.getLabelName(jlLabMoi), 9, 0);
        moTextLabPelletOil.setTextSettings(SGuiUtils.getLabelName(jlLabPelletOil), 9, 0);
        moTextLabPelletAci.setTextSettings(SGuiUtils.getLabelName(jlLabPelletAci), 9, 0);
        
        moDecimalSSEfficiency.setDecimalSettings(SGuiUtils.getLabelName(jlSSEfficiency), SGuiConsts.GUI_TYPE_DEC_PER, false);
        moIntSSMonoxide.setIntegerSettings(SGuiUtils.getLabelName(jlSSMonoxide), SGuiConsts.GUI_TYPE_INT, false);

        moFields.addField(moDate);
        moFields.addField(moBoolWithoutProduction);
        moFields.addField(moDecimalOperativeHours);
        moFields.addField(moDecimalPelletGrossWei);
        moFields.addField(moDecimalPelletBrokenWei);
        moFields.addField(moDecimalPelletNetWei);
        moFields.addField(moDecimalPelletToExt);
        moFields.addField(moDecimalPelletToWaste);
        moFields.addField(moDecimalPelletStkEnd);
        moFields.addField(moDecimalPelletOil);
        moFields.addField(moDecimalSeedPeelProc);
        moFields.addField(moDecimalSeedPeelToProc);
        moFields.addField(moDecimalSeedPeelOil);
        moFields.addField(moDecimalSeedPeelToPlant);
        moFields.addField(moDecimalSeedPeelToTerrain);
        moFields.addField(moDecimalBagasseToPlant);
        moFields.addField(moDecimalBagasseToTerrain);
        moFields.addField(moIntPitMeasureEmp);
        moFields.addField(moDecimalProcFruit);
        moFields.addField(moRadioPitContEmp);
        moFields.addField(moRadioPitContGrin);
        moFields.addField(moRadioPitContEff);
        moFields.addField(moDecimalPitContEmp);
        moFields.addField(moDecimalPitContGrin);
        moFields.addField(moDecimalPitContEff);
        moFields.addField(moDecimalBagGrinFact);
        moFields.addField(moDecimalBagExtFact);
        moFields.addField(moDecimalGoalMoiProc);
        moFields.addField(moDecimalGoalPelletProdPerHour);
        moFields.addField(moDecimalGoalAvgEfficiency);
        moFields.addField(moDecimalGoalTotProd);
        moFields.addField(moDecimalGoalPelletOil);
        moFields.addField(moDecimalGoalAvgBagOil);
        moFields.addField(moTextLabAvoAci);
        moFields.addField(moTextLabAvgBagOil);
        moFields.addField(moTextLabMoi);
        moFields.addField(moTextLabPelletOil);
        moFields.addField(moTextLabPelletAci);
        moFields.addField(moDecimalSSEfficiency);
        moFields.addField(moIntSSMonoxide);
        
        moFields.setFormButton(jbSave);
        
    }
    
    private double getTotPelletRevueltaByDate(Date date) {
        try {
            if (moConnectionRevuelta == null) {
                openConnectionToRevuelta();
            }
            if (moConnectionRevuelta != null) {
                Date lastDay = SLibTimeUtils.addDate(date, SLibConsts.UNDEFINED, SLibConsts.UNDEFINED, -1);
                String sql = "SELECT SUM(Pes_Neto) FROM dba.Pesadas "
                    + "WHERE Usb_ID = 'ACTH' AND Pro_Id = 'PAAG' "
                    + "AND Pes_FecHor BETWEEN '" + SLibUtils.DbmsDateFormatDate.format(lastDay) + " 06:30:00' AND '" + SLibUtils.DbmsDateFormatDate.format(date) + " 06:29:59' ";
                ResultSet resultSet = moConnectionRevuelta.createStatement().executeQuery(sql);
                if (resultSet.next()) {
                    return resultSet.getDouble(1);
                }
            }
        } 
        catch (Exception e) {}
        return 0.0;
    }
    
    private void openConnectionToRevuelta() {
        moConnectionRevuelta = SSomUtils.openConnectionRevueltaJdbc(miClient.getSession());
        if (moConnectionRevuelta == null) {
            miClient.showMsgBoxWarning("No se pudo establecer comunicaci√≥n con el sistema Revuelta.");
        }
    }
    
    private void enableComponents(boolean enable) {
        jbActTicWei.setEnabled(enable);
        moDecimalOperativeHours.setEnabled(enable);
        moDecimalPelletBrokenWei.setEnabled(enable);
        moDecimalPelletToExt.setEnabled(enable);
        moDecimalPelletOil.setEnabled(enable);
        moDecimalPelletToWaste.setEnabled(enable);
        moDecimalSeedPeelProc.setEnabled(enable);
        moDecimalSeedPeelToProc.setEnabled(enable);
        moDecimalSeedPeelOil.setEnabled(enable);
        moDecimalSeedPeelToPlant.setEnabled(enable);
        moDecimalSeedPeelToTerrain.setEnabled(enable);
        moDecimalBagasseToPlant.setEnabled(enable);
        moDecimalBagasseToTerrain.setEnabled(enable);
        moIntPitMeasureEmp.setEnabled(enable);
        moDecimalPitContEff.setEnabled(enable);
        moDecimalGoalMoiProc.setEnabled(enable);
        moDecimalGoalPelletProdPerHour.setEnabled(enable);
        moDecimalGoalAvgEfficiency.setEnabled(enable);
        moRadioPitContEmp.setEnabled(enable);
        moRadioPitContGrin.setEnabled(enable);
        moRadioPitContEff.setEnabled(enable);
        moDecimalGoalTotProd.setEnabled(enable);
        moDecimalGoalPelletOil.setEnabled(enable);
        moDecimalGoalAvgBagOil.setEnabled(enable);
        moTextLabAvoAci.setEnabled(enable);
        moTextLabAvgBagOil.setEnabled(enable);
        moTextLabMoi.setEnabled(enable);
        moTextLabPelletOil.setEnabled(enable);
        moTextLabPelletAci.setEnabled(enable);
        moDecimalSSEfficiency.setEnabled(enable);
        moIntSSMonoxide.setEnabled(enable);
    }
    
    private void setLastParameters() throws Exception {
        String sql = "SELECT * FROM s_dryer_rep WHERE NOT b_del " +
                "AND dt = (SELECT ADDDATE('" + SLibUtils.DbmsDateFormatDate.format(moDate.getValue()) + "', INTERVAL -1 DAY));";
        ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
        if (resultSet.next()) {
            moDecimalPelletStkStart.setValue(SLibUtils.round(resultSet.getDouble("pellet_stk"), 2));
            moDecimalGoalMoiProc.setValue(resultSet.getDouble("goal_moi_proc"));
            moDecimalGoalPelletProdPerHour.setValue(resultSet.getDouble("goal_pellet_proc_per_hr"));
            moDecimalGoalAvgEfficiency.setValue(resultSet.getDouble("goal_avg_effcy"));
            moDecimalGoalTotProd.setValue(resultSet.getDouble("goal_tot_prod"));
            moDecimalGoalPelletOil.setValue(resultSet.getDouble("goal_pellet_oil"));
            moDecimalGoalAvgBagOil.setValue(resultSet.getDouble("goal_avg_bag_oil"));
            mdLastPitContGrin = resultSet.getDouble("pit_cont_grin");
        }
    }
    
    private void setBagasseFactors() throws Exception {
        String sql = "SELECT dryer_bag_grin_fact, dryer_bag_ext_fact FROM cu_co;";
        ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
        if (resultSet.next()) {
            moDecimalBagGrinFact.setValue(resultSet.getDouble(1));
            moDecimalBagExtFact.setValue(resultSet.getDouble(2));
        }
    }
    
    private void setProcFruit() throws Exception {
        String sql = "SELECT prc_kgs " +
                "FROM s_prc_raw_mat rm " +
                "INNER JOIN s_stk_report sr ON rm.id_stk_report = sr.id_stk_report " +
                "WHERE sr.dt = '" + SLibUtils.DbmsDateFormatDate.format(moDate.getValue()) + "' " +
                "AND rm.fk_func_area = " + SModSysConsts.SU_FUNC_AREA_AVO + ";";
        ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
        if (resultSet.next()) {
            moDecimalProcFruit.setValue(resultSet.getDouble(1));
        }
    }
    
    private void setPitContGrin() {
        double contGrin = mdLastPitContGrin - (moDecimalPelletNetWei.getValue() / 0.28) + (moDecimalSeedPeelToPlant.getValue() * moDecimalBagGrinFact.getValue()) 
                + (moDecimalProcFruit.getValue() * moDecimalBagGrinFact.getValue()) + (moDecimalBagasseToPlant.getValue() * moDecimalBagExtFact.getValue());
        moDecimalPitContGrin.setValue(contGrin);
    }
    
    private void actionContinue() {
        try {
            String sql = "SELECT * FROM s_dryer_rep WHERE dt = '" + SLibUtils.DbmsDateFormatDate.format(moDate.getValue()) + "' AND NOT b_del";
            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
            if (resultSet.next()) {
                miClient.showMsgBoxError("Ya hay un registro existente con la fecha seleccionada.");
            }
            else {
                moDate.setEnabled(false);
                jbContinue.setEnabled(false);
                enableComponents(true);
                moDecimalPelletGrossWei.setValue(getTotPelletRevueltaByDate(moDate.getValue()));
                actionActualiceNetWeiStk();
                setLastParameters();
                setBagasseFactors();
                setProcFruit();
                setPitContGrin();
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void actionActTicWei() {
        if (miClient.showMsgBoxConfirm("Se actualizara el campo \"Peso pellet bruto\" conforme a la fecha seleccionada.\n¬øSeguro desea continuar?") == JOptionPane.OK_OPTION) {
            moDecimalPelletGrossWei.setValue(getTotPelletRevueltaByDate(moDate.getValue()));
            actionActualiceNetWeiStk();
        }
    }
    
    private void actionActualiceNetWeiStk() {
        moDecimalPelletNetWei.setValue(moDecimalPelletGrossWei.getValue() - moDecimalPelletBrokenWei.getValue());
        moDecimalPelletStkEnd.setValue(moDecimalPelletStkStart.getValue() + moDecimalPelletNetWei.getValue() - moDecimalPelletToExt.getValue() - moDecimalPelletToWaste.getValue());
        setPitContGrin();
    }
    
    private void actionActualicePitContEmp() { 
        try {
            String sql = "SELECT volume * 1000 FROM cu_pit_cap WHERE empty_cm = " + moIntPitMeasureEmp.getValue() + " AND id_pit = 1;";
            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
            if (resultSet.next()) {
                moDecimalPitContEmp.setValue(resultSet.getDouble(1));
            }
        }
        catch (Exception e) {}
    }

    @Override
    public void addAllListeners() {
        jbContinue.addActionListener(this);
        jbActTicWei.addActionListener(this);
        moDecimalPelletGrossWei.addFocusListener(this);
        moDecimalPelletBrokenWei.addFocusListener(this);
        moDecimalPelletToExt.addFocusListener(this);
        moDecimalPelletToWaste.addFocusListener(this);
        moIntPitMeasureEmp.addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbContinue.addActionListener(this);
        jbActTicWei.removeActionListener(this);
        moDecimalPelletGrossWei.removeFocusListener(this);
        moDecimalPelletBrokenWei.removeFocusListener(this);
        moDecimalPelletToExt.removeFocusListener(this);
        moDecimalPelletToWaste.removeFocusListener(this);     
        moIntPitMeasureEmp.removeFocusListener(this);
    }

    @Override
    public void reloadCatalogues() {
        moDecimalOperativeHours.setValue(0.0);
        moDecimalPelletStkStart.setValue(0.0);
        moDecimalPelletGrossWei.setValue(0.0);
        moDecimalPelletBrokenWei.setValue(0.0);
        moDecimalPelletNetWei.setValue(0.0);
        moDecimalPelletToExt.setValue(0.0);
        moDecimalPelletOil.setValue(0.0);
        moDecimalPelletToWaste.setValue(0.0);
        moDecimalPelletStkEnd.setValue(0.0);
        moDecimalSeedPeelProc.setValue(0.0);
        moDecimalSeedPeelToProc.setValue(0.0);
        moDecimalSeedPeelOil.setValue(0.0);
        moDecimalSeedPeelToPlant.setValue(0.0);
        moDecimalSeedPeelToTerrain.setValue(0.0);
        moDecimalBagasseToPlant.setValue(0.0);
        moDecimalBagasseToTerrain.setValue(0.0);
        moIntPitMeasureEmp.setValue(0);
        moDecimalProcFruit.setValue(0.0);
        moRadioPitContEmp.setSelected(true);
        moDecimalPitContEmp.setValue(0.0);
        moDecimalPitContGrin.setValue(0.0);
        moDecimalPitContEff.setValue(0.0);
        moDecimalGoalMoiProc.setValue(0.0);
        moDecimalGoalPelletProdPerHour.setValue(0.0);
        moDecimalGoalAvgEfficiency.setValue(0.0);
        moDecimalGoalTotProd.setValue(0.0);
        moDecimalGoalPelletOil.setValue(0.0);
        moDecimalGoalAvgBagOil.setValue(0.0);
        moTextLabAvoAci.setValue("");
        moTextLabAvgBagOil.setValue("");
        moTextLabMoi.setValue("");
        moTextLabPelletOil.setValue("");
        moTextLabPelletAci.setValue("");
        moDecimalSSEfficiency.setValue(0.0);
        moIntSSMonoxide.setValue(0);
        moDecimalBagExtFact.setValue(0.0);
        moDecimalBagGrinFact.setValue(0.0);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbDryerReport) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();
        
        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
            moDate.setValue(miClient.getSession().getWorkingDate());
            moDate.setEnabled(true);
            jbContinue.setEnabled(true);
            moBoolWithoutProduction.setValue(false);
            enableComponents(false);
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
            moDate.setValue(moRegistry.getDate());
            moDate.setEnabled(false);
            jbContinue.setEnabled(false);
            moBoolWithoutProduction.setValue(!moRegistry.isProduction());
        }

        moDecimalOperativeHours.setValue(moRegistry.getOperativeHours());
        moDecimalPelletGrossWei.setValue(moRegistry.getPelletGrossWeight());
        moDecimalPelletBrokenWei.setValue(moRegistry.getPelletBrokenWeight());
        moDecimalPelletNetWei.setValue(moRegistry.getPelletNetoWeight_r());
        moDecimalPelletToExt.setValue(moRegistry.getPelletToExtraction());
        moDecimalPelletOil.setValue(moRegistry.getPelletOil());
        moDecimalPelletToWaste.setValue(moRegistry.getPelletToWaste());
        moDecimalPelletStkEnd.setValue(moRegistry.getPelletStock());
        moDecimalSeedPeelProc.setValue(moRegistry.getSeedPeelProcessed());
        moDecimalSeedPeelToProc.setValue(moRegistry.getSeedPeelToProcess());
        moDecimalSeedPeelOil.setValue(moRegistry.getSeedPeelOil());
        moDecimalSeedPeelToPlant.setValue(moRegistry.getSeedPeelToPlant());
        moDecimalSeedPeelToTerrain.setValue(moRegistry.getSeedPeelToTerrain());
        moDecimalBagasseToPlant.setValue(moRegistry.getBagasseToPlant());
        moDecimalBagasseToTerrain.setValue(moRegistry.getBagasseToTerrain());
        moIntPitMeasureEmp.setValue(moRegistry.getPitMeasureEmpty());
        moDecimalProcFruit.setValue(moRegistry.getPitProcessedFruit());
        moDecimalPitContEmp.setValue(moRegistry.getPitContentEmpty());
        moDecimalPitContGrin.setValue(moRegistry.getPitContentGrinding());
        moDecimalPitContEff.setValue(moRegistry.getPitContentEffective());
        moDecimalBagGrinFact.setValue(moRegistry.getPitBagasseGrindingFactor());
        moDecimalBagExtFact.setValue(moRegistry.getPitBagasseExternalFactor());
        moDecimalGoalMoiProc.setValue(moRegistry.getGoalMoisitureProcessed());
        moDecimalGoalPelletProdPerHour.setValue(moRegistry.getGoalPelletProcessedPerHour());
        moDecimalGoalAvgEfficiency.setValue(moRegistry.getGoalAverageEfficiency());
        moDecimalGoalTotProd.setValue(moRegistry.getGoalTotalProduced());
        moDecimalGoalPelletOil.setValue(moRegistry.getGoalPelletOil());
        moDecimalGoalAvgBagOil.setValue(moRegistry.getGoalAverageBagasseOil());
        moTextLabAvoAci.setValue(moRegistry.getLabAvocadoAcidity_n() == null ? "" : moRegistry.getLabAvocadoAcidity_n() * 10 * 10 + "");
        moTextLabAvgBagOil.setValue(moRegistry.getLabAverageBagasseOil_n() == null ? "" : moRegistry.getLabAverageBagasseOil_n()* 10 * 10 + "");
        moTextLabMoi.setValue(moRegistry.getLabMoisiture_n() == null ? "" : moRegistry.getLabMoisiture_n() * 10 * 10 + "");
        moTextLabPelletOil.setValue(moRegistry.getLabPelletOil_n() == null ? "" : moRegistry.getLabPelletOil_n() * 10 * 10 + "");
        moTextLabPelletAci.setValue(moRegistry.getLabPelletAcidity_n() == null ? "" : moRegistry.getLabPelletAcidity_n() * 10 * 10 + "");
        moDecimalSSEfficiency.setValue(moRegistry.getSmokestackEfficiency());
        moIntSSMonoxide.setValue(moRegistry.getSmokestackCarbonMonoxide());
        moRadioPitContEmp.setValue(moRegistry.isPitContentEmpty());
        moRadioPitContGrin.setValue(moRegistry.isPitContentGrinding());
        moRadioPitContEff.setValue(moRegistry.isPitContentEffective());
                
        setFormEditable(true);
        
        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbDryerReport registry = moRegistry.clone();

        if (registry.isRegistryNew()) { }

        registry.setDate(moDate.getValue());
        registry.setOperativeHours(moDecimalOperativeHours.getValue());
        registry.setPelletGrossWeight(moDecimalPelletGrossWei.getValue());
        registry.setPelletBrokenWeight(moDecimalPelletBrokenWei.getValue());
        registry.setPelletNetoWeight_r(moDecimalPelletNetWei.getValue());
        registry.setPelletToExtraction(moDecimalPelletToExt.getValue());
        registry.setPelletOil(moDecimalPelletOil.getValue());
        registry.setPelletToWaste(moDecimalPelletToWaste.getValue());
        registry.setPelletStock(moDecimalPelletStkEnd.getValue());
        registry.setSeedPeelProcessed(moDecimalSeedPeelProc.getValue());
        registry.setSeedPeelToProcess(moDecimalSeedPeelToProc.getValue());
        registry.setSeedPeelOil(moDecimalSeedPeelOil.getValue());
        registry.setSeedPeelToPlant(moDecimalSeedPeelToPlant.getValue());
        registry.setSeedPeelToTerrain(moDecimalSeedPeelToTerrain.getValue());
        registry.setBagasseToPlant(moDecimalBagasseToPlant.getValue());
        registry.setBagasseToTerrain(moDecimalBagasseToTerrain.getValue());
        registry.setPitMeasureEmpty(moIntPitMeasureEmp.getValue());
        registry.setPitProcessedFruit(moDecimalProcFruit.getValue());
        registry.setPitContentEmpty(moDecimalPitContEmp.getValue());
        registry.setPitContentGrinding(moDecimalPitContGrin.getValue());
        registry.setPitContentEffective(moDecimalPitContEff.getValue());
        registry.setPitBagasseGrindingFactor(moDecimalBagGrinFact.getValue());
        registry.setPitBagasseExternalFactor(moDecimalBagExtFact.getValue());
        registry.setGoalMoisitureProcessed(moDecimalGoalMoiProc.getValue());
        registry.setGoalPelletProcessedPerHour(moDecimalGoalPelletProdPerHour.getValue());
        registry.setGoalAverageEfficiency(moDecimalGoalAvgEfficiency.getValue());
        registry.setGoalTotalProduced(moDecimalGoalTotProd.getValue());
        registry.setGoalPelletOil(moDecimalGoalPelletOil.getValue());
        registry.setGoalAverageBagasseOil(moDecimalGoalAvgBagOil.getValue());
        registry.setLabAvocadoAcidity_n(moTextLabAvoAci.getValue().isEmpty() ? null : SLibUtils.parseDouble(moTextLabAvoAci.getValue()) / 10 / 10);
        registry.setLabAverageBagasseOil_n(moTextLabAvgBagOil.getValue().isEmpty() ? null : SLibUtils.parseDouble(moTextLabAvgBagOil.getValue()) / 10 / 10);
        registry.setLabMoisiture_n(moTextLabMoi.getValue().isEmpty() ? null : SLibUtils.parseDouble(moTextLabMoi.getValue()) / 10 / 10);
        registry.setLabPelletOil_n(moTextLabPelletOil.getValue().isEmpty() ? null : SLibUtils.parseDouble(moTextLabPelletOil.getValue()) / 10 / 10);
        registry.setLabPelletAcidity_n(moTextLabPelletAci.getValue().isEmpty() ? null : SLibUtils.parseDouble(moTextLabPelletAci.getValue()) / 10 / 10);
        registry.setSmokestackEfficiency(moDecimalSSEfficiency.getValue());
        registry.setSmokestackCarbonMonoxide(moIntSSMonoxide.getValue());
        registry.setProduction(!moBoolWithoutProduction.getValue());
        registry.setPitContentEmpty(moRadioPitContEmp.getValue());
        registry.setPitContentGrinding(moRadioPitContGrin.getValue());
        registry.setPitContentEffective(moRadioPitContEff.getValue());
        
        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        try {
            if (!moTextLabAvoAci.getText().isEmpty()) Double.parseDouble(moTextLabAvoAci.getText());
            if (!moTextLabAvgBagOil.getText().isEmpty()) Double.parseDouble(moTextLabAvgBagOil.getText());
            if (!moTextLabMoi.getText().isEmpty()) Double.parseDouble(moTextLabMoi.getText());
            if (!moTextLabPelletOil.getText().isEmpty()) Double.parseDouble(moTextLabPelletOil.getText());
            if (!moTextLabPelletAci.getText().isEmpty()) Double.parseDouble(moTextLabPelletAci.getText());
        }
        catch(Exception e) {
            validation.setMessage("Uno o m√°s de los resultados de laboratorio contiene datos que no son n√∫mero.");
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbContinue) {
                actionContinue();
            }
            else if (button == jbActTicWei) {
                actionActTicWei();
            }
        }
    }
    
    @Override
    public void focusGained(FocusEvent e) {
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof JTextField) {
            JTextField textField = (JTextField) e.getSource();
            
            if (textField == moDecimalPelletGrossWei) {
                actionActualiceNetWeiStk();
            }
            else if (textField == moDecimalPelletBrokenWei) {
                actionActualiceNetWeiStk();
            }
            else if (textField == moDecimalPelletToExt) {
                actionActualiceNetWeiStk();
            }
            else if (textField == moDecimalPelletToWaste) {
                actionActualiceNetWeiStk();
            }
            else if (textField == moIntPitMeasureEmp) {
                actionActualicePitContEmp();
            }
        }
    }
}
