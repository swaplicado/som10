/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;
import som.gui.SGuiClientUtils;
import som.mod.SModConsts;
import som.mod.som.db.SDbStockDay;
import som.mod.som.db.SSomConsts;
import som.mod.som.db.SSomStockDays;

/**
 *
 * @author Néstor Ávalos, Sergio Flores
 */
public class SFormStockDays extends SBeanForm implements ActionListener {

    private SSomStockDays moRegistry;
    private SFormStockDay moFormStockDay;
    private SGridPaneForm moGridStockDays;

    private JButton jbSaveNextStep;

    private Date mtDate;

    /**
     * Creates new form SFormStockDays
     */
    public SFormStockDays(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.SX_STK_DAYS, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDateDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel29 = new javax.swing.JPanel();
        jlUnit = new javax.swing.JLabel();
        moKeyUnit = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel6 = new javax.swing.JPanel();
        jpWarehouses = new javax.swing.JPanel();
        jbAddLastEmptyRows = new javax.swing.JButton();

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha:*");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlDate);

        moDateDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(moDateDate);

        jPanel2.add(jPanel3);

        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUnit.setText("Unidad: *");
        jlUnit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel29.add(jlUnit);

        moKeyUnit.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel29.add(moKeyUnit);

        jPanel2.add(jPanel29);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel6.setLayout(new java.awt.GridLayout(1, 2));

        jpWarehouses.setBorder(javax.swing.BorderFactory.createTitledBorder("Almacenes:"));
        jpWarehouses.setLayout(new java.awt.BorderLayout());

        jbAddLastEmptyRows.setText("Copiar última captura");
        jbAddLastEmptyRows.setToolTipText("Copiar última captura de inventario físico diario");
        jbAddLastEmptyRows.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jbAddLastEmptyRows.setPreferredSize(new java.awt.Dimension(150, 23));
        jpWarehouses.add(jbAddLastEmptyRows, java.awt.BorderLayout.PAGE_START);

        jPanel6.add(jpWarehouses);

        jPanel1.add(jPanel6, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JButton jbAddLastEmptyRows;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlUnit;
    private javax.swing.JPanel jpWarehouses;
    private sa.lib.gui.bean.SBeanFieldDate moDateDate;
    private sa.lib.gui.bean.SBeanFieldKey moKeyUnit;
    // End of variables declaration//GEN-END:variables

    /*
    * Private methods
    */

    private void initComponentsCustom() {
        mtDate = null;

        SGuiUtils.setWindowBounds(this, 800, 500);

        jbSaveNextStep = new JButton("Guardar y continuar");
        jbSaveNextStep.setPreferredSize(new Dimension(175, 23));
        jbSaveNextStep.addActionListener(this);
        jbSaveNextStep.setToolTipText("Guardar y continuar con movs. externos");

        moDateDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate.getText()), true);
        moKeyUnit.setKeySettings(miClient, SGuiUtils.getLabelName(jlUnit), true);

        moFields.addField(moDateDate);
        moFields.addField(moKeyUnit);

        moFields.setFormButton(jbSave);

        jbAddLastEmptyRows.addActionListener(this);

        moGridStockDays = new SGridPaneForm(miClient, SModConsts.S_STK_DAY, SLibConsts.UNDEFINED, "Almacenes", null) {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(true);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                SGridColumnForm[] columns = new SGridColumnForm[10];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Tanque");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Vacío");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Vacío (" + SSomConsts.M + ")");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Residuos (" + SSomConsts.M + ")");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Ítem");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ITM, "Ítem código");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_L, "Observaciones");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Altura (" + SSomConsts.M + ")");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Volumen (" + SSomConsts.L + ")");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_M, "Omitir en estimación");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }

            @Override
            public void actionRowNew() {
                SGuiParams params = new SGuiParams();

                if (!actionValidateDate() && !actionValidateFkUnitId()) {
                    params.getParamsMap().put(SGuiConsts.PARAM_DATE, moDateDate.getValue());
                    params.getParamsMap().put(SGuiConsts.PARAM_ROWS, moGridStockDays.getModel().getGridRows());
                    params.getParamsMap().put(SModConsts.SU_UNIT, moKeyUnit.getValue()[0]);
                    moFormParams = params;

                   super.actionRowNew();
                   actionDisabledFields();
                }
            }

            @Override
            public void actionRowEdit() {
                SGuiParams params = new SGuiParams();

                if (jtTable.getSelectedRowCount() != 1) {
                    miClient.showMsgBoxInformation(SGridConsts.MSG_SELECT_ROW);
                }
                else {
                    SGridRow gridRow = moGridStockDays.getSelectedGridRow();
                    SDbRegistry registry = (SDbRegistry) gridRow;
                    SDbStockDay stockDay = (SDbStockDay) registry;

                    if (gridRow.isRowSystem()) {
                        miClient.showMsgBoxWarning(SDbConsts.MSG_REG_ + gridRow.getRowName() + SDbConsts.MSG_REG_IS_SYSTEM);
                    }
                    else if (!gridRow.isRowDeletable()) {
                        miClient.showMsgBoxWarning(SDbConsts.MSG_REG_ + gridRow.getRowName() + SDbConsts.MSG_REG_NON_DELETABLE);
                    }
                    else if (!actionValidateFkUnitId()) {

                        if (actionConfirmUnit(moRegistry.getXtaFkUnitId())) {
                            stockDay.setXtaRegistryEditing(true);

                            params.getParamsMap().put(SGuiConsts.PARAM_ROWS, moGridStockDays.getModel().getGridRows());
                            params.getParamsMap().put(SModConsts.SU_UNIT, moKeyUnit.getValue()[0]);
                            moFormParams = params;

                            super.actionRowEdit();
                        }
                    }
                }
            }

            @Override
            public void actionRowDelete() {

                if (jtTable.getSelectedRowCount() != 1) {
                    miClient.showMsgBoxInformation(SGridConsts.MSG_SELECT_ROW);
                }
                else {
                    SGridRow gridRow = moGridStockDays.getSelectedGridRow();

                    if (gridRow.isRowSystem()) {
                        miClient.showMsgBoxWarning(SDbConsts.MSG_REG_ + gridRow.getRowName() + SDbConsts.MSG_REG_IS_SYSTEM);
                    }
                    else if (!gridRow.isRowDeletable()) {
                        miClient.showMsgBoxWarning(SDbConsts.MSG_REG_ + gridRow.getRowName() + SDbConsts.MSG_REG_NON_DELETABLE);
                    }
                    else {
                        super.actionRowDelete();
                        actionDisabledFields();
                    }
                }
            }

            @Override
            public void actionGridClearSettings() {
                super.actionGridClearSettings();
                disabledGridPaneFormHeader();
            }
        };

        mvFormGrids.add(moGridStockDays);
        moFormStockDay = new SFormStockDay(miClient, "Inventario físico diario");
        moGridStockDays.setForm(moFormStockDay);
        moGridStockDays.setPaneFormOwner(null);
        moGridStockDays.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(jbAddLastEmptyRows);

        jpWarehouses.add(moGridStockDays, BorderLayout.CENTER);

        jpCommandCenter.add(jbSaveNextStep);

        /* XXX Cell renderers not implemented yet in XML
        mvFormGrids.add(moGridUserRights);
        mvFormGrids.add(moGridUserScales);
        */
    }

    private void populateStockDays(boolean bLastEmpty) throws SQLException {
        int nXtaFkUnitId = 0;
        String sql = "";
        SDbStockDay stockDay = null;
        ResultSet resultSet = null;
        Vector<SGridRow> rows = new Vector<>();
        Vector<int[]> recs = new Vector<>();

        if (bLastEmpty) {
            try {
                sql = "SELECT s.id_year, s.id_item, s.id_unit, s.id_co, s.id_cob, s.id_wah, s.id_day, s.emp, i.name, i.code, u.code, wah.name, wah.code " +
                    "FROM " + SModConsts.TablesMap.get(SModConsts.S_STK_DAY) + " AS s " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.SU_ITEM) +" AS i ON " +
                    "s.id_item = i.id_item " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.SU_UNIT) +" AS u ON " +
                    "s.id_unit = u.id_unit " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.CU_WAH) +" AS wah ON " +
                    "s.id_co = wah.id_co AND s.id_cob = wah.id_cob AND s.id_wah = wah.id_wah " +
                    "WHERE s.dt = (SELECT MAX(s_day.dt) FROM " + SModConsts.TablesMap.get(SModConsts.S_STK_DAY) + " AS s_day WHERE s_day.b_del = 0) AND s.b_del = 0 " +
                    "ORDER BY wah.code, s.emp, s.b_del DESC, i.name, i.code, s.id_item ";

                resultSet = miClient.getSession().getStatement().executeQuery(sql);
                while (resultSet.next()) {
                    recs.add(new int[] {
                        resultSet.getInt("s.id_year"), resultSet.getInt("s.id_item"), resultSet.getInt("s.id_unit"),
                        resultSet.getInt("s.id_co"), resultSet.getInt("s.id_cob"), resultSet.getInt("s.id_wah"), resultSet.getInt("s.id_day") });

                    if (nXtaFkUnitId == 0) {
                        nXtaFkUnitId = resultSet.getInt("s.id_unit");
                    }
                    else if (nXtaFkUnitId != resultSet.getInt("s.id_unit")) {
                        nXtaFkUnitId = -1;
                    }
                }

                moRegistry.setXtaFkUnitId(nXtaFkUnitId);
                if (moKeyUnit.getSelectedIndex() <= 0) {
                    moKeyUnit.setValue(new int[] { nXtaFkUnitId } );
                }

                if (actionConfirmUnit(nXtaFkUnitId)) {
                    for (int[] rec : recs) {
                        stockDay = new SDbStockDay();
                        stockDay.read(miClient.getSession(), rec);
                        stockDay.setPkDayId(0);
                        stockDay.setDate(moDateDate.getValue());
                        stockDay.setRegistryNew(true);
                        stockDay.setXtaCopy(true);
                        moRegistry.getStockDays().add(stockDay);
                    }
                }
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
        }

        for (SDbStockDay row : moRegistry.getStockDays()) {
            rows.add(row);
        }

        moGridStockDays.populateGrid(rows);
        disabledGridPaneFormHeader();

        actionDisabledFields();
    }

    private void actionAddLastEmptyRows() {
        try {
            if (!actionValidateDate() && !actionValidateFkUnitId()) {
                if (jbAddLastEmptyRows.isEnabled()) {
                    if (moGridStockDays.getSelectedGridRows().length == 0) {
                        populateStockDays(true);
                    }
                    else {
                        miClient.showMsgBoxError("No debe haber ninguna captura de vacío para poder agregar la ' " + jbAddLastEmptyRows.getText() + "'.");
                    }
                }
            }
        }
        catch (SQLException e) {
            SLibUtils.showException(this, e);
        }
    }

    private void actionDisabledFields() {
        if (moGridStockDays.getSelectedGridRows().length > 0) {
            moDateDate.setEnabled(false);
            moKeyUnit.setEnabled(false);
            jbAddLastEmptyRows.setEnabled(false);
        }
        else {
            moDateDate.setEnabled(true);
            moKeyUnit.setEnabled(true);
            jbAddLastEmptyRows.setEnabled(true);
        }
    }

    private boolean actionValidateDate() {
        boolean b = false;

        try {
            if (moDateDate.isEnabled()) {
                moRegistry.obtainRegistries(miClient.getSession(), new int[] {
                    SLibTimeUtils.digestDate(moDateDate.getValue())[0],
                    SLibTimeUtils.digestDate(moDateDate.getValue())[1],
                    SLibTimeUtils.digestDate(moDateDate.getValue())[2]});

                if (moRegistry.getStockDays().size() > 0) {
                    miClient.showMsgBoxWarning("Ya existe la captura del inventario físico diario para esta fecha: '" + SLibUtils.DateFormatDate.format(moDateDate.getValue()) + "'.");
                    moRegistry.getStockDays().removeAllElements();
                    b = true;
                }
            }
        }
        catch(Exception e) {
            SLibUtils.showException(this, e);
        }

        return b;
    }

    private boolean actionValidateFkUnitId() {
        boolean b = false;

        if (moKeyUnit.getSelectedIndex() <= 0) {
            miClient.showMsgBoxError(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlUnit.getText()) + "'.");
            b = true;
        }
        else {
            moRegistry.setXtaFkUnitId(moKeyUnit.getValue()[0]);
        }

        return b;
    }

    private boolean actionConfirmUnit(int nFkUnitId) {
        boolean bCon = true;

        if (nFkUnitId == -1 &&
            miClient.showMsgBoxConfirm("Existen diferentes unidades con los ítems en la captura del inventario físico actual. \n" +
                SGuiConsts.MSG_CNF_CONT) == JOptionPane.NO_OPTION) {
                bCon = false;
        }
        else if (nFkUnitId != moKeyUnit.getValue()[0] &&
            miClient.showMsgBoxConfirm("La unidad seleccionada es diferente a la unidad de los ítems de la captura del inventario físico actual. \n" +
                SGuiConsts.MSG_CNF_CONT) == JOptionPane.NO_OPTION) {
                bCon = false;
        }

        return bCon;
    }

    private void actionSaveNextStep() {
        SGuiParams params = null;
        SDbRegistry registry = null;
        SFormDialogWizardDps wizard = new SFormDialogWizardDps(miClient, "Movimientos externos");

        if (jbSaveNextStep.isEnabled()) {
            try {
                super.actionSave();
                registry = getRegistry();
                registry.save(miClient.getSession());

                /*
                 * Review if is necessary use module for open dialog WizardDps
                 */

                //params = new SGuiParams();
                //params.getParamsMap().put(SModConsts.SU_UNIT, moKeyUnit.getValue());
                //params.getParamsMap().put(SGuiConsts.PARAM_DATE, moDate.getValue());
                //miClient.getSession().getModule(SModConsts.MOD_SOM_OS, SLibConsts.UNDEFINED).showForm(SModConsts.SX_WIZ_DPS, SLibConsts.UNDEFINED, params);

                wizard.setValue(SModConsts.SU_UNIT, moKeyUnit.getValue());
                wizard.setValue(SGuiConsts.PARAM_DATE, moDateDate.getValue());
                wizard.setVisible(true);
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
        }
    }

    private void disabledGridPaneFormHeader() {
        moGridStockDays.getTable().getTableHeader().setReorderingAllowed(false);
        moGridStockDays.getTable().getTableHeader().setEnabled(false);
    }

    /*
    * Public methods
    */

    @Override
    public void addAllListeners() {
        jbSaveNextStep.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbSaveNextStep.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        try {
            populateStockDays(false);
        }
        catch (SQLException e) {
            SLibUtils.showException(this, e);
        }

        miClient.getSession().populateCatalogue(moKeyUnit, SModConsts.SU_UNIT, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setValue(int type, Object value) {
         switch (type) {
            case SModConsts.SU_UNIT:
                moKeyUnit.setValue(value);
                break;
            case SGuiConsts.PARAM_DATE:
                mtDate = (Date) value;
                break;
            default:
        }
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SSomStockDays) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        moDateDate.setValue(moRegistry.getDate());
        moKeyUnit.setValue(new int[] { moRegistry.getXtaFkUnitId() });

        if (moRegistry.isRegistryNew()) {
            jtfRegistryKey.setText("");
        }

        setFormEditable(true);

        if (moRegistry.isRegistryNew()) {
            moDateDate.setValue(miClient.getSession().getWorkingDate());
            moDateDate.setEnabled(true);
            jbAddLastEmptyRows.setEnabled(true);

            // Validate registries date:

            actionValidateDate();
        }
        else {
            moDateDate.setEnabled(false);
            moKeyUnit.setEnabled(moRegistry.getXtaFkUnitId() > 0 ? true : false);

            if (moGridStockDays.getSelectedGridRows().length > 0) {
                jbAddLastEmptyRows.setEnabled(false);
            }
            else {
                jbAddLastEmptyRows.setEnabled(true);
            }
        }

        if (moKeyUnit.getModel().getSize() == 2) {
            moKeyUnit.setSelectedIndex(1);
            moKeyUnit.setEnabled(false);
        }
        else {
            moKeyUnit.setEnabled(moRegistry.isRegistryNew() ? true : false);
        }

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        boolean b = false;
        SSomStockDays registry = moRegistry.clone();
        SDbStockDay sd = null;
        SDbStockDay stockDay = null;

        if (registry.isRegistryNew()) {}

        registry.setDate(moDateDate.getValue());

        // Update or delete registries:

        for (int i = 0; i < registry.getStockDays().size(); i++) {

            sd = registry.getStockDays().get(i);
            b = false;
            for (SGridRow row : moGridStockDays.getModel().getGridRows()) {
                stockDay = (SDbStockDay) row;

                if (sd.getPkDayId() == stockDay.getPkDayId()) {
                    registry.getStockDays().set(i, stockDay);
                    b = true;
                }
            }

            if (!b) {

                // Row deleted:

                sd.setDeleted(true);
                registry.getStockDays().set(i, sd);
            }
        }

        // Add new registries:

        for (SGridRow row : moGridStockDays.getModel().getGridRows()) {
            stockDay = (SDbStockDay) row;

            if (stockDay.getPkDayId() == 0) {
                registry.getStockDays().add(stockDay);
            }
        }

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (!SGuiClientUtils.isPeriodOpened(miClient.getSession(), moDateDate.getValue())) {
                validation.setMessage("El período está cerrado.");
                validation.setComponent(moDateDate.getComponent());
            }
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent evt) {
        if (evt.getSource() instanceof JButton) {
            JButton button = (JButton) evt.getSource();

            if (button == jbAddLastEmptyRows) {
                actionAddLastEmptyRows();
            }
            else if (button == jbSaveNextStep) {
                actionSaveNextStep();
            }
        }
    }
}
