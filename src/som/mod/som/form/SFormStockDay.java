/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.Vector;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiFieldKeyGroup;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import som.gui.SGuiClientSessionCustom;
import som.gui.SGuiClientUtils;
import som.mod.SModConsts;
import som.mod.SModSysConsts;
import som.mod.cfg.db.SDbBranchWarehouse;
import som.mod.som.db.SDbItem;
import som.mod.som.db.SDbStockDay;
import som.mod.som.db.SSomConsts;
import som.mod.som.db.SSomStock;
import som.mod.som.db.SSomUtils;

/**
 *
 * @author Néstor Ávalos, Sergio Flores
 */
public class SFormStockDay extends sa.lib.gui.bean.SBeanForm implements ItemListener, FocusListener {

    private SDbStockDay moRegistry;
    private SGuiFieldKeyGroup moFieldKeyGroup;
    private Vector<SGridRow> moGridRows;

    private int mnParamUnitId;

    private SDbBranchWarehouse moBranchWarehouse;
    private SDbItem moItem;

    /**
     * Creates new form SFormStockDay
     */
    public SFormStockDay(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.S_STK_DAY, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        sBeanFieldKey1 = new sa.lib.gui.bean.SBeanFieldKey();
        sBeanFieldText1 = new sa.lib.gui.bean.SBeanFieldText();
        jPanel2 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDateDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel6 = new javax.swing.JPanel();
        jlBranch = new javax.swing.JLabel();
        moKeyBranch = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel7 = new javax.swing.JPanel();
        jlWarehouse = new javax.swing.JLabel();
        moKeyWarehouse = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel8 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moKeyItem = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel9 = new javax.swing.JPanel();
        jlEmptiness = new javax.swing.JLabel();
        moDecEmptiness = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlEmptinessUnit = new javax.swing.JLabel();
        moBoolEmpty = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel10 = new javax.swing.JPanel();
        jlNote = new javax.swing.JLabel();
        moTextNote = new sa.lib.gui.bean.SBeanFieldText();
        jPanel15 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jlPhisicalInventoryHeight = new javax.swing.JLabel();
        moDecPhisicalInventoryHeight = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlPhisicalInventoryHeightUnit = new javax.swing.JLabel();
        jPanel24 = new javax.swing.JPanel();
        jlPhisicalInventoryVolume = new javax.swing.JLabel();
        moDecPhisicalInventoryVolume = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlPhisicalInventoryVolumeUnit = new javax.swing.JLabel();
        jPanel25 = new javax.swing.JPanel();
        jlPhisicalInventory = new javax.swing.JLabel();
        moDecPhisicalInventory = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlPhisicalInventoryUnit = new javax.swing.JLabel();
        jPanel30 = new javax.swing.JPanel();
        jlStockBefore = new javax.swing.JLabel();
        moDecStockBefore = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlStockUnitBefore = new javax.swing.JLabel();
        jPanel29 = new javax.swing.JPanel();
        jlDiference = new javax.swing.JLabel();
        moDecDiference = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlDiferenceUnit = new javax.swing.JLabel();
        moBoolStockDifferenceSkipped = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel5 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jlWarehouseHeight = new javax.swing.JLabel();
        moDecWarehouseHeight = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWarehouseHeightUnit = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jlWarehouseHeightCull = new javax.swing.JLabel();
        moDecWarehouseHeightCull = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWarehouseHeightCullUnit = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        jlWarehouseHeightAvailable = new javax.swing.JLabel();
        moDecWarehouseHeightAvailable = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWarehouseHeightAvailableUnit = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        jlWarehouseVolume = new javax.swing.JLabel();
        moDecWarehouseVolume = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWarehouseVolumeUnit = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        jlWarehouseVolumeCull = new javax.swing.JLabel();
        moDecWarehouseVolumeCull = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWarehouseVolumeCullUnit = new javax.swing.JLabel();
        jPanel22 = new javax.swing.JPanel();
        jlWarehouseVolumeAvailable = new javax.swing.JLabel();
        moDecWarehouseVolumeAvailable = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWarehouseVolumeAvailableUnit = new javax.swing.JLabel();
        jPanel26 = new javax.swing.JPanel();
        jlItemDensity = new javax.swing.JLabel();
        moDecItemDensity = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlItemDensityUnit = new javax.swing.JLabel();

        sBeanFieldText1.setText("sBeanFieldText1");

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel11.setLayout(new java.awt.BorderLayout());

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel14.setLayout(new java.awt.GridLayout(6, 0, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setForeground(new java.awt.Color(0, 0, 255));
        jlDate.setText("Fecha:*");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlDate);

        moDateDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(moDateDate);

        jPanel14.add(jPanel4);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBranch.setForeground(new java.awt.Color(0, 0, 255));
        jlBranch.setText("Sucursal:*");
        jlBranch.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlBranch);

        moKeyBranch.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel6.add(moKeyBranch);

        jPanel14.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWarehouse.setForeground(new java.awt.Color(0, 0, 255));
        jlWarehouse.setText("Tanque:*");
        jlWarehouse.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlWarehouse);

        moKeyWarehouse.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel7.add(moKeyWarehouse);

        jPanel14.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setForeground(new java.awt.Color(0, 0, 255));
        jlItem.setText("Ítem:*");
        jlItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlItem);

        moKeyItem.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel8.add(moKeyItem);

        jPanel14.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEmptiness.setText("Vacío:*");
        jlEmptiness.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlEmptiness);
        jPanel9.add(moDecEmptiness);

        jlEmptinessUnit.setText("m");
        jlEmptinessUnit.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel9.add(jlEmptinessUnit);

        moBoolEmpty.setText("Tanque vacío");
        jPanel9.add(moBoolEmpty);

        jPanel14.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNote.setText("Observaciones:");
        jlNote.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlNote);

        moTextNote.setText("NOTES");
        moTextNote.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel10.add(moTextNote);

        jPanel14.add(jPanel10);

        jPanel11.add(jPanel14, java.awt.BorderLayout.NORTH);

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del inventario físico:"));
        jPanel15.setLayout(new java.awt.GridLayout(7, 0, 0, 5));

        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        jlPhisicalInventoryHeight.setText("Altura neta:");
        jlPhisicalInventoryHeight.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel23.add(jlPhisicalInventoryHeight);

        moDecPhisicalInventoryHeight.setEditable(false);
        jPanel23.add(moDecPhisicalInventoryHeight);

        jlPhisicalInventoryHeightUnit.setText("m");
        jlPhisicalInventoryHeightUnit.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel23.add(jlPhisicalInventoryHeightUnit);

        jPanel15.add(jPanel23);

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        jlPhisicalInventoryVolume.setText("Volumen neto:");
        jlPhisicalInventoryVolume.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel24.add(jlPhisicalInventoryVolume);

        moDecPhisicalInventoryVolume.setEditable(false);
        jPanel24.add(moDecPhisicalInventoryVolume);

        jlPhisicalInventoryVolumeUnit.setText("l");
        jlPhisicalInventoryVolumeUnit.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel24.add(jlPhisicalInventoryVolumeUnit);

        jPanel15.add(jPanel24);

        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        jlPhisicalInventory.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlPhisicalInventory.setText("Inventario físico:");
        jlPhisicalInventory.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel25.add(jlPhisicalInventory);

        moDecPhisicalInventory.setEditable(false);
        moDecPhisicalInventory.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jPanel25.add(moDecPhisicalInventory);

        jlPhisicalInventoryUnit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlPhisicalInventoryUnit.setText("UN");
        jlPhisicalInventoryUnit.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel25.add(jlPhisicalInventoryUnit);

        jPanel15.add(jPanel25);

        jPanel30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        jlStockBefore.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlStockBefore.setText("Existencias ant.:");
        jlStockBefore.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel30.add(jlStockBefore);

        moDecStockBefore.setEditable(false);
        moDecStockBefore.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jPanel30.add(moDecStockBefore);

        jlStockUnitBefore.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlStockUnitBefore.setText("UN");
        jlStockUnitBefore.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel30.add(jlStockUnitBefore);

        jPanel15.add(jPanel30);

        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        jlDiference.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlDiference.setText("Diferencia:");
        jlDiference.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel29.add(jlDiference);

        moDecDiference.setEditable(false);
        moDecDiference.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jPanel29.add(moDecDiference);

        jlDiferenceUnit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlDiferenceUnit.setText("UN");
        jlDiferenceUnit.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel29.add(jlDiferenceUnit);

        jPanel15.add(jPanel29);

        moBoolStockDifferenceSkipped.setText("Omitir en estimación de la producción");
        moBoolStockDifferenceSkipped.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jPanel15.add(moBoolStockDifferenceSkipped);

        jPanel11.add(jPanel15, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel11, java.awt.BorderLayout.WEST);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del tanque e ítem:"));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel17.setLayout(new java.awt.GridLayout(7, 0, 0, 5));

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWarehouseHeight.setText("Altura tanque:");
        jlWarehouseHeight.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel12.add(jlWarehouseHeight);

        moDecWarehouseHeight.setEditable(false);
        jPanel12.add(moDecWarehouseHeight);

        jlWarehouseHeightUnit.setText("m");
        jlWarehouseHeightUnit.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel12.add(jlWarehouseHeightUnit);

        jPanel17.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWarehouseHeightCull.setText("Altura residuos:");
        jlWarehouseHeightCull.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel13.add(jlWarehouseHeightCull);

        moDecWarehouseHeightCull.setEditable(false);
        jPanel13.add(moDecWarehouseHeightCull);

        jlWarehouseHeightCullUnit.setText("m");
        jlWarehouseHeightCullUnit.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel13.add(jlWarehouseHeightCullUnit);

        jPanel17.add(jPanel13);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWarehouseHeightAvailable.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlWarehouseHeightAvailable.setText("Altura disponible:");
        jlWarehouseHeightAvailable.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel19.add(jlWarehouseHeightAvailable);

        moDecWarehouseHeightAvailable.setEditable(false);
        moDecWarehouseHeightAvailable.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jPanel19.add(moDecWarehouseHeightAvailable);

        jlWarehouseHeightAvailableUnit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlWarehouseHeightAvailableUnit.setText("m");
        jlWarehouseHeightAvailableUnit.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel19.add(jlWarehouseHeightAvailableUnit);

        jPanel17.add(jPanel19);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWarehouseVolume.setText("Volumen tanque:");
        jlWarehouseVolume.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel20.add(jlWarehouseVolume);

        moDecWarehouseVolume.setEditable(false);
        jPanel20.add(moDecWarehouseVolume);

        jlWarehouseVolumeUnit.setText("l");
        jlWarehouseVolumeUnit.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel20.add(jlWarehouseVolumeUnit);

        jPanel17.add(jPanel20);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWarehouseVolumeCull.setText("Volumen residuos:");
        jlWarehouseVolumeCull.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel21.add(jlWarehouseVolumeCull);

        moDecWarehouseVolumeCull.setEditable(false);
        jPanel21.add(moDecWarehouseVolumeCull);

        jlWarehouseVolumeCullUnit.setText("l");
        jlWarehouseVolumeCullUnit.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel21.add(jlWarehouseVolumeCullUnit);

        jPanel17.add(jPanel21);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWarehouseVolumeAvailable.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlWarehouseVolumeAvailable.setText("Volumen disponible:");
        jlWarehouseVolumeAvailable.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel22.add(jlWarehouseVolumeAvailable);

        moDecWarehouseVolumeAvailable.setEditable(false);
        moDecWarehouseVolumeAvailable.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jPanel22.add(moDecWarehouseVolumeAvailable);

        jlWarehouseVolumeAvailableUnit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlWarehouseVolumeAvailableUnit.setText("l");
        jlWarehouseVolumeAvailableUnit.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel22.add(jlWarehouseVolumeAvailableUnit);

        jPanel17.add(jPanel22);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemDensity.setText("Densidad ítem:");
        jlItemDensity.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel26.add(jlItemDensity);

        moDecItemDensity.setEditable(false);
        jPanel26.add(moDecItemDensity);

        jlItemDensityUnit.setText("UNIT");
        jlItemDensityUnit.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel26.add(jlItemDensityUnit);

        jPanel17.add(jPanel26);

        jPanel5.add(jPanel17, java.awt.BorderLayout.NORTH);

        jPanel2.add(jPanel5, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jlBranch;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlDiference;
    private javax.swing.JLabel jlDiferenceUnit;
    private javax.swing.JLabel jlEmptiness;
    private javax.swing.JLabel jlEmptinessUnit;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlItemDensity;
    private javax.swing.JLabel jlItemDensityUnit;
    private javax.swing.JLabel jlNote;
    private javax.swing.JLabel jlPhisicalInventory;
    private javax.swing.JLabel jlPhisicalInventoryHeight;
    private javax.swing.JLabel jlPhisicalInventoryHeightUnit;
    private javax.swing.JLabel jlPhisicalInventoryUnit;
    private javax.swing.JLabel jlPhisicalInventoryVolume;
    private javax.swing.JLabel jlPhisicalInventoryVolumeUnit;
    private javax.swing.JLabel jlStockBefore;
    private javax.swing.JLabel jlStockUnitBefore;
    private javax.swing.JLabel jlWarehouse;
    private javax.swing.JLabel jlWarehouseHeight;
    private javax.swing.JLabel jlWarehouseHeightAvailable;
    private javax.swing.JLabel jlWarehouseHeightAvailableUnit;
    private javax.swing.JLabel jlWarehouseHeightCull;
    private javax.swing.JLabel jlWarehouseHeightCullUnit;
    private javax.swing.JLabel jlWarehouseHeightUnit;
    private javax.swing.JLabel jlWarehouseVolume;
    private javax.swing.JLabel jlWarehouseVolumeAvailable;
    private javax.swing.JLabel jlWarehouseVolumeAvailableUnit;
    private javax.swing.JLabel jlWarehouseVolumeCull;
    private javax.swing.JLabel jlWarehouseVolumeCullUnit;
    private javax.swing.JLabel jlWarehouseVolumeUnit;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolEmpty;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolStockDifferenceSkipped;
    private sa.lib.gui.bean.SBeanFieldDate moDateDate;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecDiference;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecEmptiness;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecItemDensity;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecPhisicalInventory;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecPhisicalInventoryHeight;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecPhisicalInventoryVolume;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecStockBefore;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWarehouseHeight;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWarehouseHeightAvailable;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWarehouseHeightCull;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWarehouseVolume;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWarehouseVolumeAvailable;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWarehouseVolumeCull;
    private sa.lib.gui.bean.SBeanFieldKey moKeyBranch;
    private sa.lib.gui.bean.SBeanFieldKey moKeyItem;
    private sa.lib.gui.bean.SBeanFieldKey moKeyWarehouse;
    private sa.lib.gui.bean.SBeanFieldText moTextNote;
    private sa.lib.gui.bean.SBeanFieldKey sBeanFieldKey1;
    private sa.lib.gui.bean.SBeanFieldText sBeanFieldText1;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        mnParamUnitId = 0;

        moBranchWarehouse = new SDbBranchWarehouse();
        moItem = new SDbItem();
        moFieldKeyGroup = new SGuiFieldKeyGroup(miClient);

        SGuiUtils.setWindowBounds(this, 800, 500);

        moDateDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate.getText()), true);
        moKeyBranch.setKeySettings(miClient, SGuiUtils.getLabelName(jlBranch.getText()), true);
        moKeyWarehouse.setKeySettings(miClient, SGuiUtils.getLabelName(jlWarehouse.getText()), true);
        moKeyItem.setKeySettings(miClient, SGuiUtils.getLabelName(jlItem.getText()), true);
        moDecEmptiness.setDecimalSettings(SGuiUtils.getLabelName(jlEmptiness.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moBoolEmpty.setBooleanSettings("Tanque vacio", false);
        moBoolStockDifferenceSkipped.setBooleanSettings("Omitir en estimación de la producción", false);
        moTextNote.setTextSettings(SGuiUtils.getLabelName(jlNote.getText()), 50, 0);

        moDecWarehouseHeight.setDecimalSettings(SGuiUtils.getLabelName(jlWarehouseHeight.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecWarehouseHeightCull.setDecimalSettings(SGuiUtils.getLabelName(jlWarehouseHeightCull.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecWarehouseHeightAvailable.setDecimalSettings(SGuiUtils.getLabelName(jlWarehouseHeightAvailable.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecWarehouseVolume.setDecimalSettings(SGuiUtils.getLabelName(jlWarehouseVolume.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecWarehouseVolumeCull.setDecimalSettings(SGuiUtils.getLabelName(jlWarehouseVolumeCull.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecWarehouseVolumeAvailable.setDecimalSettings(SGuiUtils.getLabelName(jlWarehouseVolumeAvailable.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecItemDensity.setDecimalSettings(SGuiUtils.getLabelName(jlItemDensity.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecPhisicalInventoryHeight.setDecimalSettings(SGuiUtils.getLabelName(jlPhisicalInventoryHeight.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecPhisicalInventoryVolume.setDecimalSettings(SGuiUtils.getLabelName(jlPhisicalInventoryVolume.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecPhisicalInventory.setDecimalSettings(SGuiUtils.getLabelName(jlPhisicalInventory.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecStockBefore.setDecimalSettings(SGuiUtils.getLabelName(jlStockBefore.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecDiference.setDecimalSettings(SGuiUtils.getLabelName(jlDiference.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);

        moFields.addField(moDateDate);
        moFields.addField(moKeyBranch);
        moFields.addField(moKeyWarehouse);
        moFields.addField(moKeyItem);
        moFields.addField(moDecEmptiness);
        moFields.addField(moTextNote);

        moFields.addField(moBoolStockDifferenceSkipped);
        moFields.addField(moDecWarehouseHeight);
        moFields.addField(moDecWarehouseHeightCull);
        moFields.addField(moDecWarehouseHeightAvailable);
        moFields.addField(moDecWarehouseVolume);
        moFields.addField(moDecWarehouseVolumeCull);
        moFields.addField(moDecWarehouseVolumeAvailable);
        moFields.addField(moDecPhisicalInventoryHeight);
        moFields.addField(moDecPhisicalInventoryVolume);
        moFields.addField(moDecPhisicalInventory);
        moFields.addField(moDecStockBefore);
        moFields.addField(moDecDiference);

        moFields.setFormButton(jbSave);

        jlItemDensityUnit.setText(SSomConsts.DEN);
    }

    private void actionKeyWarehouseStateChanged() {
        if (moKeyWarehouse.getSelectedIndex() <= 0) {
            moDecWarehouseHeight.setValue(0d);
            moDecWarehouseVolume.setValue(0d);
        }
        else {
            try {
                moBranchWarehouse.read(miClient.getSession(), moKeyWarehouse.getValue());
                moDecWarehouseHeight.setValue(moBranchWarehouse.getDimensionHeight());
                moDecWarehouseVolume.setValue(moBranchWarehouse.getCapacityRealLiter());
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
        }
        obtainStockByVolume();
    }

    private void actionStateEmpty() {
        if (moBoolEmpty.isSelected()) {
            moDecEmptiness.setEnabled(false);
            moDecPhisicalInventoryHeight.setValue(0d);
            moDecPhisicalInventoryVolume.setValue(0d);
            moDecPhisicalInventory.setValue(0d);

            setStockDifferenceSkipped();
        }
        else {
            moDecEmptiness.setEnabled(true);
            actionEmptinessFocusLost();
        }
    }

    private void actionDateFocusLost() {
        obtainStockByVolume();
    }

    private void actionEmptinessFocusLost() {
        double wahHeightNet = 0;
        double volNet = 0;
        double qtyByUnit = 0;

        if (!moBoolEmpty.isSelected() && moDecEmptiness.getValue() > moDecWarehouseHeightAvailable.getValue()) {
            miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlEmptiness.getText()) + "' no puede ser mayor al del campo '" +
                    SGuiUtils.getLabelName(jlWarehouseHeightAvailable.getText()) + "'.");
            moDecEmptiness.getComponent().requestFocus();
        }
        else {
            wahHeightNet = SLibUtils.round(
                    moDecWarehouseHeightAvailable.getValue() - moDecEmptiness.getValue(), SLibUtils.DecimalFormatValue8D.getMaximumFractionDigits());

            volNet = SLibUtils.round(moDecWarehouseHeightAvailable.getValue() > 0 ?
                    wahHeightNet / moDecWarehouseHeightAvailable.getValue() : 0, SLibUtils.DecimalFormatValue8D.getMaximumFractionDigits());

            qtyByUnit = SLibUtils.round(
                    volNet * moDecWarehouseVolumeAvailable.getValue(), SLibUtils.DecimalFormatValue8D.getMaximumFractionDigits());

            moDecPhisicalInventoryHeight.setValue(SLibUtils.round(
                moDecWarehouseHeight.getValue() - moDecWarehouseHeightCull.getValue() - moDecEmptiness.getValue(),
                SLibUtils.DecimalFormatValue2D.getMaximumFractionDigits()));

            moDecPhisicalInventoryVolume.setValue(SLibUtils.round(qtyByUnit, SLibUtils.DecimalFormatValue2D.getMaximumFractionDigits()));
            moDecPhisicalInventory.setValue(SLibUtils.round(
                moDecPhisicalInventoryVolume.getValue() * moItem.getDensity(), SLibUtils.DecimalFormatValue2D.getMaximumFractionDigits()));
        }
        setStockDifferenceSkipped();
    }

    private void actionItemChangedFkItemId() {
        if (moKeyItem.getSelectedIndex() > 0) {
            try {
                moItem.read(miClient.getSession(), moKeyItem.getValue());
                moDecItemDensity.setValue(moItem.getDensity());
                jlPhisicalInventoryUnit.setText(moKeyItem.getSelectedIndex() > 0 ? moKeyItem.getSelectedItem().getComplement().toString() : "");
                jlStockUnitBefore.setText(moKeyItem.getSelectedIndex() > 0 ? moKeyItem.getSelectedItem().getComplement().toString() : "");
                jlDiferenceUnit.setText(moKeyItem.getSelectedIndex() > 0 ? moKeyItem.getSelectedItem().getComplement().toString() : "");
                obtainStockByVolume();

                actionEmptinessFocusLost();
            }
            catch(Exception e) {
                SLibUtils.showException(this, e);
            }
        }
        else {
            moDecStockBefore.setValue(0d);
            moDecDiference.setValue(0d);

            jlPhisicalInventoryUnit.setText("");
            jlStockUnitBefore.setText("");
            jlDiferenceUnit.setText("");
        }
    }

    private void obtainStockByVolume() {
        double dVolume = 0;

        if (moKeyWarehouse.getSelectedIndex() > 0 && moKeyItem.getSelectedIndex() > 0) {

            // Calculate stock by volumne for Cull:

            dVolume = SSomUtils.obtainStockByVolume(
                miClient.getSession(),
                SLibTimeUtils.digestYear(moDateDate.getValue())[0],
                SLibConsts.UNDEFINED,
                SLibConsts.UNDEFINED,
                SModSysConsts.SS_ITEM_TP_CU,
                moKeyWarehouse.getSelectedIndex() > 0 ? moKeyWarehouse.getValue() : moKeyBranch.getValue(),
                moDateDate.getValue());

            moDecWarehouseVolumeCull.setValue(SLibUtils.round(dVolume, SLibUtils.DecimalFormatValue2D.getMaximumFractionDigits()));
            moDecWarehouseHeightCull.setValue(
                SLibUtils.round((moDecWarehouseVolume.getValue() > 0 ? ((dVolume / moDecWarehouseVolume.getValue()) * moDecWarehouseHeight.getValue()) : 0),
                SLibUtils.DecimalFormatValue2D.getMaximumFractionDigits()));

            // Height and volume available:

            moDecWarehouseHeightAvailable.setValue(SLibUtils.round(moDecWarehouseHeight.getValue() - moDecWarehouseHeightCull.getValue(), SLibUtils.DecimalFormatValue2D.getMaximumFractionDigits()));
            moDecWarehouseVolumeAvailable.setValue(SLibUtils.round(moDecWarehouseVolume.getValue() - moDecWarehouseVolumeCull.getValue(), SLibUtils.DecimalFormatValue2D.getMaximumFractionDigits()));
       }
        else {
            moDecWarehouseVolumeCull.setValue(0d);
            moDecWarehouseHeightCull.setValue(0d);
            moDecWarehouseHeightAvailable.setValue(0d);
            moDecWarehouseVolumeAvailable.setValue(0d);
        }

        setStockDifferenceSkipped();
    }

    private void setStockDifferenceSkipped() {
        double diference = 0;
        SSomStock stock = null;

        if (moKeyWarehouse.getSelectedIndex() > 0 && moKeyItem.getSelectedIndex() > 0) {
            stock = SSomUtils.obtainStock(
                    miClient.getSession(),
                    SLibTimeUtils.digestYear(moDateDate.getValue())[0],
                    moItem.getPkItemId(),
                    moItem.getFkUnitId(),
                    SLibConsts.UNDEFINED,
                    moKeyWarehouse.getSelectedIndex() > 0 ? moKeyWarehouse.getValue() : moKeyBranch.getValue(),
                    SLibConsts.UNDEFINED,
                    null,
                    moDateDate.getValue(),
                    false);

                moDecStockBefore.setValue(stock.getStock());
                diference = moDecPhisicalInventory.getValue() - moDecStockBefore.getValue();
        }
        else {
            moDecStockBefore.setValue(0d);
        }
        moDecDiference.setValue(diference);
        moBoolStockDifferenceSkipped.setEnabled(Math.abs(diference) < ((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getCompany().getMaximumStockDifferenceKg());
    }

    private void setFieldsEditable(boolean b) {
        moDateDate.setEnabled(b);
        moKeyBranch.setEnabled(b);

        moDecWarehouseHeight.setEditable(b);
        moDecWarehouseHeightCull.setEditable(b);
        moDecWarehouseHeightAvailable.setEditable(b);
        moDecWarehouseVolume.setEditable(b);
        moDecWarehouseVolumeCull.setEditable(b);
        moDecWarehouseVolumeAvailable.setEditable(b);
        moDecPhisicalInventoryHeight.setEditable(b);
        moDecPhisicalInventoryVolume.setEditable(b);
        moDecPhisicalInventory.setEditable(b);
        moDecStockBefore.setEditable(b);
        moDecDiference.setEditable(b);

        actionKeyWarehouseStateChanged();
        actionItemChangedFkItemId();
        actionEmptinessFocusLost();
        actionStateEmpty();
    }

    /*
     * Public methods
     */

    @Override
    public void addAllListeners() {
        moDateDate.getComponent().addFocusListener(this);
        moDecEmptiness.getComponent().addFocusListener(this);
        moKeyWarehouse.addItemListener(this);
        moKeyItem.addItemListener(this);
        moBoolEmpty.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        moDateDate.getComponent().removeFocusListener(this);
        moDecEmptiness.getComponent().removeFocusListener(this);
        moKeyWarehouse.removeItemListener(this);
        moKeyItem.removeItemListener(this);
        moBoolEmpty.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        SGuiParams params = new SGuiParams();

        params.getParamsMap().put(SModSysConsts.CS_WAH_TP_TAN, SModSysConsts.CS_WAH_TP_TAN);
        params.getParamsMap().put(SModSysConsts.CS_WAH_TP_TAN_MFG, SModSysConsts.CS_WAH_TP_TAN_MFG);
        params.setKey(((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getCompany().getChildBranches().get(0).getPrimaryKey());
        miClient.getSession().populateCatalogue(moKeyBranch, SModConsts.CU_COB, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyWarehouse, SModConsts.CU_WAH, SModSysConsts.CS_WAH_TP_TAN, params);

        params.getParamsMap().clear();
        params.setKey(null);
        params.getParamsMap().put(SModConsts.SU_UNIT, new int[] { mnParamUnitId });
        miClient.getSession().populateCatalogue(moKeyItem, SModConsts.SU_ITEM, SModSysConsts.SS_ITEM_TP_FG, params);
    }

    @Override
    @SuppressWarnings("unchecked")
    public void setValue(int type, Object value) {

         switch (type) {
            case SGuiConsts.PARAM_DATE:
                moDateDate.setValue(value);
                break;
            case SGuiConsts.PARAM_ROWS:
                moGridRows = (Vector<SGridRow>) value;
                break;
            case SModConsts.SU_UNIT:
                mnParamUnitId = (Integer) value;
                break;
            default:
        }
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbStockDay) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew() && !moRegistry.getXtaCopy() && moRegistry.getPkDayId() == 0) {

            if (moRegistry.getPkCompanyId() == 0) {
                moRegistry.initPrimaryKey();
            }

            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moKeyBranch.setValue(new int[] { moRegistry.getPkCompanyId(), moRegistry.getPkBranchId() });
        moKeyWarehouse.setValue(new int[] { moRegistry.getPkCompanyId(), moRegistry.getPkBranchId(), moRegistry.getPkWarehouseId() });

        moKeyItem.setValue(new int[] { moRegistry.getPkItemId() });
        moDateDate.setValue(moRegistry.isRegistryNew() && !moRegistry.getXtaCopy() ? moDateDate.getValue() : moRegistry.getDate());
        moDecEmptiness.setValue(moRegistry.getEmptiness());
        moDecWarehouseHeightCull.setValue(moRegistry.getCull());
        moBoolEmpty.setValue(moRegistry.isEmpty());
        moBoolStockDifferenceSkipped.setValue(moRegistry.isStockDifferenceSkipped());
        moTextNote.setValue(moRegistry.getNote());

        setFormEditable(true);

        if (moRegistry.isRegistryNew() && !moRegistry.getXtaCopy() && moRegistry.getPkDayId() == 0) {

            if (moRegistry.getPkCompanyId() == 0) {
                moFieldKeyGroup.resetGroup();
            }

            moKeyBranch.setValue(moRegistry.getPkBranchId() <= 0 ? ((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getCompany().getChildBranches().get(0).getPrimaryKey() :
                    new int[] { moRegistry.getPkCompanyId(), moRegistry.getPkBranchId() });
        }
        else {
            moKeyWarehouse.setEnabled(false);
            moKeyItem.setEnabled(false);
            actionKeyWarehouseStateChanged();
        }
        moBoolStockDifferenceSkipped.setEnabled(false);

        setStockDifferenceSkipped();
        setFieldsEditable(false);
        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbStockDay registry = moRegistry.clone();

        if (registry.isRegistryNew()) {
            registry.setPkYearId(SLibTimeUtils.digestYear(moDateDate.getValue())[0]);
            registry.setPkItemId(moKeyItem.getValue()[0]);
            registry.setPkUnitId(moKeyItem.getSelectedItem().getForeignKey()[0]);
            registry.setPkCompanyId(moKeyWarehouse.getValue()[0]);
            registry.setPkBranchId(moKeyWarehouse.getValue()[1]);
            registry.setPkWarehouseId(moKeyWarehouse.getValue()[2]);
        }

        registry.obtainXtaValues(miClient.getSession(), registry.getPrimaryKey());

        registry.setDate(moDateDate.getValue());
        registry.setEmptiness(moBoolEmpty.isSelected() ? 0d : moDecEmptiness.getValue());
        registry.setCull(moDecWarehouseHeightCull.getValue());
        registry.setStockDay(moDecPhisicalInventory.getValue());
        //registry.setStockSystem(...);
        registry.setNote(moTextNote.getValue());
        registry.setEmpty(moBoolEmpty.getValue());
        registry.setStockDifferenceSkipped(!moBoolStockDifferenceSkipped.isEnabled() ? false : moBoolStockDifferenceSkipped.getValue());
        //registry.setDeleted(...);
        //registry.setSystem(...);

        registry.setXtaRegistryEditing(false);

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SSomStock stock = null;
        SGuiValidation validation = moFields.validateFields();
        SDbStockDay stockDay;

        if (validation.isValid()) {
            if (!SGuiClientUtils.isPeriodOpened(miClient.getSession(), moDateDate.getValue())) {
                validation.setMessage("El período está cerrado.");
                validation.setComponent(moDateDate.getComponent());
            }
        }

        if (validation.isValid()) {
            if (!moBoolEmpty.isSelected() && moDecEmptiness.getValue() > moDecWarehouseHeightAvailable.getValue()) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlEmptiness.getText()) + "' no puede ser mayor al del campo '" +
                        SGuiUtils.getLabelName(jlWarehouseHeightAvailable.getText()) + "'.");
                validation.setComponent(moDecEmptiness.getComponent());
            }
        }

        if (validation.isValid()) {
            for (SGridRow row : moGridRows) {

                // Check if there is a warehouse with empty > 0:

                stockDay = (SDbStockDay) row;
                if (stockDay.getPkCompanyId() == moKeyWarehouse.getValue()[0] &&
                        stockDay.getPkBranchId() == moKeyWarehouse.getValue()[1] &&
                        stockDay.getPkWarehouseId() == moKeyWarehouse.getValue()[2] &&
                        stockDay.getEmptiness() >= 0 && moDecEmptiness.getValue() >= 0 &&
                        !moBoolEmpty.isSelected() &&
                        !stockDay.getXtaRegistryEditing() &&
                        !stockDay.isEmpty()) {

                    validation.setMessage("El tanque: '" + moKeyWarehouse.getSelectedItem() + "' sólo puede contener un ítem con existencia (física).");
                    validation.setComponent(moDateDate.getComponent());
                    break;
                }
            }
        }

        if (validation.isValid()) {
            if (!moBoolEmpty.isSelected()) {

                stock = SSomUtils.obtainStock(miClient.getSession(), SLibTimeUtils.digestYear(moDateDate.getValue())[0],
                        moKeyItem.getValue()[0], moKeyItem.getSelectedItem().getForeignKey()[0], SLibConsts.UNDEFINED,
                        moKeyWarehouse.getValue(), SLibConsts.UNDEFINED, null, moDateDate.getValue(), false);

                if (stock.getStock() == 0) {
                    stock = SSomUtils.obtainStock(miClient.getSession(), SLibTimeUtils.digestYear(moDateDate.getValue())[0],
                        SLibConsts.UNDEFINED, SLibConsts.UNDEFINED, SLibConsts.UNDEFINED, moKeyWarehouse.getValue(), SLibConsts.UNDEFINED, null, moDateDate.getValue(), false);
                    if (stock.getStock() > 0) {
                        validation.setMessage("El tanque: '" + moKeyWarehouse.getSelectedItem().getItem() + "' contiene existencias (sistema) de otro ítem.");
                        validation.setComponent(moKeyItem.getComponent());
                    }
                }
            }
        }

        if (validation.isValid()) {
            if (moBranchWarehouse.getFkWarehouseTypeId() == SModSysConsts.CS_WAH_TP_TAN &&
                    moDecDiference.getValue() < 0 &&
                    !moBoolStockDifferenceSkipped.getValue()) {
                validation.setMessage("El tanque: '" + moKeyWarehouse.getSelectedItem().getItem() + "' tiene una existencia de sistema mayor a la física.\n" +
                        "Se deben realizar los ajustes de inventario necesarios.");
                validation.setComponent(moDecEmptiness.getComponent());
            }
        }

        return validation;
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                JComboBox comboBox = (JComboBox) e.getSource();
                if (comboBox == moKeyWarehouse) {
                    actionKeyWarehouseStateChanged();
                }
                else if (comboBox == moKeyItem) {
                    actionItemChangedFkItemId();
                }
            }
        }
        else  if (e.getSource() instanceof JCheckBox) {
            JCheckBox checkBox = (JCheckBox)  e.getSource();

            if (checkBox == moBoolEmpty) {
                actionStateEmpty();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
        
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == moDateDate.getComponent()) {
                actionDateFocusLost();
            }
            else if (textField == moDecEmptiness.getComponent()) {
                actionEmptinessFocusLost();
            }
        }
    }
}
