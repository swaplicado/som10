/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;
import som.mod.SModConsts;
import som.mod.som.db.SDbSeason;
import som.mod.som.db.SSomUtils;

/**
 *
 * @author Juan Barajas, Sergio Flores
 */
public class SFormDialogAssignSeasonRegion extends SBeanFormDialog {

    /**
     * Creates new form SFormDialogAssignSeasonRegion
     */
    public SFormDialogAssignSeasonRegion(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.SX_SEAS_REG, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        moDateStart = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel12 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        moDateEnd = new sa.lib.gui.bean.SBeanFieldDate();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Par√°metros del proceso:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateStart.setText("Fecha inicial:*");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlDateStart);
        jPanel11.add(moDateStart);

        jPanel2.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEnd.setText("Fecha final:*");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlDateEnd);
        jPanel12.add(moDateEnd);

        jPanel2.add(jPanel12);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private sa.lib.gui.bean.SBeanFieldDate moDateEnd;
    private sa.lib.gui.bean.SBeanFieldDate moDateStart;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 400, 250);
        jbSave.setSize(100, 25);
        jbSave.setText("Aceptar");

        moDateStart.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateStart.getText()), true);
        moDateEnd.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateEnd.getText()), true);

        moFields.addField(moDateStart);
        moFields.addField(moDateEnd);

        moFields.setFormButton(jbSave);
        
        moDateStart.setValue(SLibTimeUtils.getBeginOfMonth(miClient.getSession().getWorkingDate()));
        moDateEnd.setValue(SLibTimeUtils.getEndOfMonth(miClient.getSession().getWorkingDate()));
    }

    private void assignSeasonRegion() throws Exception {
        String msg = SSomUtils.completeSeasonRegionTickets(miClient.getSession(), moDateStart.getValue(), moDateEnd.getValue());
        
        if (!msg.isEmpty()) {
            miClient.showMsgBoxInformation(msg);
            
            miClient.getSession().notifySuscriptors(SModConsts.SX_TIC_MAN);
            miClient.getSession().notifySuscriptors(SModConsts.SX_TIC_MAN_SUP);
            miClient.getSession().notifySuscriptors(SModConsts.S_TIC);
        }
    }
    
    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {

    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbSeason season = new SDbSeason();
        
        return season;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            validation = SGuiUtils.validateDateRange(moDateStart, moDateEnd);
        }

        return validation;
    }
    
    
    @Override
    public void actionSave() {
        SGuiValidation validation = validateForm();
        
        if (SGuiUtils.computeValidation(miClient, validation)) {
            try {
                assignSeasonRegion();
                dispose();
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
        }
    }
}
