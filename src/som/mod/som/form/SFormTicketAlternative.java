/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;
import som.gui.SGuiClientUtils;
import som.mod.SModConsts;
import som.mod.SModSysConsts;
import som.mod.som.db.SDbItem;
import som.mod.som.db.SDbProducer;
import som.mod.som.db.SDbTicketAlternative;
import som.mod.som.db.SSomConsts;
import som.mod.som.db.SSomUtils;

/**
 *
 * @author Isabel Servín
 */
public class SFormTicketAlternative extends SBeanForm implements ActionListener, ItemListener, FocusListener {

    private SDbTicketAlternative moRegistry;
    private SDbItem moItem;
    private SDbProducer moProducer;
    private int mnSeasonId;
    private int mnRegionId;
    private boolean mbIsPacking;
    private boolean mbIsLaboratory;
    private boolean mbIsRevImport1;
    private boolean mbIsRevImport2;

    private boolean mbFirstTime;
    
    /**
     * Creates new form SFormTicket
     * @param client GUI client.
     * @param title Form title.
     * @param formSubType Form subtype: 1) normal ticket: SLibConsts.UNDEFINED; 2) ticket to be tared: SModConsts.SX_TIC_TARE_PEND.
     */
    public SFormTicketAlternative(SGuiClient client, String title, int formSubType) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.S_ALT_TIC, formSubType, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jlScale = new javax.swing.JLabel();
        moKeyScale = new sa.lib.gui.bean.SBeanFieldKey();
        moTextScale = new sa.lib.gui.bean.SBeanFieldText();
        moBoolTared = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel4 = new javax.swing.JPanel();
        jlTicket = new javax.swing.JLabel();
        moIntTicket = new sa.lib.gui.bean.SBeanFieldInteger();
        jlDummy = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jlProducer = new javax.swing.JLabel();
        moKeyProducer = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel12 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moKeyItem = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel21 = new javax.swing.JPanel();
        jlInputSource = new javax.swing.JLabel();
        moKeyInputSource = new sa.lib.gui.bean.SBeanFieldKey();
        jbInputSource = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jlPlates = new javax.swing.JLabel();
        moTextPlates = new sa.lib.gui.bean.SBeanFieldText();
        jlPlatesCage = new javax.swing.JLabel();
        moTextPlatesCage = new sa.lib.gui.bean.SBeanFieldText();
        jPanel3 = new javax.swing.JPanel();
        jlDriver = new javax.swing.JLabel();
        moTextDriver = new sa.lib.gui.bean.SBeanFieldText();
        jPanel7 = new javax.swing.JPanel();
        jlWeightSource = new javax.swing.JLabel();
        moDecWeightSource = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWeightSourceUnit = new javax.swing.JLabel();
        moBoolWeightSourceAvailable = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel9 = new javax.swing.JPanel();
        jlWeightDestinyArrival = new javax.swing.JLabel();
        moDecWeightDestinyArrival = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWeightDestinyArrivalUnit = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jlWeightDestinyDeparture = new javax.swing.JLabel();
        moDecWeightDestinyDeparture = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWeightDestinyDepartureUnit = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jlDatetimeArrival = new javax.swing.JLabel();
        moDatetimeArrival = new sa.lib.gui.bean.SBeanFieldDatetime();
        jLabel1 = new javax.swing.JLabel();
        jlOpeArr = new javax.swing.JLabel();
        moTextOpeArr = new sa.lib.gui.bean.SBeanFieldText();
        jPanel11 = new javax.swing.JPanel();
        jlDatetimeDeparture = new javax.swing.JLabel();
        moDatetimeDeparture = new sa.lib.gui.bean.SBeanFieldDatetime();
        jLabel2 = new javax.swing.JLabel();
        jlOpeDep = new javax.swing.JLabel();
        moTextOpeDep = new sa.lib.gui.bean.SBeanFieldText();
        jPanel16 = new javax.swing.JPanel();
        jlPackingFullQuantityArrival = new javax.swing.JLabel();
        moDecPackingFullQuantityArrival = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlPackingFullQuantityArrivalUnit = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel();
        jlPackingEmptyQuantityArrival = new javax.swing.JLabel();
        moDecPackingEmptyQuantityArrival = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlPackingEmptyQuantityArrivalUnit = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        jlPackingFullQuantityDeparture = new javax.swing.JLabel();
        moDecPackingFullQuantityDeparture = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlPackingFullQuantityDepartureUnit = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        jlPackingEmptyQuantityDeparture = new javax.swing.JLabel();
        moDecPackingEmptyQuantityDeparture = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlPackingEmptyQuantityDepartureUnit = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        jlWeightAverage = new javax.swing.JLabel();
        moDecWeightAverage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWeightAverageUnit = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jlNote = new javax.swing.JLabel();
        moTextNote = new sa.lib.gui.bean.SBeanFieldText();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(19, 1, 0, 5));

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlScale.setForeground(new java.awt.Color(51, 51, 255));
        jlScale.setText("Báscula:*");
        jlScale.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel13.add(jlScale);

        moKeyScale.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel13.add(moKeyScale);

        moTextScale.setEditable(false);
        moTextScale.setText("sBeanFieldText1");
        moTextScale.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel13.add(moTextScale);

        moBoolTared.setText("Boleto tarado");
        moBoolTared.setEditable(false);
        jPanel13.add(moBoolTared);

        jPanel2.add(jPanel13);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTicket.setText("Boleto:*");
        jlTicket.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel4.add(jlTicket);
        jPanel4.add(moIntTicket);

        jlDummy.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel4.add(jlDummy);

        jPanel2.add(jPanel4);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProducer.setText("Proveedor:*");
        jlProducer.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel10.add(jlProducer);

        moKeyProducer.setPreferredSize(new java.awt.Dimension(600, 23));
        jPanel10.add(moKeyProducer);

        jPanel2.add(jPanel10);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Ítem:*");
        jlItem.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel12.add(jlItem);

        moKeyItem.setPreferredSize(new java.awt.Dimension(600, 23));
        jPanel12.add(moKeyItem);

        jPanel2.add(jPanel12);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlInputSource.setText("Origen insumo:*");
        jlInputSource.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel21.add(jlInputSource);

        moKeyInputSource.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel21.add(moKeyInputSource);

        jbInputSource.setIcon(new javax.swing.ImageIcon(getClass().getResource("/som/gui/img/icon_std_wizard.gif"))); // NOI18N
        jbInputSource.setToolTipText("Seleccionar origen insumo del proveedor");
        jbInputSource.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel21.add(jbInputSource);

        jPanel2.add(jPanel21);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPlates.setText("Placas vehículo:*");
        jlPlates.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel6.add(jlPlates);

        moTextPlates.setText("sBeanFieldText2");
        jPanel6.add(moTextPlates);

        jlPlatesCage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlPlatesCage.setText("Placas caja:");
        jlPlatesCage.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel6.add(jlPlatesCage);

        moTextPlatesCage.setText("sBeanFieldText2");
        jPanel6.add(moTextPlatesCage);

        jPanel2.add(jPanel6);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDriver.setText("Chofer vehículo:*");
        jlDriver.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel3.add(jlDriver);

        moTextDriver.setText("sBeanFieldText2");
        moTextDriver.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel3.add(moTextDriver);

        jPanel2.add(jPanel3);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeightSource.setText("Peso origen:*");
        jlWeightSource.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel7.add(jlWeightSource);
        jPanel7.add(moDecWeightSource);

        jlWeightSourceUnit.setText("UNIT");
        jlWeightSourceUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel7.add(jlWeightSourceUnit);

        moBoolWeightSourceAvailable.setText("Peso origen disponible");
        moBoolWeightSourceAvailable.setPreferredSize(new java.awt.Dimension(165, 23));
        jPanel7.add(moBoolWeightSourceAvailable);

        jPanel2.add(jPanel7);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeightDestinyArrival.setText("Peso entrada:*");
        jlWeightDestinyArrival.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel9.add(jlWeightDestinyArrival);
        jPanel9.add(moDecWeightDestinyArrival);

        jlWeightDestinyArrivalUnit.setText("UNIT");
        jlWeightDestinyArrivalUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel9.add(jlWeightDestinyArrivalUnit);

        jPanel2.add(jPanel9);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeightDestinyDeparture.setText("Peso salida:*");
        jlWeightDestinyDeparture.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel15.add(jlWeightDestinyDeparture);
        jPanel15.add(moDecWeightDestinyDeparture);

        jlWeightDestinyDepartureUnit.setText("UNIT");
        jlWeightDestinyDepartureUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel15.add(jlWeightDestinyDepartureUnit);

        jPanel2.add(jPanel15);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDatetimeArrival.setText("Fecha-hora entrada:*");
        jlDatetimeArrival.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel8.add(jlDatetimeArrival);
        jPanel8.add(moDatetimeArrival);

        jLabel1.setPreferredSize(new java.awt.Dimension(5, 23));
        jPanel8.add(jLabel1);

        jlOpeArr.setText("Operador báscula entrada:");
        jlOpeArr.setPreferredSize(new java.awt.Dimension(155, 23));
        jPanel8.add(jlOpeArr);

        moTextOpeArr.setText("sBeanFieldText2");
        moTextOpeArr.setPreferredSize(new java.awt.Dimension(260, 23));
        jPanel8.add(moTextOpeArr);

        jPanel2.add(jPanel8);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDatetimeDeparture.setText("Fecha-hora salida:*");
        jlDatetimeDeparture.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel11.add(jlDatetimeDeparture);
        jPanel11.add(moDatetimeDeparture);

        jLabel2.setPreferredSize(new java.awt.Dimension(5, 23));
        jPanel11.add(jLabel2);

        jlOpeDep.setText("Operador báscula salida:");
        jlOpeDep.setPreferredSize(new java.awt.Dimension(155, 23));
        jPanel11.add(jlOpeDep);

        moTextOpeDep.setText("sBeanFieldText2");
        moTextOpeDep.setPreferredSize(new java.awt.Dimension(260, 23));
        jPanel11.add(moTextOpeDep);

        jPanel2.add(jPanel11);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPackingFullQuantityArrival.setText("Cant. empaque lleno entrada:");
        jlPackingFullQuantityArrival.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel16.add(jlPackingFullQuantityArrival);
        jPanel16.add(moDecPackingFullQuantityArrival);

        jlPackingFullQuantityArrivalUnit.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel16.add(jlPackingFullQuantityArrivalUnit);

        jPanel2.add(jPanel16);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPackingEmptyQuantityArrival.setText("Cant. empaque vacío entrada:");
        jlPackingEmptyQuantityArrival.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel18.add(jlPackingEmptyQuantityArrival);
        jPanel18.add(moDecPackingEmptyQuantityArrival);

        jlPackingEmptyQuantityArrivalUnit.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel18.add(jlPackingEmptyQuantityArrivalUnit);

        jPanel2.add(jPanel18);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPackingFullQuantityDeparture.setText("Cant. empaque lleno salida:");
        jlPackingFullQuantityDeparture.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel17.add(jlPackingFullQuantityDeparture);
        jPanel17.add(moDecPackingFullQuantityDeparture);

        jlPackingFullQuantityDepartureUnit.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel17.add(jlPackingFullQuantityDepartureUnit);

        jPanel2.add(jPanel17);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPackingEmptyQuantityDeparture.setText("Cant. empaque vacío salida:");
        jlPackingEmptyQuantityDeparture.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel19.add(jlPackingEmptyQuantityDeparture);
        jPanel19.add(moDecPackingEmptyQuantityDeparture);

        jlPackingEmptyQuantityDepartureUnit.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel19.add(jlPackingEmptyQuantityDepartureUnit);

        jPanel2.add(jPanel19);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeightAverage.setText("Peso promedio:");
        jlWeightAverage.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel20.add(jlWeightAverage);
        jPanel20.add(moDecWeightAverage);

        jlWeightAverageUnit.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel20.add(jlWeightAverageUnit);

        jPanel2.add(jPanel20);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNote.setText("Observaciones entrada:");
        jlNote.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel5.add(jlNote);

        moTextNote.setText("sBeanFieldText2");
        moTextNote.setPreferredSize(new java.awt.Dimension(600, 23));
        jPanel5.add(moTextNote);

        jPanel2.add(jPanel5);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        try {
            handleWindowActivated();
        }
        catch (InstantiationException | IllegalAccessException e) {
            SLibUtils.printException(this, e);
            Logger.getLogger(SFormTicketAlternative.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        attendWindowClosed();
    }//GEN-LAST:event_formWindowClosed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbInputSource;
    private javax.swing.JLabel jlDatetimeArrival;
    private javax.swing.JLabel jlDatetimeDeparture;
    private javax.swing.JLabel jlDriver;
    private javax.swing.JLabel jlDummy;
    private javax.swing.JLabel jlInputSource;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlNote;
    private javax.swing.JLabel jlOpeArr;
    private javax.swing.JLabel jlOpeDep;
    private javax.swing.JLabel jlPackingEmptyQuantityArrival;
    private javax.swing.JLabel jlPackingEmptyQuantityArrivalUnit;
    private javax.swing.JLabel jlPackingEmptyQuantityDeparture;
    private javax.swing.JLabel jlPackingEmptyQuantityDepartureUnit;
    private javax.swing.JLabel jlPackingFullQuantityArrival;
    private javax.swing.JLabel jlPackingFullQuantityArrivalUnit;
    private javax.swing.JLabel jlPackingFullQuantityDeparture;
    private javax.swing.JLabel jlPackingFullQuantityDepartureUnit;
    private javax.swing.JLabel jlPlates;
    private javax.swing.JLabel jlPlatesCage;
    private javax.swing.JLabel jlProducer;
    private javax.swing.JLabel jlScale;
    private javax.swing.JLabel jlTicket;
    private javax.swing.JLabel jlWeightAverage;
    private javax.swing.JLabel jlWeightAverageUnit;
    private javax.swing.JLabel jlWeightDestinyArrival;
    private javax.swing.JLabel jlWeightDestinyArrivalUnit;
    private javax.swing.JLabel jlWeightDestinyDeparture;
    private javax.swing.JLabel jlWeightDestinyDepartureUnit;
    private javax.swing.JLabel jlWeightSource;
    private javax.swing.JLabel jlWeightSourceUnit;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolTared;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolWeightSourceAvailable;
    private sa.lib.gui.bean.SBeanFieldDatetime moDatetimeArrival;
    private sa.lib.gui.bean.SBeanFieldDatetime moDatetimeDeparture;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecPackingEmptyQuantityArrival;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecPackingEmptyQuantityDeparture;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecPackingFullQuantityArrival;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecPackingFullQuantityDeparture;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightAverage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightDestinyArrival;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightDestinyDeparture;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightSource;
    private sa.lib.gui.bean.SBeanFieldInteger moIntTicket;
    private sa.lib.gui.bean.SBeanFieldKey moKeyInputSource;
    private sa.lib.gui.bean.SBeanFieldKey moKeyItem;
    private sa.lib.gui.bean.SBeanFieldKey moKeyProducer;
    private sa.lib.gui.bean.SBeanFieldKey moKeyScale;
    private sa.lib.gui.bean.SBeanFieldText moTextDriver;
    private sa.lib.gui.bean.SBeanFieldText moTextNote;
    private sa.lib.gui.bean.SBeanFieldText moTextOpeArr;
    private sa.lib.gui.bean.SBeanFieldText moTextOpeDep;
    private sa.lib.gui.bean.SBeanFieldText moTextPlates;
    private sa.lib.gui.bean.SBeanFieldText moTextPlatesCage;
    private sa.lib.gui.bean.SBeanFieldText moTextScale;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 960, 600);
        
        moKeyScale.setKeySettings(miClient, SGuiUtils.getLabelName(jlScale.getText()), true);
        moIntTicket.setIntegerSettings(SGuiUtils.getLabelName(jlTicket.getText()), SGuiConsts.GUI_TYPE_INT_RAW, true);
        moKeyProducer.setKeySettings(miClient, SGuiUtils.getLabelName(jlProducer.getText()), true);
        moKeyItem.setKeySettings(miClient, SGuiUtils.getLabelName(jlItem.getText()), true);
        moKeyInputSource.setKeySettings(miClient, SGuiUtils.getLabelName(jlInputSource.getText()), true);
        moTextPlates.setTextSettings(SGuiUtils.getLabelName(jlPlates.getText()), 25);
        moTextPlatesCage.setTextSettings(SGuiUtils.getLabelName(jlPlatesCage.getText()), 25, 0);
        moTextDriver.setTextSettings(SGuiUtils.getLabelName(jlDriver.getText()), 150);
        moBoolWeightSourceAvailable.setBooleanSettings(SGuiUtils.getLabelName(moBoolWeightSourceAvailable.getText()), false);
        moDecWeightSource.setDecimalSettings(SGuiUtils.getLabelName(jlWeightSource.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moDecWeightDestinyArrival.setDecimalSettings(SGuiUtils.getLabelName(jlWeightDestinyArrival.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moDecWeightDestinyDeparture.setDecimalSettings(SGuiUtils.getLabelName(jlWeightDestinyDeparture.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moDecWeightAverage.setDecimalSettings(SGuiUtils.getLabelName(jlWeightAverage.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDatetimeArrival.setDateSettings(miClient, SGuiUtils.getLabelName(jlDatetimeArrival.getText()), true);
        moDatetimeDeparture.setDateSettings(miClient, SGuiUtils.getLabelName(jlDatetimeDeparture.getText()), true);
        moTextOpeArr.setTextSettings(SGuiUtils.getLabelName(jlOpeArr.getText()), 35, 0);
        moTextOpeDep.setTextSettings(SGuiUtils.getLabelName(jlOpeDep.getText()), 35, 0);
        moDecPackingFullQuantityArrival.setDecimalSettings(SGuiUtils.getLabelName(jlPackingFullQuantityArrival.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecPackingEmptyQuantityArrival.setDecimalSettings(SGuiUtils.getLabelName(jlPackingEmptyQuantityArrival.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecPackingFullQuantityDeparture.setDecimalSettings(SGuiUtils.getLabelName(jlPackingFullQuantityDeparture.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecPackingEmptyQuantityDeparture.setDecimalSettings(SGuiUtils.getLabelName(jlPackingEmptyQuantityDeparture.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moTextNote.setTextSettings(SGuiUtils.getLabelName(jlNote.getText()), 255, 0);
        
        moFields.addField(moKeyScale);
        moFields.addField(moIntTicket);
        moFields.addField(moKeyProducer);
        moFields.addField(moKeyItem);
        moFields.addField(moKeyInputSource);
        moFields.addField(moTextPlates);
        moFields.addField(moTextPlatesCage);
        moFields.addField(moTextDriver);
        moFields.addField(moBoolWeightSourceAvailable);
        moFields.addField(moDecWeightSource);
        moFields.addField(moDecWeightDestinyArrival);
        moFields.addField(moDecWeightDestinyDeparture);
        moFields.addField(moDecWeightAverage);
        moFields.addField(moDatetimeArrival);
        moFields.addField(moDatetimeDeparture);
        moFields.addField(moTextOpeArr);
        moFields.addField(moTextOpeDep);
        moFields.addField(moDecPackingFullQuantityArrival);
        moFields.addField(moDecPackingEmptyQuantityArrival);
        moFields.addField(moDecPackingFullQuantityDeparture);
        moFields.addField(moDecPackingEmptyQuantityDeparture);
        moFields.addField(moTextNote);

        moFields.setFormButton(jbSave);
        
        jlWeightSourceUnit.setText(SSomConsts.KG);
        jlWeightDestinyArrivalUnit.setText(SSomConsts.KG);
        jlWeightDestinyDepartureUnit.setText(SSomConsts.KG);
    }

    private void handleWindowActivated() throws InstantiationException, IllegalAccessException {
        if (mbFirstTime) {
            mbFirstTime = false;
            
            setEnabledFields();
        }
    }

    private void attendWindowClosed() {
        
    }

    private void setEnabledFields() {
        moBoolTared.setEditable(false);
        moIntTicket.setEditable(true);
        moKeyProducer.setEnabled(true);
        moKeyItem.setEnabled(true);
        moKeyInputSource.setEnabled(moKeyInputSource.getItemCount() > 1);
        jbInputSource.setEnabled(moKeyInputSource.getItemCount() > 1);
        moTextPlates.setEditable(true);
        moTextPlatesCage.setEditable(true);
        moTextDriver.setEditable(true);
        moDecWeightSource.setEditable(false);
        moBoolWeightSourceAvailable.setEnabled(false);
        moDecWeightDestinyArrival.setEditable(false);
        moDecWeightDestinyDeparture.setEditable(false);
        moDatetimeArrival.setEditable(false);
        moDatetimeDeparture.setEditable(false);
        moDecPackingFullQuantityArrival.setEditable(false);
        moDecPackingEmptyQuantityArrival.setEditable(false);
        moDecPackingFullQuantityDeparture.setEditable(false);
        moDecPackingEmptyQuantityDeparture.setEditable(false);
        moTextOpeArr.setEnabled(false);
        moTextOpeDep.setEnabled(false);
    }

    private void itemStateKeyProducer() {
        if (moKeyProducer.getSelectedIndex() <= 0) {
            moProducer = null;
        }
        else {
            moProducer = (SDbProducer) miClient.getSession().readRegistry(SModConsts.SU_PROD, moKeyProducer.getValue());
            moKeyInputSource.setValue(new int[] { moProducer.getFkInputSourceId() });
        }
    }

    private void itemStateKeyItem() {
        mbIsPacking = false;
        mbIsLaboratory = false;
        moDecPackingFullQuantityArrival.setValue(0d);
        moDecPackingEmptyQuantityArrival.setValue(0d);
        moDecPackingFullQuantityDeparture.setValue(0d);
        moDecPackingEmptyQuantityDeparture.setValue(0d);
        jlPackingFullQuantityArrivalUnit.setText("");
        jlPackingEmptyQuantityArrivalUnit.setText("");
        jlPackingFullQuantityDepartureUnit.setText("");
        jlPackingEmptyQuantityDepartureUnit.setText("");
        jlWeightAverageUnit.setText("");
        moDecPackingFullQuantityArrival.setEditable(mbIsPacking);
        moDecPackingEmptyQuantityArrival.setEditable(mbIsPacking);
        
        moKeyInputSource.removeAllItems();
        moKeyInputSource.setEnabled(false);

        if (moKeyItem.getSelectedIndex() > 0) {
            try {
                readItem();

                mbIsPacking = moItem.isPacking();
                mbIsLaboratory = moItem.isLaboratory();
                jlPackingFullQuantityArrivalUnit.setText(moItem.getPackingName());
                jlPackingEmptyQuantityArrivalUnit.setText(moItem.getPackingName());
                jlPackingFullQuantityDepartureUnit.setText(moItem.getPackingName());
                jlPackingEmptyQuantityDepartureUnit.setText(moItem.getPackingName());
                moDecPackingFullQuantityArrival.setEditable(mbIsPacking);
                moDecPackingEmptyQuantityArrival.setEditable(mbIsPacking);

                if (!jlWeightDestinyDepartureUnit.getText().isEmpty() && !moItem.getPackingName().isEmpty()) {
                    jlWeightAverageUnit.setText(jlWeightDestinyDepartureUnit.getText() + "/" + moItem.getPackingName());
                }
                else {
                    jlWeightAverageUnit.setText("");
                }
                
                miClient.getSession().populateCatalogue(moKeyInputSource, SModConsts.SU_INP_SRC, SLibConsts.UNDEFINED, new SGuiParams(moItem.getFkInputCategoryId()));
                moKeyInputSource.setEnabled(moKeyInputSource.getItemCount() > 1);
                jbInputSource.setEnabled(moKeyInputSource.getItemCount() > 1);
                if (moProducer != null) {
                    moKeyInputSource.setValue(new int[] { moProducer.getFkInputSourceId() });
                }
            }
            catch (SQLException e) {
                SLibUtils.showException(this, e);
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
        }
    }
    
    private void readItem() throws SQLException, Exception {
        if (moKeyItem.getSelectedIndex() <= 0) {
            moItem = null;
        }
        else {
            moItem = (SDbItem) miClient.getSession().readRegistry(SModConsts.SU_ITEM, moKeyItem.getValue());
        }
    }

    private void itemStateWeightSourceAvailable() {
        moDecWeightSource.setEditable(moBoolWeightSourceAvailable.getValue());
    }

    private void computeWeightAverage() {
        if (moDecWeightDestinyDeparture.getValue() > 0 && (moDecPackingFullQuantityArrival.getValue() > 0 || moDecPackingFullQuantityDeparture.getValue() > 0)) {
            // tare - packing_net_weight / full_packing_net_quantity:
            moDecWeightAverage.setValue(((moDecWeightDestinyArrival.getValue() - moDecWeightDestinyDeparture.getValue()) -
                ((moDecPackingFullQuantityArrival.getValue() + moDecPackingEmptyQuantityArrival.getValue()) * moItem.getPackingWeight()) +
                ((moDecPackingFullQuantityDeparture.getValue() + moDecPackingEmptyQuantityDeparture.getValue()) * moItem.getPackingWeight())) /
                (moDecPackingFullQuantityArrival.getValue() - moDecPackingFullQuantityDeparture.getValue()));
        }
    }

    private void getSeasonRegion() {
        mnSeasonId = 0;
        mnRegionId = 0;

        try {
            mnSeasonId = SSomUtils.getProperSeasonId(miClient.getSession(), moDatetimeArrival.getValue(), moKeyItem.getValue()[0], moKeyProducer.getValue()[0]);

            if (mnSeasonId != SLibConsts.UNDEFINED) {
                mnRegionId = SSomUtils.getProperRegionId(miClient.getSession(), mnSeasonId, moKeyItem.getValue()[0], moKeyProducer.getValue()[0]);
            }
        }
        catch (Exception e) {
             SLibUtils.showException(this, e);
        }
    }

    private void actionInputSource() {
        if (jbInputSource.isEnabled()) {
            try {
                moKeyInputSource.setValue(new int[] { moProducer.getFkInputSourceId() });
            }
            catch (Exception e){
                miClient.showMsgBoxError(e.getMessage());
            }
        }
    }
    
    @Override
    public void addAllListeners() {
        moKeyProducer.addItemListener(this);
        moKeyItem.addItemListener(this);
        jbInputSource.addActionListener(this);
        moBoolWeightSourceAvailable.addItemListener(this);
        moDecWeightSource.addFocusListener(this);
        moDecWeightDestinyArrival.addFocusListener(this);
        moDecWeightDestinyDeparture.addFocusListener(this);
        moDecPackingFullQuantityArrival.addFocusListener(this);
        moDecPackingEmptyQuantityArrival.addFocusListener(this);
        moDecPackingFullQuantityDeparture.addFocusListener(this);
        moDecPackingEmptyQuantityDeparture.addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        moKeyProducer.removeItemListener(this);
        moKeyItem.removeItemListener(this);
        jbInputSource.removeActionListener(this);
        moBoolWeightSourceAvailable.removeItemListener(this);
        moDecWeightSource.removeFocusListener(this);
        moDecWeightDestinyArrival.removeFocusListener(this);
        moDecWeightDestinyDeparture.removeFocusListener(this);
        moDecPackingFullQuantityArrival.removeFocusListener(this);
        moDecPackingEmptyQuantityArrival.removeFocusListener(this);
        moDecPackingFullQuantityDeparture.removeFocusListener(this);
        moDecPackingEmptyQuantityDeparture.removeFocusListener(this);
    }

    @Override
    public void reloadCatalogues() {
        try {
            SGuiParams params = new SGuiParams();
            params.getParamsMap().put(SModConsts.SX_ITEM_ALT, SSomUtils.getAlternativeItemCodes(miClient.getSession()));
            miClient.getSession().populateCatalogue(moKeyScale, SModConsts.CU_USR_SCA, SLibConsts.UNDEFINED, new SGuiParams(new int[] { miClient.getSession().getUser().getPkUserId() }));
            miClient.getSession().populateCatalogue(moKeyItem, SModConsts.SU_ITEM, SLibConsts.UNDEFINED, params);
            miClient.getSession().populateCatalogue(moKeyProducer, SModConsts.SU_PROD, SLibConsts.UNDEFINED, null);
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbTicketAlternative) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;
        mbFirstTime = true;
        
        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            moRegistry.setDatetimeArrival(miClient.getSession().getWorkingDate());
            moRegistry.setDatetimeDeparture(miClient.getSession().getWorkingDate());
            moKeyScale.setVisible(true);
            moTextScale.setVisible(false);
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moKeyScale.setValue(new int[] { moRegistry.getFkScaleId() });
        moBoolTared.setValue(moRegistry.isTared());
        moIntTicket.setValue(moRegistry.getNumber());
        moKeyProducer.setValue(new int[] { moRegistry.getFkProducerId() });
        itemStateKeyProducer();
        moKeyItem.setValue(new int[] { moRegistry.getFkItemId() });
        itemStateKeyItem();
        
        if (moRegistry.getFkInputSourceId() == SModSysConsts.SU_INP_SRC_NA) {
            moKeyInputSource.resetField();
        }
        else {
            moKeyInputSource.setValue(new int[] { moRegistry.getFkInputSourceId() });
        }
        
        moTextPlates.setValue(moRegistry.getPlate());
        moTextPlatesCage.setValue(moRegistry.getPlateCage());
        moTextDriver.setValue(moRegistry.getDriver());
        moDecWeightSource.setValue(moRegistry.getWeightSource());
        moBoolWeightSourceAvailable.setValue(moRegistry.isWeightSourceAvailable());
        moDecWeightDestinyArrival.setValue(moRegistry.getWeightDestinyArrival());
        moDecWeightDestinyDeparture.setValue(moRegistry.getWeightDestinyDeparture());
        moDatetimeArrival.setValue(moRegistry.getDatetimeArrival());
        moDatetimeDeparture.setValue(moRegistry.getDatetimeDeparture());
        moTextOpeArr.setValue(moRegistry.getScaleOperatorArrival());
        moTextOpeDep.setValue(moRegistry.getScaleOperatorDeparture());
        moDecPackingFullQuantityArrival.setValue(moRegistry.getPackingFullQuantityArrival());
        moDecPackingEmptyQuantityArrival.setValue(moRegistry.getPackingEmptyQuantityArrival());
        moDecPackingFullQuantityDeparture.setValue(moRegistry.getPackingFullQuantityDeparture());
        moDecPackingEmptyQuantityDeparture.setValue(moRegistry.getPackingEmptyQuantityDeparture());
        moTextNote.setValue("");

        moTextScale.setValue(moRegistry.getXtaScaleName());
        mbIsRevImport1 = moRegistry.isRevueltaImport1();
        mbIsRevImport2 = moRegistry.isRevueltaImport2();

        setFormEditable(true);

        if (moRegistry.isRegistryNew()) {
            if (moKeyScale.getItemCount() == 2) {
                moKeyScale.setSelectedIndex(1);
                moKeyScale.setEnabled(false);
            }
            moBoolWeightSourceAvailable.setValue(true);

            moTextScale.setVisible(false);
            moTextScale.setEditable(false);
        }
        else {
            moKeyScale.setVisible(false);
            moKeyScale.setEnabled(false);
            moTextScale.setVisible(true);
            moTextScale.setEditable(false);
        }

        moKeyInputSource.setEnabled(moKeyInputSource.getItemCount() > 1);
        moDecWeightAverage.setEditable(false);

        itemStateWeightSourceAvailable();
        computeWeightAverage();

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbTicketAlternative registry = moRegistry.clone();

        if (registry.isRegistryNew()) {
            // nothing to do by now
        }

        getSeasonRegion();

        registry.setNumber(moIntTicket.getValue());
        registry.setDate(moDatetimeArrival.getValue());
        //registry.setQuantity(...); // seemingly unused
        registry.setPlate(moTextPlates.getValue());
        registry.setPlateCage(moTextPlatesCage.getValue());
        registry.setDriver(moTextDriver.getValue());
        registry.setDatetimeArrival(moDatetimeArrival.getValue());
        registry.setDatetimeDeparture(moRegistry.isRegistryNew() ? moDatetimeArrival.getValue() : moDatetimeDeparture.getValue());
        
        registry.setPackingFullQuantityArrival(moDecPackingFullQuantityArrival.getValue());
        registry.setPackingEmptyQuantityArrival(moDecPackingEmptyQuantityArrival.getValue());
        
        registry.setWeightSource(moDecWeightSource.getValue());
        registry.setWeightDestinyArrival(moDecWeightDestinyArrival.getValue());
        registry.setScaleOperatorArrival(moTextOpeArr.getValue());
        registry.setScaleOperatorDeparture(moTextOpeDep.getValue());
        
        boolean tared = mnFormSubtype == SModConsts.SX_TIC_TARE_PEND || moRegistry.isTared();
        
        if (tared) {
            registry.setPackingFullQuantityDeparture(moDecPackingFullQuantityDeparture.getValue());
            registry.setPackingEmptyQuantityDeparture(moDecPackingEmptyQuantityDeparture.getValue());
            
            registry.setWeightDestinyDeparture(moDecWeightDestinyDeparture.getValue());
        }
        else {
            registry.setPackingFullQuantityDeparture(0);
            registry.setPackingEmptyQuantityDeparture(0);
            
            registry.setWeightDestinyDeparture(0);
        }
        
        //registry.setWeightDestinyGross_r(...);
        //registry.setWeightDestinyNet_r(...);
        //registry.setSystemPenaltyPercentage(...);
        //registry.setSystemWeightPayment(...);
        //registry.setSystemPricePerTon(...);
        //registry.setSystemPayment_r(...);
        //registry.setSystemFreight(...);
        //registry.setSystemTotal_r(...);
        //registry.setUserPenaltyPercentage(...);
        //registry.setUserWeightPayment(...);
        //registry.setUserPricePerTon(...);
        //registry.setUserPayment_r(...);
        //registry.setUserFreight(...);
        //registry.setUserTotal_r(...);
        //registry.setDpsSupplyDate_n(...);
        registry.setRevueltaImport1(mbIsRevImport1);
        registry.setRevueltaImport2(mbIsRevImport2);
        registry.setWeightSourceAvailable(moBoolWeightSourceAvailable.getValue());
        registry.setMfgOutsourcing(false);
        registry.setTared(tared);
        registry.setPayed(false);
        registry.setAssorted(false);
        registry.setPacking(mbIsPacking);
        registry.setLaboratory(mbIsLaboratory);
        registry.setDpsSupply(false);
        //registry.setDeleted(...);
        //registry.setSystem(...);
        registry.setFkScaleId(moKeyScale.isVisible() ? moKeyScale.getValue()[0] : registry.getFkScaleId());
        registry.setFkTicketStatusId(registry.isRegistryNew() ? SModSysConsts.SS_TIC_ST_SCA : registry.getFkTicketStatusId());
        registry.setFkSeasonId_n(mnSeasonId);
        registry.setFkRegionId_n(mnRegionId);
        registry.setFkItemId(moKeyItem.getValue()[0]);
        registry.setFkUnitId(moKeyItem.getSelectedItem().getForeignKey()[0]);
        registry.setFkProducerId(moKeyProducer.getValue()[0]);
        registry.setFkInputSourceId(!moKeyInputSource.isEnabled() ? SModSysConsts.SU_INP_SRC_NA : moKeyInputSource.getValue()[0]);
        registry.setFkLaboratoryId_n(registry.isRegistryNew() ? 0 : registry.getFkLaboratoryId_n());
        //registry.setFkExternalDpsYearId_n(...);
        //registry.setFkExternalDpsDocId_n(...);
        //registry.setFkExternalDpsEntryId_n(...);
        //registry.setFkUserTaredId(miClient.getSession().getUser().getPkUserId());
        //registry.setFkUserPayedId(...);
        //registry.setFkUserAssortedId(...);
        
        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid()) {
            if (!SGuiClientUtils.isPeriodOpened(miClient.getSession(), moDatetimeArrival.getValue())) {
                validation.setMessage("El período está cerrado.");
                validation.setComponent(((JSpinner.DefaultEditor) moDatetimeArrival.getComponent().getEditor()).getTextField());
            }
            else {
                if (mnFormSubtype == SModConsts.SX_TIC_TARE_PEND) {
                    if (moKeyInputSource.getItemCount() > 1 && moKeyInputSource.getSelectedIndex() <= 0) {
                        validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + moKeyInputSource.getFieldName() + "'." +
                                (moKeyInputSource.isEnabled() ? "" : "Favor de modificar este registro desde la vista 'Boletos báscula'."));
                        if (moKeyInputSource.isEnabled()) {
                            validation.setComponent(moKeyInputSource);
                        }
                    }
                    
                    if (validation.isValid() && !mbIsRevImport2) {
                        validation = SGuiUtils.validateDateRange(moDatetimeArrival, moDatetimeDeparture);
                        if (!validation.isValid()) {
                            if (moDatetimeArrival.isEditable()) {
                                validation.setComponent(((JSpinner.DefaultEditor) moDatetimeArrival.getComponent().getEditor()).getTextField());
                            }
                            else if (moDatetimeDeparture.isEditable()) {
                                validation.setComponent(((JSpinner.DefaultEditor) moDatetimeDeparture.getComponent().getEditor()).getTextField());
                            }
                        }
                    }
                }

                if (validation.isValid()) {
                    if (moDecPackingFullQuantityArrival.isEditable() && moDecPackingFullQuantityArrival.getValue() == 0) {
                        if (miClient.showMsgBoxConfirm("No tiene valor el campo '" + SGuiUtils.getLabelName(jlPackingFullQuantityArrival.getText()) + "',\n" + SGuiConsts.MSG_CNF_CONT) != JOptionPane.YES_OPTION) {
                            validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlPackingFullQuantityArrival.getText()) + "'.");
                            validation.setComponent(moDecPackingFullQuantityArrival);
                        }
                    }
                    else if (moDecPackingFullQuantityDeparture.isEditable() && moDecPackingFullQuantityDeparture.getValue() == 0) {
                        if (miClient.showMsgBoxConfirm("No tiene valor el campo '" + SGuiUtils.getLabelName(jlPackingFullQuantityDeparture.getText()) + "',\n" + SGuiConsts.MSG_CNF_CONT) != JOptionPane.YES_OPTION) {
                            validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlPackingFullQuantityDeparture.getText()) + "'.");
                            validation.setComponent(moDecPackingFullQuantityDeparture);
                        }
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox && e.getStateChange() == ItemEvent.SELECTED) {
            JComboBox comboBox = (JComboBox)  e.getSource();

            if (comboBox == moKeyItem) {
                itemStateKeyItem();
            }
            else if (comboBox == moKeyProducer) {
                itemStateKeyProducer();
            }
        }
        else if (e.getSource() instanceof JCheckBox) {
            JCheckBox checkBox = (JCheckBox)  e.getSource();

            if (checkBox == moBoolWeightSourceAvailable) {
                itemStateWeightSourceAvailable();
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbInputSource) {
                actionInputSource();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {

    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == moDecWeightSource.getComponent() ||
                textField == moDecWeightDestinyArrival.getComponent() ||
                textField == moDecWeightDestinyDeparture.getComponent() ||
                textField == moDecPackingFullQuantityArrival.getComponent() ||
                textField == moDecPackingEmptyQuantityArrival.getComponent() ||
                textField == moDecPackingFullQuantityDeparture.getComponent() ||
                textField == moDecPackingEmptyQuantityDeparture.getComponent()) {

                computeWeightAverage();
            }
        }
    }
}
