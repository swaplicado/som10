/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package som.mod.som.form;

import java.awt.event.ActionListener;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;
import som.mod.som.data.SDailyStockUtils;

/**
 *
 * @author Edwin Carmona
 * 
 */
public class SDialogDailyStockReport extends SBeanFormDialog implements ActionListener {

    private SGuiClient miClient;

    private boolean mbFirstTime;
    
    /** Creates new form SDialogStockCardex
     * @param client */
    public SDialogDailyStockReport(SGuiClient client) {
        miClient = client;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpParams = new javax.swing.JPanel();
        jpControls = new javax.swing.JPanel();
        jbGenerate = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jlDateCutOff = new javax.swing.JLabel();
        moDateCutOff = new sa.lib.gui.bean.SBeanFieldDate();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Reporte de inventario diario");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpParams.setLayout(new java.awt.BorderLayout(5, 0));
        getContentPane().add(jpParams, java.awt.BorderLayout.NORTH);

        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbGenerate.setText("Generar");
        jbGenerate.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbGenerate);

        getContentPane().add(jpControls, java.awt.BorderLayout.SOUTH);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros"));
        jPanel4.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateCutOff.setText("Fecha de toma física:*");
        jlDateCutOff.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel12.add(jlDateCutOff);
        jPanel12.add(moDateCutOff);

        jPanel4.add(jPanel12);

        getContentPane().add(jPanel4, java.awt.BorderLayout.CENTER);
        jPanel4.getAccessibleContext().setAccessibleName("Reporte de inventario diario");

        setSize(new java.awt.Dimension(336, 239));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        SGuiUtils.setWindowBounds(this, 320, 200);

        moDateCutOff.setDateSettings(miClient, jlDateCutOff.getText(), true);
        moDateCutOff.setValue(miClient.getSession().getWorkingDate());
        moFields.addField(moDateCutOff);

        jbGenerate.addActionListener(this);
    }

    @Override
    protected void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jbGenerate.requestFocus();
        }
    }

    /**
     * llama a la función de generar reporte, la cual genera un archivo en formato 
     * de Excel
     */
    public void actionGenerateReport() {
        SGuiValidation val = validateForm();
        if (! val.isValid()) {
            miClient.showMsgBoxError(val.getMessage());
            return;
        }
        
        try {
            if (SDailyStockUtils.generateReport(miClient.getSession(), moDateCutOff.getValue())) {
                miClient.showMsgBoxInformation("El reporte se ha generado correctamente.");
            }
            else {
                miClient.showMsgBoxError("El reporte no fue generado.");
            }
        }
        catch (Exception ex) {
            Logger.getLogger(SDialogDailyStockReport.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton jbGenerate;
    private javax.swing.JLabel jlDateCutOff;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpParams;
    private sa.lib.gui.bean.SBeanFieldDate moDateCutOff;
    // End of variables declaration//GEN-END:variables

    public void setFormParams() {
        
    }

    public void formReset() {
        mbFirstTime = true;
        
        moDateCutOff.setValue(new Date());
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbGenerate) {
                actionGenerateReport();
            }
        }
    }

    @Override
    public void addAllListeners() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void removeAllListeners() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void reloadCatalogues() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setRegistry(SDbRegistry sdr) throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid()) {
//            if (sBFOilPercentage.getValue() < 0 || sBFOilPercentage.getValue() > 100) {
//                validation.setMessage("De ingresar un valor entre 0 y 100");
//            }
        }
        
        return validation;
    }
}
