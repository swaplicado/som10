/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.db.SDbRegistryUser;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldDecimal;
import sa.lib.gui.bean.SBeanForm;
import som.gui.SGuiClientSessionCustom;
import som.mod.SModConsts;
import som.mod.som.db.SDbLaboratory;
import som.mod.som.db.SDbRegion;
import som.mod.som.db.SDbSeason;
import som.mod.som.db.SDbTicket;
import som.mod.som.db.SSomUtils;

/**
 *
 * @author Juan Barajas, Sergio Flores
 */
public class SFormTicketMgmt extends SBeanForm implements ActionListener, ItemListener, FocusListener {

    private SDbTicket moRegistry;
    private Vector<SDbLaboratory> moChildLaboratories;

    protected double mdUserPenaltyPercentage;
    protected double mdUserWeightPayment;
    protected double mdUserPayment_r;
    protected double mdUserTotal_r;

    protected int mnProducerId;
    protected int mnSeasonId;
    protected int mnRegionId;

    /**
     * Creates new form SFormTicketManagement
     */
    public SFormTicketMgmt(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.SX_TIC_MAN, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jlScale = new javax.swing.JLabel();
        moTextScaleName = new sa.lib.gui.bean.SBeanFieldText();
        moTextScaleCode = new sa.lib.gui.bean.SBeanFieldText();
        jPanel7 = new javax.swing.JPanel();
        jlPlates = new javax.swing.JLabel();
        moTextPlates = new sa.lib.gui.bean.SBeanFieldText();
        jPanel4 = new javax.swing.JPanel();
        jlTicket = new javax.swing.JLabel();
        moTextTicket = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel14 = new javax.swing.JPanel();
        jlPlatesCage = new javax.swing.JLabel();
        moTextPlatesCage = new sa.lib.gui.bean.SBeanFieldText();
        jPanel10 = new javax.swing.JPanel();
        jlProducer = new javax.swing.JLabel();
        moKeyProducer = new sa.lib.gui.bean.SBeanFieldKey();
        jbKeyProducer = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jlDriver = new javax.swing.JLabel();
        moTextDriver = new sa.lib.gui.bean.SBeanFieldText();
        jPanel12 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moTextItem = new sa.lib.gui.bean.SBeanFieldText();
        jpDummy1 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlSeason = new javax.swing.JLabel();
        moTextSeason = new sa.lib.gui.bean.SBeanFieldText();
        jpDummy2 = new javax.swing.JPanel();
        moBoolMfgOutsourcing = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel15 = new javax.swing.JPanel();
        jlRegion = new javax.swing.JLabel();
        moTextRegion = new sa.lib.gui.bean.SBeanFieldText();
        jpDummy3 = new javax.swing.JPanel();
        jPanel50 = new javax.swing.JPanel();
        jlTicketOrigin = new javax.swing.JLabel();
        moKeyTicketOrigin = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel51 = new javax.swing.JPanel();
        jPanel52 = new javax.swing.JPanel();
        jlTicketDestination = new javax.swing.JLabel();
        moKeyTicketDestination = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel6 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jpManagement = new javax.swing.JPanel();
        jPanel40 = new javax.swing.JPanel();
        jlWeightSource = new javax.swing.JLabel();
        moDecWeightSource = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlUnitWeiSrc = new javax.swing.JLabel();
        jPanel41 = new javax.swing.JPanel();
        jlWeightDestiny = new javax.swing.JLabel();
        moDecWeightDestiny = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlUnitWeiDes = new javax.swing.JLabel();
        jPanel26 = new javax.swing.JPanel();
        jlUserPenalty = new javax.swing.JLabel();
        moDecUserPenalty = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel42 = new javax.swing.JPanel();
        jlWeightUser = new javax.swing.JLabel();
        moDecWeightPaymentUser = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlUnitWeiPayUsr = new javax.swing.JLabel();
        jPanel28 = new javax.swing.JPanel();
        jlUserPricePerTon = new javax.swing.JLabel();
        moDecUserPricePerTon = new sa.lib.gui.bean.SBeanFieldDecimal();
        moTextUserCurCodePrcTon = new sa.lib.gui.bean.SBeanFieldText();
        jPanel27 = new javax.swing.JPanel();
        jlUserPayment = new javax.swing.JLabel();
        moDecUserPayment = new sa.lib.gui.bean.SBeanFieldDecimal();
        moTextUserCurCodePay = new sa.lib.gui.bean.SBeanFieldText();
        jPanel30 = new javax.swing.JPanel();
        jlUserFreight = new javax.swing.JLabel();
        moDecUserFreight = new sa.lib.gui.bean.SBeanFieldDecimal();
        moTextUserCurCodeFreight = new sa.lib.gui.bean.SBeanFieldText();
        jPanel29 = new javax.swing.JPanel();
        jlUserTotal = new javax.swing.JLabel();
        moDecUserTotal = new sa.lib.gui.bean.SBeanFieldDecimal();
        moTextUserCurCodeTot = new sa.lib.gui.bean.SBeanFieldText();
        jPanel43 = new javax.swing.JPanel();
        jPanel44 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jpSystem = new javax.swing.JPanel();
        jPanel48 = new javax.swing.JPanel();
        jPanel49 = new javax.swing.JPanel();
        jPanel36 = new javax.swing.JPanel();
        jlSystemPenalty = new javax.swing.JLabel();
        moDecSystemPenalty = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel47 = new javax.swing.JPanel();
        jlWeightSystemPayment = new javax.swing.JLabel();
        moDecWeightSystemPayment = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlUnitWeiPaySys = new javax.swing.JLabel();
        jPanel37 = new javax.swing.JPanel();
        jlSystemPricePerTon = new javax.swing.JLabel();
        moDecSystemPricePerTon = new sa.lib.gui.bean.SBeanFieldDecimal();
        moTextSysCurCodePrcTon = new sa.lib.gui.bean.SBeanFieldText();
        jPanel35 = new javax.swing.JPanel();
        jlSystemPayment = new javax.swing.JLabel();
        moDecSystemPayment = new sa.lib.gui.bean.SBeanFieldDecimal();
        moTextSysCurCodePay = new sa.lib.gui.bean.SBeanFieldText();
        jPanel38 = new javax.swing.JPanel();
        jlSystemFreight = new javax.swing.JLabel();
        moDecSystemFreight = new sa.lib.gui.bean.SBeanFieldDecimal();
        moTextSysCurCodeFreight = new sa.lib.gui.bean.SBeanFieldText();
        jPanel39 = new javax.swing.JPanel();
        jlSystemTotal = new javax.swing.JLabel();
        moDecSystemTotal = new sa.lib.gui.bean.SBeanFieldDecimal();
        moTextSysCurCodeTot = new sa.lib.gui.bean.SBeanFieldText();
        jPanel45 = new javax.swing.JPanel();
        jPanel46 = new javax.swing.JPanel();
        jpLaboratory = new javax.swing.JPanel();
        jPanel33 = new javax.swing.JPanel();
        jPanel31 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jlImpuritiesPercentage = new javax.swing.JLabel();
        moDecImpuritiesPercentage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel18 = new javax.swing.JPanel();
        jlMoisturePercentage = new javax.swing.JLabel();
        moDecMoisturePercentage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel17 = new javax.swing.JPanel();
        jlDensity = new javax.swing.JLabel();
        moDecDensity = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel19 = new javax.swing.JPanel();
        jlRefractionIndex = new javax.swing.JLabel();
        moDecRefractionIndex = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel20 = new javax.swing.JPanel();
        jlIodineValue = new javax.swing.JLabel();
        moDecIodineValue = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel34 = new javax.swing.JPanel();
        jPanel32 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        jlLinoleicAcidPercentage = new javax.swing.JLabel();
        moDecLinoleicAcidPercentage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel24 = new javax.swing.JPanel();
        jlOleicAcidPercentage = new javax.swing.JLabel();
        moDecOleicAcidPercentage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel23 = new javax.swing.JPanel();
        jlErucicAcidPercentage = new javax.swing.JLabel();
        moDecErucicAcidPercentage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel22 = new javax.swing.JPanel();
        jlProteinPercentage = new javax.swing.JLabel();
        moDecProteinPercentage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel21 = new javax.swing.JPanel();
        jlOilContentPercentage = new javax.swing.JLabel();
        moDecOilContentPercentage = new sa.lib.gui.bean.SBeanFieldDecimal();

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del boleto:"));
        jPanel2.setLayout(new java.awt.GridLayout(8, 2, 0, 5));

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlScale.setText("Báscula:");
        jlScale.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlScale);

        moTextScaleName.setEditable(false);
        moTextScaleName.setText("sBeanFieldText2");
        moTextScaleName.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel13.add(moTextScaleName);

        moTextScaleCode.setEditable(false);
        moTextScaleCode.setText("sBeanFieldText1");
        moTextScaleCode.setPreferredSize(new java.awt.Dimension(45, 23));
        jPanel13.add(moTextScaleCode);

        jPanel2.add(jPanel13);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPlates.setText("Placas:");
        jlPlates.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlPlates);

        moTextPlates.setEditable(false);
        moTextPlates.setText("sBeanFieldText2");
        jPanel7.add(moTextPlates);

        jPanel2.add(jPanel7);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTicket.setText("Boleto:");
        jlTicket.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlTicket);

        moTextTicket.setEditable(false);
        jPanel4.add(moTextTicket);

        jPanel2.add(jPanel4);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPlatesCage.setText("Placas caja:");
        jlPlatesCage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlPlatesCage);

        moTextPlatesCage.setEditable(false);
        moTextPlatesCage.setText("sBeanFieldText2");
        jPanel14.add(moTextPlatesCage);

        jPanel2.add(jPanel14);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProducer.setText("Proveedor:");
        jlProducer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlProducer);

        moKeyProducer.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel10.add(moKeyProducer);

        jbKeyProducer.setText("<");
        jbKeyProducer.setToolTipText("Modificar proveedor");
        jbKeyProducer.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jbKeyProducer.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbKeyProducer);

        jPanel2.add(jPanel10);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDriver.setText("Chofer:");
        jlDriver.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlDriver);

        moTextDriver.setEditable(false);
        moTextDriver.setText("sBeanFieldText2");
        moTextDriver.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel3.add(moTextDriver);

        jPanel2.add(jPanel3);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Ítem:");
        jlItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlItem);

        moTextItem.setEditable(false);
        moTextItem.setText("sBeanFieldText2");
        moTextItem.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel12.add(moTextItem);

        jPanel2.add(jPanel12);
        jPanel2.add(jpDummy1);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSeason.setText("Temporada:");
        jlSeason.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlSeason);

        moTextSeason.setEditable(false);
        moTextSeason.setText("sBeanFieldText2");
        moTextSeason.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel8.add(moTextSeason);

        jPanel2.add(jPanel8);

        jpDummy2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolMfgOutsourcing.setText("Es maquila");
        jpDummy2.add(moBoolMfgOutsourcing);

        jPanel2.add(jpDummy2);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRegion.setText("Región:");
        jlRegion.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlRegion);

        moTextRegion.setEditable(false);
        moTextRegion.setText("sBeanFieldText2");
        moTextRegion.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel15.add(moTextRegion);

        jPanel2.add(jPanel15);
        jPanel2.add(jpDummy3);

        jPanel50.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTicketOrigin.setText("Procedencia:");
        jlTicketOrigin.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel50.add(jlTicketOrigin);

        moKeyTicketOrigin.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel50.add(moKeyTicketOrigin);

        jPanel2.add(jPanel50);

        jPanel51.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel2.add(jPanel51);

        jPanel52.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTicketDestination.setText("Destino:");
        jlTicketDestination.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel52.add(jlTicketDestination);

        moKeyTicketDestination.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel52.add(moKeyTicketDestination);

        jPanel2.add(jPanel52);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel6.setLayout(new java.awt.BorderLayout());

        jPanel9.setLayout(new java.awt.BorderLayout());

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Valores del usuario:"));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jpManagement.setLayout(new java.awt.GridLayout(10, 1, 0, 5));

        jPanel40.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeightSource.setText("Peso carga origen:");
        jlWeightSource.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel40.add(jlWeightSource);

        moDecWeightSource.setEditable(false);
        jPanel40.add(moDecWeightSource);

        jlUnitWeiSrc.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel40.add(jlUnitWeiSrc);

        jpManagement.add(jPanel40);

        jPanel41.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeightDestiny.setText("Peso carga destino:");
        jlWeightDestiny.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel41.add(jlWeightDestiny);

        moDecWeightDestiny.setEditable(false);
        jPanel41.add(moDecWeightDestiny);

        jlUnitWeiDes.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel41.add(jlUnitWeiDes);

        jpManagement.add(jPanel41);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUserPenalty.setText("Castigo:");
        jlUserPenalty.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel26.add(jlUserPenalty);

        moDecUserPenalty.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                moDecUserPenaltyFocusLost(evt);
            }
        });
        jPanel26.add(moDecUserPenalty);

        jpManagement.add(jPanel26);

        jPanel42.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeightUser.setText("Peso pago:");
        jlWeightUser.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel42.add(jlWeightUser);

        moDecWeightPaymentUser.setEditable(false);
        jPanel42.add(moDecWeightPaymentUser);

        jlUnitWeiPayUsr.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel42.add(jlUnitWeiPayUsr);

        jpManagement.add(jPanel42);

        jPanel28.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUserPricePerTon.setText("Precio tonelada:");
        jlUserPricePerTon.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel28.add(jlUserPricePerTon);

        moDecUserPricePerTon.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                moDecUserPricePerTonFocusLost(evt);
            }
        });
        jPanel28.add(moDecUserPricePerTon);

        moTextUserCurCodePrcTon.setEditable(false);
        moTextUserCurCodePrcTon.setText("sBeanFieldText1");
        moTextUserCurCodePrcTon.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel28.add(moTextUserCurCodePrcTon);

        jpManagement.add(jPanel28);

        jPanel27.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUserPayment.setText("Pago:");
        jlUserPayment.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel27.add(jlUserPayment);

        moDecUserPayment.setEditable(false);
        jPanel27.add(moDecUserPayment);

        moTextUserCurCodePay.setEditable(false);
        moTextUserCurCodePay.setText("sBeanFieldText1");
        moTextUserCurCodePay.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel27.add(moTextUserCurCodePay);

        jpManagement.add(jPanel27);

        jPanel30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUserFreight.setText("Precio flete:");
        jlUserFreight.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel30.add(jlUserFreight);

        moDecUserFreight.setEditable(false);
        jPanel30.add(moDecUserFreight);

        moTextUserCurCodeFreight.setEditable(false);
        moTextUserCurCodeFreight.setText("sBeanFieldText1");
        moTextUserCurCodeFreight.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel30.add(moTextUserCurCodeFreight);

        jpManagement.add(jPanel30);

        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUserTotal.setText("Total:");
        jlUserTotal.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel29.add(jlUserTotal);

        moDecUserTotal.setEditable(false);
        jPanel29.add(moDecUserTotal);

        moTextUserCurCodeTot.setEditable(false);
        moTextUserCurCodeTot.setText("sBeanFieldText1");
        moTextUserCurCodeTot.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel29.add(moTextUserCurCodeTot);

        jpManagement.add(jPanel29);

        jPanel43.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jpManagement.add(jPanel43);

        jPanel44.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jpManagement.add(jPanel44);

        jPanel5.add(jpManagement, java.awt.BorderLayout.NORTH);

        jPanel9.add(jPanel5, java.awt.BorderLayout.WEST);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Valores del sistema:"));
        jPanel11.setLayout(new java.awt.BorderLayout());

        jpSystem.setLayout(new java.awt.GridLayout(10, 1, 0, 5));

        jPanel48.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jpSystem.add(jPanel48);

        jPanel49.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jpSystem.add(jPanel49);

        jPanel36.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSystemPenalty.setText("Castigo:");
        jlSystemPenalty.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel36.add(jlSystemPenalty);

        moDecSystemPenalty.setEditable(false);
        jPanel36.add(moDecSystemPenalty);

        jpSystem.add(jPanel36);

        jPanel47.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeightSystemPayment.setText("Peso pago:");
        jlWeightSystemPayment.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel47.add(jlWeightSystemPayment);

        moDecWeightSystemPayment.setEditable(false);
        jPanel47.add(moDecWeightSystemPayment);

        jlUnitWeiPaySys.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel47.add(jlUnitWeiPaySys);

        jpSystem.add(jPanel47);

        jPanel37.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSystemPricePerTon.setText("Precio tonelada:");
        jlSystemPricePerTon.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel37.add(jlSystemPricePerTon);

        moDecSystemPricePerTon.setEditable(false);
        jPanel37.add(moDecSystemPricePerTon);

        moTextSysCurCodePrcTon.setEditable(false);
        moTextSysCurCodePrcTon.setText("sBeanFieldText1");
        moTextSysCurCodePrcTon.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel37.add(moTextSysCurCodePrcTon);

        jpSystem.add(jPanel37);

        jPanel35.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSystemPayment.setText("Pago:");
        jlSystemPayment.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel35.add(jlSystemPayment);

        moDecSystemPayment.setEditable(false);
        jPanel35.add(moDecSystemPayment);

        moTextSysCurCodePay.setEditable(false);
        moTextSysCurCodePay.setText("sBeanFieldText1");
        moTextSysCurCodePay.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel35.add(moTextSysCurCodePay);

        jpSystem.add(jPanel35);

        jPanel38.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSystemFreight.setText("Precio flete:");
        jlSystemFreight.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel38.add(jlSystemFreight);

        moDecSystemFreight.setEditable(false);
        jPanel38.add(moDecSystemFreight);

        moTextSysCurCodeFreight.setEditable(false);
        moTextSysCurCodeFreight.setText("sBeanFieldText1");
        moTextSysCurCodeFreight.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel38.add(moTextSysCurCodeFreight);

        jpSystem.add(jPanel38);

        jPanel39.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSystemTotal.setText("Total:");
        jlSystemTotal.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel39.add(jlSystemTotal);

        moDecSystemTotal.setEditable(false);
        jPanel39.add(moDecSystemTotal);

        moTextSysCurCodeTot.setEditable(false);
        moTextSysCurCodeTot.setText("sBeanFieldText1");
        moTextSysCurCodeTot.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel39.add(moTextSysCurCodeTot);

        jpSystem.add(jPanel39);

        jPanel45.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jpSystem.add(jPanel45);

        jPanel46.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jpSystem.add(jPanel46);

        jPanel11.add(jpSystem, java.awt.BorderLayout.NORTH);

        jPanel9.add(jPanel11, java.awt.BorderLayout.EAST);

        jPanel6.add(jPanel9, java.awt.BorderLayout.WEST);

        jpLaboratory.setBorder(javax.swing.BorderFactory.createTitledBorder("Análisis de laboratorio:"));
        jpLaboratory.setLayout(new java.awt.BorderLayout());

        jPanel33.setLayout(new java.awt.BorderLayout());

        jPanel31.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlImpuritiesPercentage.setText("Impurezas:");
        jlImpuritiesPercentage.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel16.add(jlImpuritiesPercentage);

        moDecImpuritiesPercentage.setEditable(false);
        jPanel16.add(moDecImpuritiesPercentage);

        jPanel31.add(jPanel16);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMoisturePercentage.setText("Humedad:");
        jlMoisturePercentage.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel18.add(jlMoisturePercentage);

        moDecMoisturePercentage.setEditable(false);
        jPanel18.add(moDecMoisturePercentage);

        jPanel31.add(jPanel18);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDensity.setText("Densidad:");
        jlDensity.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel17.add(jlDensity);

        moDecDensity.setEditable(false);
        jPanel17.add(moDecDensity);

        jPanel31.add(jPanel17);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRefractionIndex.setText("Índice refracción (IR):");
        jlRefractionIndex.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel19.add(jlRefractionIndex);

        moDecRefractionIndex.setEditable(false);
        jPanel19.add(moDecRefractionIndex);

        jPanel31.add(jPanel19);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlIodineValue.setText("Valor yodo (VI):");
        jlIodineValue.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel20.add(jlIodineValue);

        moDecIodineValue.setEditable(false);
        jPanel20.add(moDecIodineValue);

        jPanel31.add(jPanel20);

        jPanel33.add(jPanel31, java.awt.BorderLayout.NORTH);

        jpLaboratory.add(jPanel33, java.awt.BorderLayout.WEST);

        jPanel34.setLayout(new java.awt.BorderLayout());

        jPanel32.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLinoleicAcidPercentage.setText("Ácido linoleico:");
        jlLinoleicAcidPercentage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel25.add(jlLinoleicAcidPercentage);

        moDecLinoleicAcidPercentage.setEditable(false);
        jPanel25.add(moDecLinoleicAcidPercentage);

        jPanel32.add(jPanel25);

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlOleicAcidPercentage.setText("Ácido oleico:");
        jlOleicAcidPercentage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel24.add(jlOleicAcidPercentage);

        moDecOleicAcidPercentage.setEditable(false);
        jPanel24.add(moDecOleicAcidPercentage);

        jPanel32.add(jPanel24);

        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlErucicAcidPercentage.setText("Ácido erúcico:");
        jlErucicAcidPercentage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel23.add(jlErucicAcidPercentage);

        moDecErucicAcidPercentage.setEditable(false);
        jPanel23.add(moDecErucicAcidPercentage);

        jPanel32.add(jPanel23);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProteinPercentage.setText("Proteína:");
        jlProteinPercentage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel22.add(jlProteinPercentage);

        moDecProteinPercentage.setEditable(false);
        jPanel22.add(moDecProteinPercentage);

        jPanel32.add(jPanel22);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlOilContentPercentage.setText("Aceite:");
        jlOilContentPercentage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel21.add(jlOilContentPercentage);

        moDecOilContentPercentage.setEditable(false);
        jPanel21.add(moDecOilContentPercentage);

        jPanel32.add(jPanel21);

        jPanel34.add(jPanel32, java.awt.BorderLayout.NORTH);

        jpLaboratory.add(jPanel34, java.awt.BorderLayout.CENTER);

        jPanel6.add(jpLaboratory, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel6, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void moDecUserPenaltyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_moDecUserPenaltyFocusLost
        calculateUsersValues(moRegistry);
    }//GEN-LAST:event_moDecUserPenaltyFocusLost

    private void moDecUserPricePerTonFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_moDecUserPricePerTonFocusLost
        calculateUsersValues(moRegistry);
    }//GEN-LAST:event_moDecUserPricePerTonFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel45;
    private javax.swing.JPanel jPanel46;
    private javax.swing.JPanel jPanel47;
    private javax.swing.JPanel jPanel48;
    private javax.swing.JPanel jPanel49;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel50;
    private javax.swing.JPanel jPanel51;
    private javax.swing.JPanel jPanel52;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbKeyProducer;
    private javax.swing.JLabel jlDensity;
    private javax.swing.JLabel jlDriver;
    private javax.swing.JLabel jlErucicAcidPercentage;
    private javax.swing.JLabel jlImpuritiesPercentage;
    private javax.swing.JLabel jlIodineValue;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlLinoleicAcidPercentage;
    private javax.swing.JLabel jlMoisturePercentage;
    private javax.swing.JLabel jlOilContentPercentage;
    private javax.swing.JLabel jlOleicAcidPercentage;
    private javax.swing.JLabel jlPlates;
    private javax.swing.JLabel jlPlatesCage;
    private javax.swing.JLabel jlProducer;
    private javax.swing.JLabel jlProteinPercentage;
    private javax.swing.JLabel jlRefractionIndex;
    private javax.swing.JLabel jlRegion;
    private javax.swing.JLabel jlScale;
    private javax.swing.JLabel jlSeason;
    private javax.swing.JLabel jlSystemFreight;
    private javax.swing.JLabel jlSystemPayment;
    private javax.swing.JLabel jlSystemPenalty;
    private javax.swing.JLabel jlSystemPricePerTon;
    private javax.swing.JLabel jlSystemTotal;
    private javax.swing.JLabel jlTicket;
    private javax.swing.JLabel jlTicketDestination;
    private javax.swing.JLabel jlTicketOrigin;
    private javax.swing.JLabel jlUnitWeiDes;
    private javax.swing.JLabel jlUnitWeiPaySys;
    private javax.swing.JLabel jlUnitWeiPayUsr;
    private javax.swing.JLabel jlUnitWeiSrc;
    private javax.swing.JLabel jlUserFreight;
    private javax.swing.JLabel jlUserPayment;
    private javax.swing.JLabel jlUserPenalty;
    private javax.swing.JLabel jlUserPricePerTon;
    private javax.swing.JLabel jlUserTotal;
    private javax.swing.JLabel jlWeightDestiny;
    private javax.swing.JLabel jlWeightSource;
    private javax.swing.JLabel jlWeightSystemPayment;
    private javax.swing.JLabel jlWeightUser;
    private javax.swing.JPanel jpDummy1;
    private javax.swing.JPanel jpDummy2;
    private javax.swing.JPanel jpDummy3;
    private javax.swing.JPanel jpLaboratory;
    private javax.swing.JPanel jpManagement;
    private javax.swing.JPanel jpSystem;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolMfgOutsourcing;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecDensity;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecErucicAcidPercentage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecImpuritiesPercentage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecIodineValue;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecLinoleicAcidPercentage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecMoisturePercentage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecOilContentPercentage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecOleicAcidPercentage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecProteinPercentage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecRefractionIndex;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecSystemFreight;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecSystemPayment;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecSystemPenalty;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecSystemPricePerTon;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecSystemTotal;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecUserFreight;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecUserPayment;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecUserPenalty;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecUserPricePerTon;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecUserTotal;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightDestiny;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightPaymentUser;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightSource;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightSystemPayment;
    private sa.lib.gui.bean.SBeanFieldKey moKeyProducer;
    private sa.lib.gui.bean.SBeanFieldKey moKeyTicketDestination;
    private sa.lib.gui.bean.SBeanFieldKey moKeyTicketOrigin;
    private sa.lib.gui.bean.SBeanFieldText moTextDriver;
    private sa.lib.gui.bean.SBeanFieldText moTextItem;
    private sa.lib.gui.bean.SBeanFieldText moTextPlates;
    private sa.lib.gui.bean.SBeanFieldText moTextPlatesCage;
    private sa.lib.gui.bean.SBeanFieldText moTextRegion;
    private sa.lib.gui.bean.SBeanFieldText moTextScaleCode;
    private sa.lib.gui.bean.SBeanFieldText moTextScaleName;
    private sa.lib.gui.bean.SBeanFieldText moTextSeason;
    private sa.lib.gui.bean.SBeanFieldText moTextSysCurCodeFreight;
    private sa.lib.gui.bean.SBeanFieldText moTextSysCurCodePay;
    private sa.lib.gui.bean.SBeanFieldText moTextSysCurCodePrcTon;
    private sa.lib.gui.bean.SBeanFieldText moTextSysCurCodeTot;
    private sa.lib.gui.bean.SBeanFieldInteger moTextTicket;
    private sa.lib.gui.bean.SBeanFieldText moTextUserCurCodeFreight;
    private sa.lib.gui.bean.SBeanFieldText moTextUserCurCodePay;
    private sa.lib.gui.bean.SBeanFieldText moTextUserCurCodePrcTon;
    private sa.lib.gui.bean.SBeanFieldText moTextUserCurCodeTot;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 1024, 640);

        moDecUserPenalty.setDecimalSettings(SGuiUtils.getLabelName(jlUserPenalty.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecUserPenalty.setDecimalFormat(SLibUtils.DecimalFormatPercentage2D);
        moDecUserPayment.setDecimalSettings(SGuiUtils.getLabelName(jlUserPayment.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moTextUserCurCodePay.setTextSettings(SGuiUtils.getLabelName(jlUserPayment.getText()), 3);
        moDecUserPricePerTon.setDecimalSettings(SGuiUtils.getLabelName(jlUserPricePerTon.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moTextUserCurCodePrcTon.setTextSettings(SGuiUtils.getLabelName(jlUserPricePerTon.getText()), 3);
        moDecUserFreight.setDecimalSettings(SGuiUtils.getLabelName(jlUserFreight.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moTextUserCurCodeFreight.setTextSettings(SGuiUtils.getLabelName(jlUserFreight.getText()), 3);
        moDecUserTotal.setDecimalSettings(SGuiUtils.getLabelName(jlUserTotal.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moTextUserCurCodeTot.setTextSettings(SGuiUtils.getLabelName(jlUserTotal.getText()), 3);
        moDecSystemPenalty.setDecimalSettings(SGuiUtils.getLabelName(jlUserPenalty.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecSystemPenalty.setDecimalFormat(SLibUtils.DecimalFormatPercentage2D);
        moDecSystemPayment.setDecimalSettings(SGuiUtils.getLabelName(jlSystemPayment.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moTextSysCurCodePay.setTextSettings(SGuiUtils.getLabelName(jlSystemPayment.getText()), 3);
        moDecSystemPricePerTon.setDecimalSettings(SGuiUtils.getLabelName(jlSystemPricePerTon.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moTextSysCurCodePrcTon.setTextSettings(SGuiUtils.getLabelName(jlSystemPricePerTon.getText()), 3);
        moDecSystemFreight.setDecimalSettings(SGuiUtils.getLabelName(jlSystemFreight.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moTextSysCurCodeFreight.setTextSettings(SGuiUtils.getLabelName(jlSystemFreight.getText()), 3);
        moDecSystemTotal.setDecimalSettings(SGuiUtils.getLabelName(jlSystemTotal.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moTextSysCurCodeTot.setTextSettings(SGuiUtils.getLabelName(jlSystemTotal.getText()), 3);
        moTextScaleName.setTextSettings(SGuiUtils.getLabelName(jlScale.getText()), 25);
        moTextScaleCode.setTextSettings(SGuiUtils.getLabelName(jlScale.getText()), 25);
        moTextTicket.setIntegerSettings(SGuiUtils.getLabelName(jlTicket.getText()), SGuiConsts.GUI_TYPE_INT_RAW, true);
        moTextItem.setTextSettings(SGuiUtils.getLabelName(jlItem.getText()), 25);
        moKeyProducer.setKeySettings(miClient, SGuiUtils.getLabelName(jlProducer.getText()), true);
        moTextSeason.setTextSettings(SGuiUtils.getLabelName(jlSeason.getText()), 25);
        moKeyTicketOrigin.setKeySettings(miClient, SGuiUtils.getLabelName(jlTicketOrigin.getText()), true);
        moKeyTicketDestination.setKeySettings(miClient, SGuiUtils.getLabelName(jlTicketDestination.getText()), true);
        moTextRegion.setTextSettings(SGuiUtils.getLabelName(jlRegion.getText()), 25);
        moTextPlates.setTextSettings(SGuiUtils.getLabelName(jlPlates.getText()), 25);
        moTextPlatesCage.setTextSettings(SGuiUtils.getLabelName(jlPlatesCage.getText()), 25);
        moTextDriver.setTextSettings(SGuiUtils.getLabelName(jlDriver.getText()), 150);
        moDecDensity.setDecimalSettings(SGuiUtils.getLabelName(jlDensity.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecIodineValue.setDecimalSettings(SGuiUtils.getLabelName(jlIodineValue.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecRefractionIndex.setDecimalSettings(SGuiUtils.getLabelName(jlRefractionIndex.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecImpuritiesPercentage.setDecimalSettings(SGuiUtils.getLabelName(jlImpuritiesPercentage.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecImpuritiesPercentage.setDecimalFormat(SLibUtils.DecimalFormatPercentage2D);
        moDecMoisturePercentage.setDecimalSettings(SGuiUtils.getLabelName(jlMoisturePercentage.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecMoisturePercentage.setDecimalFormat(SLibUtils.DecimalFormatPercentage2D);
        moDecProteinPercentage.setDecimalSettings(SGuiUtils.getLabelName(jlProteinPercentage.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecOilContentPercentage.setDecimalSettings(SGuiUtils.getLabelName(jlOilContentPercentage.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecOleicAcidPercentage.setDecimalSettings(SGuiUtils.getLabelName(jlOleicAcidPercentage.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecLinoleicAcidPercentage.setDecimalSettings(SGuiUtils.getLabelName(jlLinoleicAcidPercentage.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecErucicAcidPercentage.setDecimalSettings(SGuiUtils.getLabelName(jlErucicAcidPercentage.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);

        moDecWeightSource.setDecimalSettings(SGuiUtils.getLabelName(jlWeightSource.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecWeightDestiny.setDecimalSettings(SGuiUtils.getLabelName(jlWeightDestiny.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecWeightSystemPayment.setDecimalSettings(SGuiUtils.getLabelName(jlWeightSystemPayment.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecWeightPaymentUser.setDecimalSettings(SGuiUtils.getLabelName(jlWeightUser.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);

        moBoolMfgOutsourcing.setBooleanSettings(SGuiUtils.getLabelName(moBoolMfgOutsourcing.getText()), false);

        moFields.addField(moDecUserPenalty);
        moFields.addField(moDecUserPayment);
        moFields.addField(moTextUserCurCodePay);
        moFields.addField(moDecUserPricePerTon);
        moFields.addField(moTextUserCurCodePrcTon);
        moFields.addField(moDecUserFreight);
        moFields.addField(moTextUserCurCodeFreight);
        moFields.addField(moDecUserTotal);
        moFields.addField(moTextUserCurCodeTot);
        moFields.addField(moDecSystemPenalty);
        moFields.addField(moDecSystemPayment);
        moFields.addField(moTextSysCurCodePay);
        moFields.addField(moDecSystemPricePerTon);
        moFields.addField(moTextSysCurCodePrcTon);
        moFields.addField(moDecSystemFreight);
        moFields.addField(moTextSysCurCodeFreight);
        moFields.addField(moDecSystemTotal);
        moFields.addField(moTextSysCurCodeTot);
        moFields.addField(moTextScaleName);
        moFields.addField(moTextScaleCode);
        moFields.addField(moTextTicket);
        moFields.addField(moTextItem);
        moFields.addField(moKeyProducer);
        moFields.addField(moTextSeason);
        moFields.addField(moKeyTicketOrigin);
        moFields.addField(moKeyTicketDestination);
        moFields.addField(moTextRegion);
        moFields.addField(moTextPlates);
        moFields.addField(moTextPlatesCage);
        moFields.addField(moTextDriver);
        moFields.addField(moDecImpuritiesPercentage);
        moFields.addField(moDecDensity);
        moFields.addField(moDecMoisturePercentage);
        moFields.addField(moDecRefractionIndex);
        moFields.addField(moDecIodineValue);
        moFields.addField(moDecLinoleicAcidPercentage);
        moFields.addField(moDecOleicAcidPercentage);
        moFields.addField(moDecErucicAcidPercentage);
        moFields.addField(moDecProteinPercentage);
        moFields.addField(moDecOilContentPercentage);

        moFields.addField(moDecWeightSource);
        moFields.addField(moDecWeightDestiny);
        moFields.addField(moDecWeightSystemPayment);
        moFields.addField(moDecWeightPaymentUser);

        moFields.setFormButton(jbSave);

        /* XXX Cell renderers not implemented yet in XML
        mvFormGrids.add(moGridUserRights);
        mvFormGrids.add(moGridUserScales);
        */
    }

    private void computeUserPenalty(SBeanFieldDecimal fieldDecimal) {
        fieldDecimal.setValue(SLibUtils.round(fieldDecimal.getValue(), SLibUtils.DecimalFormatPercentage4D.getMaximumFractionDigits()));
    }

    private void getSeasonRegion() {
        mnSeasonId = 0;
        mnRegionId = 0;

        try {
            mnSeasonId = SSomUtils.getProperSeasonId(miClient.getSession(), moRegistry.getDatetimeArrival(), moRegistry.getFkItemId(), moKeyProducer.getValue()[0]);

            if (mnSeasonId != SLibConsts.UNDEFINED) {
                mnRegionId = SSomUtils.getProperRegionId(miClient.getSession(), mnSeasonId, moRegistry.getFkItemId(), moKeyProducer.getValue()[0]);
            }

            moTextSeason.setValue(mnSeasonId == SLibConsts.UNDEFINED ? "" : miClient.getSession().readField(SModConsts.SU_SEAS, new int[] { mnSeasonId }, SDbSeason.FIELD_NAME));
            moTextRegion.setValue(mnRegionId == SLibConsts.UNDEFINED ? "" : miClient.getSession().readField(SModConsts.SU_REG, new int[] { mnRegionId }, SDbRegion.FIELD_NAME));
        }
        catch (Exception e) {
             SLibUtils.showException(this, e);
        }
    }

    private void calculateUsersValues(SDbTicket scaleTicket) {
        mdUserPenaltyPercentage = 0;
        mdUserWeightPayment = 0;
        mdUserPayment_r = 0;
        mdUserTotal_r = 0;

        mdUserPenaltyPercentage = moDecUserPenalty.getValue();
        mdUserWeightPayment = SLibUtils.round((scaleTicket.getWeightSource() - scaleTicket.getWeightDestinyNet_r() * mdUserPenaltyPercentage), SLibUtils.DecimalFormatPercentage0D.getMaximumFractionDigits());
        mdUserPayment_r = (mdUserWeightPayment * moDecUserPricePerTon.getValue()) / 1000;
        mdUserTotal_r = mdUserPayment_r;

        setUserValues();
    }

    private void setUserValues() {
        moDecUserPayment.setValue(mdUserPayment_r);
        moDecWeightPaymentUser.setValue(mdUserWeightPayment);
        moDecUserTotal.setValue(mdUserTotal_r);
    }

    private void setTestLaboratoryAverage() {
        if (moChildLaboratories.size() > 0) {
            if (moChildLaboratories.get(0).getChildTests().size() > 0) {
                moDecImpuritiesPercentage.setValue(moChildLaboratories.get(0).getImpuritiesPercentageAverage());
                moDecDensity.setValue(moChildLaboratories.get(0).getDensityAverage());
                moDecMoisturePercentage.setValue(moChildLaboratories.get(0).getMoisturePercentageAverage());
                moDecRefractionIndex.setValue(moChildLaboratories.get(0).getRefractionIndexAverage());
                moDecIodineValue.setValue(moChildLaboratories.get(0).getIodineValueAverage());
                moDecLinoleicAcidPercentage.setValue(moChildLaboratories.get(0).getLinoleicAcidPercentageAverage());
                moDecOleicAcidPercentage.setValue(moChildLaboratories.get(0).getOleicAcidPercentageAverage());
                moDecErucicAcidPercentage.setValue(moChildLaboratories.get(0).getErucicAcidPercentageAverage());
                moDecProteinPercentage.setValue(moChildLaboratories.get(0).getProteinPercentageAverage());
                moDecOilContentPercentage.setValue(moChildLaboratories.get(0).getOilContentPercentageAverage());
            }
        }
        else {
            moDecImpuritiesPercentage.setValue(0d);
            moDecDensity.setValue(0d);
            moDecMoisturePercentage.setValue(0d);
            moDecRefractionIndex.setValue(0d);
            moDecIodineValue.setValue(0d);
            moDecLinoleicAcidPercentage.setValue(0d);
            moDecOleicAcidPercentage.setValue(0d);
            moDecErucicAcidPercentage.setValue(0d);
            moDecProteinPercentage.setValue(0d);
            moDecOilContentPercentage.setValue(0d);
        }
    }

    private void actionKeyProducer() {
        if (miClient.showMsgBoxConfirm("Esto modificará los valores del boleto.\n" + SGuiConsts.MSG_CNF_CONT) == JOptionPane.YES_OPTION) {
            jbKeyProducer.setEnabled(false);
            moKeyProducer.setEnabled(true);
            moKeyProducer.requestFocus();
        }
    }

    private void itemStateKeyProducer() {
        if (moKeyProducer.getSelectedIndex() <= 0) {
            moDecUserPenalty.setValue(0d);
            moDecWeightPaymentUser.setValue(0d);
            moDecUserPricePerTon.setValue(0d);
            moDecUserPayment.setValue(0d);
            moDecUserFreight.setValue(0d);
            moDecUserTotal.setValue(0d);
            moDecSystemPenalty.setValue(0d);
            moDecWeightSystemPayment.setValue(0d);
            moDecSystemPricePerTon.setValue(0d);
            moDecSystemPayment.setValue(0d);
            moDecSystemFreight.setValue(0d);
            moDecSystemTotal.setValue(0d);
        }
        else {
            getSeasonRegion();
            moRegistry.setFkSeasonId_n(mnSeasonId);
            moRegistry.setFkRegionId_n(mnRegionId);
            moRegistry.setFkProducerId(moKeyProducer.getValue()[0]);
            moRegistry.computePrice(miClient.getSession());

            // set values of ticket

            moDecUserPenalty.setValue(moRegistry.getUserPenaltyPercentage());
            moDecWeightPaymentUser.setValue(moRegistry.getUserWeightPayment());
            moDecUserPricePerTon.setValue(moRegistry.getUserPricePerTon());
            moDecUserPayment.setValue(moRegistry.getUserPayment_r());
            moDecUserFreight.setValue(moRegistry.getUserFreight());
            moDecUserTotal.setValue(moRegistry.getUserTotal_r());
            moDecSystemPenalty.setValue(moRegistry.getSystemPenaltyPercentage());
            moDecWeightSystemPayment.setValue(moRegistry.getSystemWeightPayment());
            moDecSystemPricePerTon.setValue(moRegistry.getSystemPricePerTon());
            moDecSystemPayment.setValue(moRegistry.getSystemPayment_r());
            moDecSystemFreight.setValue(moRegistry.getSystemFreight());
            moDecSystemTotal.setValue(moRegistry.getSystemTotal_r());
        }
    }

    @Override
    public void addAllListeners() {
        jbKeyProducer.addActionListener(this);
        moKeyProducer.addItemListener(this);
        moDecUserPenalty.addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbKeyProducer.removeActionListener(this);
        moKeyProducer.removeItemListener(this);
        moDecUserPenalty.removeFocusListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyProducer, SModConsts.SU_PROD, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyTicketOrigin, SModConsts.SU_TIC_ORIG, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyTicketDestination, SModConsts.SU_TIC_DEST, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        String localCurrencyCode = "";
        String unit = "";
        moRegistry = (SDbTicket) registry;
        moChildLaboratories = moRegistry.getChildLaboratories();

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }
        localCurrencyCode = ((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getLocalCurrencyCode();
        unit = miClient.getSession().readField(SModConsts.SU_UNIT, new int[] { moRegistry.getFkUnitId() }, SDbRegistryUser.FIELD_CODE) + "";

        moDecUserPenalty.setValue(moRegistry.getUserPenaltyPercentage());
        moDecUserPayment.setValue(moRegistry.getUserPayment_r());
        moTextUserCurCodePay.setValue(localCurrencyCode);
        moDecUserPricePerTon.setValue(moRegistry.getUserPricePerTon());
        moTextUserCurCodePrcTon.setValue(localCurrencyCode);
        moDecUserFreight.setValue(moRegistry.getUserFreight());
        moTextUserCurCodeFreight.setValue(localCurrencyCode);
        moDecUserTotal.setValue(moRegistry.getUserTotal_r());
        moTextUserCurCodeTot.setValue(localCurrencyCode);
        moDecSystemPenalty.setValue(moRegistry.getSystemPenaltyPercentage());
        moDecSystemPayment.setValue(moRegistry.getSystemPayment_r());
        moTextSysCurCodePay.setValue(localCurrencyCode);
        moDecSystemPricePerTon.setValue(moRegistry.getSystemPricePerTon());
        moTextSysCurCodePrcTon.setValue(localCurrencyCode);
        moDecSystemFreight.setValue(moRegistry.getSystemFreight());
        moTextSysCurCodeFreight.setValue(localCurrencyCode);
        moDecSystemTotal.setValue(moRegistry.getSystemTotal_r());
        moTextSysCurCodeTot.setValue(localCurrencyCode);
        moTextScaleName.setValue(moRegistry.getXtaScaleName());
        moTextScaleCode.setValue(moRegistry.getXtaScaleCode());
        moTextTicket.setValue(moRegistry.getNumber());
        moTextPlates.setValue(moRegistry.getPlate());
        moTextPlatesCage.setValue(moRegistry.getPlateCage());
        moTextDriver.setValue(moRegistry.getDriver());
        moTextItem.setValue(moRegistry.getXtaItem());
        moTextSeason.setValue(moRegistry.getXtaSeason());
        moTextRegion.setValue(moRegistry.getXtaRegion());
        moKeyProducer.setValue(new int[] { mnProducerId = moRegistry.getFkProducerId() });
        moKeyTicketOrigin.setValue(new int[] { moRegistry.getFkTicketOriginId() });
        moKeyTicketDestination.setValue(new int[] { moRegistry.getFkTicketDestinationId()});

        jlUnitWeiSrc.setText(unit);
        jlUnitWeiDes.setText(unit);
        jlUnitWeiPaySys.setText(unit);
        jlUnitWeiPayUsr.setText(unit);

        moDecWeightSource.setValue(moRegistry.getWeightSource());
        moDecWeightDestiny.setValue(moRegistry.getWeightDestinyNet_r());
        moDecWeightSystemPayment.setValue(moRegistry.getSystemWeightPayment());
        moDecWeightPaymentUser.setValue(moRegistry.getUserWeightPayment());

        moBoolMfgOutsourcing.setValue(moRegistry.isMfgOutsourcing());

        setTestLaboratoryAverage();

        setFormEditable(true);

        moKeyProducer.setEnabled(false);
        jbKeyProducer.setEnabled(true);
        
        moKeyTicketOrigin.setEnabled(false);
        moKeyTicketDestination.setEnabled(false);

        moDecUserPayment.setEditable(false);
        moTextUserCurCodePay.setEditable(false);
        moTextUserCurCodePrcTon.setEditable(false);
        moDecUserFreight.setEditable(false);
        moTextUserCurCodeFreight.setEditable(false);
        moDecUserTotal.setEditable(false);
        moTextUserCurCodeTot.setEditable(false);
        moDecSystemPayment.setEditable(false);
        moTextSysCurCodePay.setEditable(false);
        moDecSystemPenalty.setEditable(false);
        moDecSystemPricePerTon.setEditable(false);
        moTextSysCurCodePrcTon.setEditable(false);
        moDecSystemFreight.setEditable(false);
        moTextSysCurCodeFreight.setEditable(false);
        moDecSystemTotal.setEditable(false);
        moTextSysCurCodeTot.setEditable(false);
        moTextScaleName.setEditable(false);
        moTextScaleCode.setEditable(false);
        moTextTicket.setEditable(false);
        moTextItem.setEditable(false);
        moTextSeason.setEditable(false);
        moTextRegion.setEditable(false);
        moTextPlates.setEditable(false);
        moTextPlatesCage.setEditable(false);
        moTextDriver.setEditable(false);
        moDecImpuritiesPercentage.setEditable(false);
        moDecDensity.setEditable(false);
        moDecMoisturePercentage.setEditable(false);
        moDecRefractionIndex.setEditable(false);
        moDecIodineValue.setEditable(false);
        moDecLinoleicAcidPercentage.setEditable(false);
        moDecOleicAcidPercentage.setEditable(false);
        moDecErucicAcidPercentage.setEditable(false);
        moDecProteinPercentage.setEditable(false);
        moDecOilContentPercentage.setEditable(false);

        moDecWeightSource.setEditable(false);
        moDecWeightDestiny.setEditable(false);
        moDecWeightSystemPayment.setEditable(false);
        moDecWeightPaymentUser.setEditable(false);

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbTicket registry = moRegistry.clone();

        if (registry.isRegistryNew()) { }

        calculateUsersValues(registry);

        registry.setUserPenaltyPercentage(moDecUserPenalty.getValue());
        registry.setUserPricePerTon(moDecUserPricePerTon.getValue());
        registry.setUserWeightPayment(mdUserWeightPayment);
        registry.setUserPayment_r(mdUserPayment_r);
        registry.setUserTotal_r(mdUserTotal_r);

        registry.setFkProducerId(moKeyProducer.getValue()[0]);
        registry.setXtaScaleName(moTextScaleName.getValue());
        registry.setXtaScaleCode(moTextScaleCode.getValue());
        registry.setXtaSeason(moTextSeason.getValue());
        registry.setXtaRegion(moTextRegion.getValue());
        registry.setXtaItem(moTextItem.getValue());
        registry.setXtaProducer(moKeyProducer.getSelectedItem().getItem());
        registry.setMfgOutsourcing(moBoolMfgOutsourcing.getValue());
        registry.setRowEdited(true);
        registry.setAuxRequirePriceComputation(false);

        if (mnProducerId != moKeyProducer.getValue()[0]) {
            getSeasonRegion();

            registry.setFkSeasonId_n(mnSeasonId);
            registry.setFkRegionId_n(mnRegionId);
            registry.setAuxRequirePriceComputation(true);
            registry.setRevueltaImport1(false);
        }

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbKeyProducer) {
                actionKeyProducer();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox && e.getStateChange() == ItemEvent.SELECTED) {
            JComboBox comboBox = (JComboBox)  e.getSource();

            if (comboBox == moKeyProducer) {
                itemStateKeyProducer();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == moDecUserPenalty.getComponent()) {
                    computeUserPenalty((SBeanFieldDecimal) textField);
            }
        }
    }
}
