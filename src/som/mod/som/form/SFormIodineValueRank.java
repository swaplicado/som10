/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import som.mod.SModConsts;
import som.mod.som.db.SDbIodineValueRank;

/**
 *
 * @author Juan Barajas
 */
public class SFormIodineValueRank extends sa.lib.gui.bean.SBeanForm {

    private SDbIodineValueRank moRegistry;

    /**
     * Creates new form SFormIodineValueRank
     */
    public SFormIodineValueRank(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.SU_IOD_VAL_RANK, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moKeyItem = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel4 = new javax.swing.JPanel();
        jlLimitLow = new javax.swing.JLabel();
        moDecLimitLow = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel5 = new javax.swing.JPanel();
        jlLimitTop = new javax.swing.JLabel();
        moDecLimitTop = new sa.lib.gui.bean.SBeanFieldDecimal();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setForeground(new java.awt.Color(51, 51, 255));
        jlItem.setText("Ítem:*");
        jlItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlItem);

        moKeyItem.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel12.add(moKeyItem);

        jPanel2.add(jPanel12);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLimitLow.setText("Límite inferior:");
        jlLimitLow.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlLimitLow);
        jPanel4.add(moDecLimitLow);

        jPanel2.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLimitTop.setText("Límite superior:");
        jlLimitTop.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlLimitTop);
        jPanel5.add(moDecLimitTop);

        jPanel2.add(jPanel5);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlLimitLow;
    private javax.swing.JLabel jlLimitTop;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecLimitLow;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecLimitTop;
    private sa.lib.gui.bean.SBeanFieldKey moKeyItem;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 480, 300);

        moKeyItem.setKeySettings(miClient, SGuiUtils.getLabelName(jlItem.getText()), true);
        moDecLimitLow.setDecimalSettings(SGuiUtils.getLabelName(jlLimitLow.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecLimitTop.setDecimalSettings(SGuiUtils.getLabelName(jlLimitTop.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);

        moFields.addField(moKeyItem);
        moFields.addField(moDecLimitLow);
        moFields.addField(moDecLimitTop);

        moFields.setFormButton(jbSave);
    }

    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyItem, SModConsts.SU_ITEM, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbIodineValueRank) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moKeyItem.setValue(new int[] { moRegistry.getPkItemId() });
        moDecLimitLow.setValue(moRegistry.getLimitLow_n());
        moDecLimitTop.setValue(moRegistry.getLimitTop_n());

        setFormEditable(true);

        if (moRegistry.isRegistryNew()) {
            
        }
        else {
            moKeyItem.setEnabled(false);
        }
        
        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbIodineValueRank registry = moRegistry.clone();

        if (registry.isRegistryNew()) { }

        registry.setPkItemId(moKeyItem.getValue()[0]);
        registry.setLimitLow_n(moDecLimitLow.getValue());
        registry.setLimitTop_n(moDecLimitTop.getValue());

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid() && (moDecLimitLow.getValue() == 0 && moDecLimitTop.getValue() == 0)) {
            validation.setMessage("Debe al menos especificar un límite.");
            validation.setComponent(moDecLimitLow);
        }
        
        return validation;
    }
}
