/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiField;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldDecimal;
import som.mod.SModConsts;
import som.mod.som.db.SDbItem;
import som.mod.som.db.SDbLaboratoryTest;

/**
 *
 * @author Juan Barajas
 */
public class SFormLaboratoryTest extends sa.lib.gui.bean.SBeanForm implements FocusListener {

    private SDbLaboratoryTest moRegistry;
    private SDbItem moParamsItem;

    /**
     * Creates new form SFormLaboratoryTest
     */
    public SFormLaboratoryTest(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.S_LAB_TEST, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jlImpuritiesPercentage = new javax.swing.JLabel();
        moDecImpuritiesPercentage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel13 = new javax.swing.JPanel();
        jlMoisturePercentage = new javax.swing.JLabel();
        moDecMoisturePercentage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel8 = new javax.swing.JPanel();
        jlDensity = new javax.swing.JLabel();
        moDecDensity = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel10 = new javax.swing.JPanel();
        jlRefractionIndex = new javax.swing.JLabel();
        moDecRefractionIndex = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel9 = new javax.swing.JPanel();
        jlIodineValue = new javax.swing.JLabel();
        moDecIodineValue = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel6 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jlOleicAcidPercentage = new javax.swing.JLabel();
        moDecOleicAcidPercentage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel17 = new javax.swing.JPanel();
        jlLinoleicAcidPercentage = new javax.swing.JLabel();
        moDecLinoleicAcidPercentage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel19 = new javax.swing.JPanel();
        jlLinolenicAcidPercentage = new javax.swing.JLabel();
        moDecLinolenicAcidPercentage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel14 = new javax.swing.JPanel();
        jlErucicAcidPercentage = new javax.swing.JLabel();
        moDecErucicAcidPercentage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel18 = new javax.swing.JPanel();
        jlProteinPercentage = new javax.swing.JLabel();
        moDecProteinPercentage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel15 = new javax.swing.JPanel();
        jlOilContentPercentage = new javax.swing.JLabel();
        moDecOilContentPercentage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel20 = new javax.swing.JPanel();
        jlAcidityPercentage = new javax.swing.JLabel();
        moDecAcidityPercentage = new sa.lib.gui.bean.SBeanFieldDecimal();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(6, 2, 0, 5));

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlImpuritiesPercentage.setText("Impurezas:");
        jlImpuritiesPercentage.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel12.add(jlImpuritiesPercentage);
        jPanel12.add(moDecImpuritiesPercentage);

        jPanel2.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMoisturePercentage.setText("Humedad:");
        jlMoisturePercentage.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel13.add(jlMoisturePercentage);
        jPanel13.add(moDecMoisturePercentage);

        jPanel2.add(jPanel13);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDensity.setText("Densidad:");
        jlDensity.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel8.add(jlDensity);
        jPanel8.add(moDecDensity);

        jPanel2.add(jPanel8);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRefractionIndex.setText("Índice refracción (IR):");
        jlRefractionIndex.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel10.add(jlRefractionIndex);
        jPanel10.add(moDecRefractionIndex);

        jPanel2.add(jPanel10);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlIodineValue.setText("Valor yodo (VI):");
        jlIodineValue.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel9.add(jlIodineValue);
        jPanel9.add(moDecIodineValue);

        jPanel2.add(jPanel9);

        jPanel5.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel1.add(jPanel5, java.awt.BorderLayout.WEST);

        jPanel6.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.GridLayout(7, 1, 0, 5));

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlOleicAcidPercentage.setText("Ácido oleico:");
        jlOleicAcidPercentage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlOleicAcidPercentage);
        jPanel16.add(moDecOleicAcidPercentage);

        jPanel4.add(jPanel16);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLinoleicAcidPercentage.setText("Ácido linoleico:");
        jlLinoleicAcidPercentage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jlLinoleicAcidPercentage);
        jPanel17.add(moDecLinoleicAcidPercentage);

        jPanel4.add(jPanel17);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLinolenicAcidPercentage.setText("Ácido linolénico:");
        jlLinolenicAcidPercentage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel19.add(jlLinolenicAcidPercentage);
        jPanel19.add(moDecLinolenicAcidPercentage);

        jPanel4.add(jPanel19);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlErucicAcidPercentage.setText("Ácido erúcico:");
        jlErucicAcidPercentage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlErucicAcidPercentage);
        jPanel14.add(moDecErucicAcidPercentage);

        jPanel4.add(jPanel14);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProteinPercentage.setText("Proteína:");
        jlProteinPercentage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel18.add(jlProteinPercentage);
        jPanel18.add(moDecProteinPercentage);

        jPanel4.add(jPanel18);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlOilContentPercentage.setText("Aceite:");
        jlOilContentPercentage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlOilContentPercentage);
        jPanel15.add(moDecOilContentPercentage);

        jPanel4.add(jPanel15);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAcidityPercentage.setText("Acidez:");
        jlAcidityPercentage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel20.add(jlAcidityPercentage);
        jPanel20.add(moDecAcidityPercentage);

        jPanel4.add(jPanel20);

        jPanel6.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel1.add(jPanel6, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jlAcidityPercentage;
    private javax.swing.JLabel jlDensity;
    private javax.swing.JLabel jlErucicAcidPercentage;
    private javax.swing.JLabel jlImpuritiesPercentage;
    private javax.swing.JLabel jlIodineValue;
    private javax.swing.JLabel jlLinoleicAcidPercentage;
    private javax.swing.JLabel jlLinolenicAcidPercentage;
    private javax.swing.JLabel jlMoisturePercentage;
    private javax.swing.JLabel jlOilContentPercentage;
    private javax.swing.JLabel jlOleicAcidPercentage;
    private javax.swing.JLabel jlProteinPercentage;
    private javax.swing.JLabel jlRefractionIndex;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecAcidityPercentage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecDensity;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecErucicAcidPercentage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecImpuritiesPercentage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecIodineValue;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecLinoleicAcidPercentage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecLinolenicAcidPercentage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecMoisturePercentage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecOilContentPercentage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecOleicAcidPercentage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecProteinPercentage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecRefractionIndex;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 490, 300);

        moDecImpuritiesPercentage.setDecimalSettings(SGuiUtils.getLabelName(jlImpuritiesPercentage.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecImpuritiesPercentage.setDecimalFormat(SLibUtils.DecimalFormatPercentage2D);
        moDecMoisturePercentage.setDecimalSettings(SGuiUtils.getLabelName(jlMoisturePercentage.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecMoisturePercentage.setDecimalFormat(SLibUtils.DecimalFormatPercentage2D);
        moDecDensity.setDecimalSettings(SGuiUtils.getLabelName(jlDensity.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecRefractionIndex.setDecimalSettings(SGuiUtils.getLabelName(jlRefractionIndex.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecIodineValue.setDecimalSettings(SGuiUtils.getLabelName(jlIodineValue.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecOleicAcidPercentage.setDecimalSettings(SGuiUtils.getLabelName(jlOleicAcidPercentage.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecLinoleicAcidPercentage.setDecimalSettings(SGuiUtils.getLabelName(jlLinoleicAcidPercentage.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecLinolenicAcidPercentage.setDecimalSettings(SGuiUtils.getLabelName(jlLinolenicAcidPercentage.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecErucicAcidPercentage.setDecimalSettings(SGuiUtils.getLabelName(jlErucicAcidPercentage.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecProteinPercentage.setDecimalSettings(SGuiUtils.getLabelName(jlProteinPercentage.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecOilContentPercentage.setDecimalSettings(SGuiUtils.getLabelName(jlOilContentPercentage.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecAcidityPercentage.setDecimalSettings(SGuiUtils.getLabelName(jlAcidityPercentage.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);

        moFields.addField(moDecImpuritiesPercentage);
        moFields.addField(moDecMoisturePercentage);
        moFields.addField(moDecDensity);
        moFields.addField(moDecRefractionIndex);
        moFields.addField(moDecIodineValue);
        moFields.addField(moDecOleicAcidPercentage);
        moFields.addField(moDecLinoleicAcidPercentage);
        moFields.addField(moDecLinolenicAcidPercentage);
        moFields.addField(moDecErucicAcidPercentage);
        moFields.addField(moDecProteinPercentage);
        moFields.addField(moDecOilContentPercentage);
        moFields.addField(moDecAcidityPercentage);

        moFields.setFormButton(jbSave);
    }

    private void computePercentageRound(SBeanFieldDecimal fieldDecimal) {
        fieldDecimal.setValue(SLibUtils.round(fieldDecimal.getValue(), SLibUtils.DecimalFormatPercentage4D.getMaximumFractionDigits()));
    }

    @Override
    public void setValue(int type, Object value) {
        moParamsItem = new SDbItem();
        switch (type) {
            case SGuiConsts.PARAM_ITEM:
                try {
                    moParamsItem = (SDbItem) value;
                }
                catch (Exception e) {
                    SLibUtils.showException(this, e);
                }
                break;
            default:
        }
    }

    private void setEnableRequired() {
        moDecImpuritiesPercentage.setEditable(moParamsItem.isImpuritiesPercentage());
        moDecMoisturePercentage.setEditable(moParamsItem.isMoisturePercentage());
        moDecDensity.setEditable(moParamsItem.isDensity());
        moDecRefractionIndex.setEditable(moParamsItem.isRefractionIndex());
        moDecIodineValue.setEditable(moParamsItem.isIodineValue());
        moDecOleicAcidPercentage.setEditable(moParamsItem.isOleicAcidPercentage());
        moDecLinoleicAcidPercentage.setEditable(moParamsItem.isLinoleicAcidPercentage());
        moDecLinolenicAcidPercentage.setEditable(moParamsItem.isLinolenicAcidPercentage());
        moDecErucicAcidPercentage.setEditable(moParamsItem.isErucicAcidPercentage());
        moDecProteinPercentage.setEditable(moParamsItem.isProteinPercentage());
        moDecOilContentPercentage.setEditable(moParamsItem.isOilContentPercentage());
        moDecAcidityPercentage.setEditable(moParamsItem.isAcidityPercentage());
    }

    @Override
    public void addAllListeners() {
        moDecImpuritiesPercentage.addFocusListener(this);
        moDecMoisturePercentage.addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        moDecImpuritiesPercentage.removeFocusListener(this);
        moDecMoisturePercentage.removeFocusListener(this);
    }

    @Override
    public void reloadCatalogues() {

    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbLaboratoryTest) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moDecImpuritiesPercentage.setValue(moRegistry.getImpuritiesPercentage());
        moDecMoisturePercentage.setValue(moRegistry.getMoisturePercentage());
        moDecDensity.setValue(moRegistry.getDensity());
        moDecRefractionIndex.setValue(moRegistry.getRefractionIndex());
        moDecIodineValue.setValue(moRegistry.getIodineValue());
        moDecOleicAcidPercentage.setValue(moRegistry.getOleicAcidPercentage());
        moDecLinoleicAcidPercentage.setValue(moRegistry.getLinoleicAcidPercentage());
        moDecLinolenicAcidPercentage.setValue(moRegistry.getLinolenicAcidPercentage());
        moDecErucicAcidPercentage.setValue(moRegistry.getErucicAcidPercentage());
        moDecProteinPercentage.setValue(moRegistry.getProteinPercentage());
        moDecOilContentPercentage.setValue(moRegistry.getOilContentPercentage());
        moDecAcidityPercentage.setValue(moRegistry.getAcidityPercentage());

        setFormEditable(true);
        setEnableRequired();

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbLaboratoryTest registry = moRegistry.clone();

        if (registry.isRegistryNew()) {
        }

        registry.setImpuritiesPercentage(moDecImpuritiesPercentage.getValue());
        registry.setMoisturePercentage(moDecMoisturePercentage.getValue());
        registry.setDensity(moDecDensity.getValue());
        registry.setRefractionIndex(moDecRefractionIndex.getValue());
        registry.setIodineValue(moDecIodineValue.getValue());
        registry.setOleicAcidPercentage(moDecOleicAcidPercentage.getValue());
        registry.setLinoleicAcidPercentage(moDecLinoleicAcidPercentage.getValue());
        registry.setLinolenicAcidPercentage(moDecLinolenicAcidPercentage.getValue());
        registry.setErucicAcidPercentage(moDecErucicAcidPercentage.getValue());
        registry.setProteinPercentage(moDecProteinPercentage.getValue());
        registry.setOilContentPercentage(moDecOilContentPercentage.getValue());
        registry.setAcidityPercentage(moDecAcidityPercentage.getValue());

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        boolean isEmpy = true;
        SGuiValidation validation = moFields.validateFields();

        for (SGuiField field : moFields.getFields()) {
            if (field.isEditable() && (Double) field.getValue() > 0d) {
                isEmpy = false;
                break;
            }
        }

        if (validation.isValid() && isEmpy) {
            if (miClient.showMsgBoxConfirm("No ha capturado ningún valor para la prueba de laboratorio.\n" + SGuiConsts.MSG_CNF_CONT) == JOptionPane.YES_OPTION) {
            }
            else {
                validation.setMessage("Se debe especificar al menos un valor para la prueba de laboratorio.");
                validation.setComponent(moDecImpuritiesPercentage);
            }
        }
        return validation;
    }

    @Override
    public void focusGained(FocusEvent e) {
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == moDecImpuritiesPercentage.getComponent() || textField == moDecMoisturePercentage.getComponent()) {
                computePercentageRound((SBeanFieldDecimal) textField);
            }
        }
    }
}
