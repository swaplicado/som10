/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.db.SDbRegistryUser;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiFieldKeyGroup;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import som.gui.SGuiClientSessionCustom;
import som.gui.SGuiClientUtils;
import som.mod.SModConsts;
import som.mod.SModSysConsts;
import som.mod.som.db.SDbMix;
import som.mod.som.db.SSomStock;
import som.mod.som.db.SSomUtils;
import som.mod.som.db.SSomWarehouseItem;

/**
 *
 * @author Néstor Ávalos
 */
public class SFormMix extends sa.lib.gui.bean.SBeanForm implements ActionListener, ItemListener, FocusListener {

    private int mnParamType;
    private int mnParamSubtype;
    private String msParamDate;
    private int mnParamFkMixTypeId;

    private SDbMix moRegistry;
    private SGuiFieldKeyGroup moFieldKeyGroupWarehouseSource;
    private SGuiFieldKeyGroup moFieldKeyGroupWarehouseDestiny;

    private SDialogStockCardex moDialogStockCardex;

    /**
     * Creates new form SFormMix
     */
    public SFormMix(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.S_MIX, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        sBeanFieldKey1 = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel36 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jlMixType = new javax.swing.JLabel();
        moTextMixType = new sa.lib.gui.bean.SBeanFieldText();
        jPanel17 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        moTextNumber = new sa.lib.gui.bean.SBeanFieldText();
        jPanel4 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDateDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel37 = new javax.swing.JPanel();
        jPanel39 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlWarehouseSourceBranch = new javax.swing.JLabel();
        moKeyWarehouseSourceBranch = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel7 = new javax.swing.JPanel();
        jlWarehouseSourceWarehouse = new javax.swing.JLabel();
        moKeyWarehouseSourceWarehouse = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel30 = new javax.swing.JPanel();
        jlDivisionSource = new javax.swing.JLabel();
        moKeyDivisionSource = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel8 = new javax.swing.JPanel();
        jlItemSource = new javax.swing.JLabel();
        moKeyItemSource = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel10 = new javax.swing.JPanel();
        jlXtaStock = new javax.swing.JLabel();
        moDecXtaSourceStock = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlXtaStockUnit = new javax.swing.JLabel();
        jlXtaStockPeriod = new javax.swing.JLabel();
        moTextXtaSourceStockPeriod = new sa.lib.gui.bean.SBeanFieldText();
        jbCardexSource = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jlQuantity = new javax.swing.JLabel();
        moDecQuantity = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlQuantityUnit = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jPanel38 = new javax.swing.JPanel();
        jPanel31 = new javax.swing.JPanel();
        jlWarehouseDestinyBranch = new javax.swing.JLabel();
        moKeyWarehouseDestinyBranch = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel32 = new javax.swing.JPanel();
        jlWarehouseDestinyWarehouse = new javax.swing.JLabel();
        moKeyWarehouseDestinyWarehouse = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel41 = new javax.swing.JPanel();
        jlDivisionDestiny = new javax.swing.JLabel();
        moKeyDivisionDestiny = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel33 = new javax.swing.JPanel();
        jlItemDestiny = new javax.swing.JLabel();
        moKeyItemDestiny = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel34 = new javax.swing.JPanel();
        jlXtaStockDestiny = new javax.swing.JLabel();
        moDecXtaDestinyStock = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlXtaStockUnitDestiny = new javax.swing.JLabel();
        jlXtaStockPeriodDestiny = new javax.swing.JLabel();
        moTextXtaStockPeriodDestiny = new sa.lib.gui.bean.SBeanFieldText();
        jbCardexDestiny = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jPanel29 = new javax.swing.JPanel();
        jlNote = new javax.swing.JLabel();
        moTextNote = new sa.lib.gui.bean.SBeanFieldText();
        jPanel40 = new javax.swing.JPanel();
        moBoolDeleted = new sa.lib.gui.bean.SBeanFieldBoolean();
        moBoolSystem = new sa.lib.gui.bean.SBeanFieldBoolean();
        moBoolAuthorized = new sa.lib.gui.bean.SBeanFieldBoolean();

        setTitle("Documento mezcla");

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setPreferredSize(new java.awt.Dimension(525, 400));
        jPanel2.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel36.setLayout(new java.awt.GridLayout(3, 0, 0, 5));

        jPanel15.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlMixType.setText("Tipo docto.:");
        jlMixType.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel15.add(jlMixType);

        moTextMixType.setEditable(false);
        moTextMixType.setText("MOVE TYPE");
        moTextMixType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel15.add(moTextMixType);

        jPanel36.add(jPanel15);

        jPanel17.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlNumber.setText("Folio:");
        jlNumber.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel17.add(jlNumber);

        moTextNumber.setEditable(false);
        jPanel17.add(moTextNumber);

        jPanel36.add(jPanel17);

        jPanel4.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlDate.setText("Fecha:*");
        jlDate.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel4.add(jlDate);

        moDateDate.setPreferredSize(new java.awt.Dimension(100, 23));
        moDateDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                moDateDateFocusLost(evt);
            }
        });
        jPanel4.add(moDateDate);

        jPanel36.add(jPanel4);

        jPanel2.add(jPanel36, java.awt.BorderLayout.NORTH);

        jPanel37.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel39.setBorder(javax.swing.BorderFactory.createTitledBorder("Almacén origen:"));
        jPanel39.setLayout(new java.awt.GridLayout(6, 1, 0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlWarehouseSourceBranch.setText("Sucursal:*");
        jlWarehouseSourceBranch.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel6.add(jlWarehouseSourceBranch);

        moKeyWarehouseSourceBranch.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel6.add(moKeyWarehouseSourceBranch);

        jPanel39.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlWarehouseSourceWarehouse.setText("Almacén:*");
        jlWarehouseSourceWarehouse.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel7.add(jlWarehouseSourceWarehouse);

        moKeyWarehouseSourceWarehouse.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel7.add(moKeyWarehouseSourceWarehouse);

        jPanel39.add(jPanel7);

        jPanel30.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlDivisionSource.setText("División:");
        jlDivisionSource.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel30.add(jlDivisionSource);

        moKeyDivisionSource.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel30.add(moKeyDivisionSource);

        jPanel39.add(jPanel30);

        jPanel8.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlItemSource.setText("Ítem:*");
        jlItemSource.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel8.add(jlItemSource);

        moKeyItemSource.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel8.add(moKeyItemSource);

        jPanel39.add(jPanel8);

        jPanel10.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlXtaStock.setText("Existencias:");
        jlXtaStock.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel10.add(jlXtaStock);

        moDecXtaSourceStock.setEditable(false);
        jPanel10.add(moDecXtaSourceStock);

        jlXtaStockUnit.setText("UNID");
        jlXtaStockUnit.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel10.add(jlXtaStockUnit);

        jlXtaStockPeriod.setText("Ejercicio:");
        jlXtaStockPeriod.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel10.add(jlXtaStockPeriod);

        moTextXtaSourceStockPeriod.setEditable(false);
        moTextXtaSourceStockPeriod.setText("2013");
        moTextXtaSourceStockPeriod.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel10.add(moTextXtaSourceStockPeriod);

        jbCardexSource.setIcon(new javax.swing.ImageIcon(getClass().getResource("/som/gui/img/icon_std_kardex.gif"))); // NOI18N
        jbCardexSource.setToolTipText("Ver cardex");
        jbCardexSource.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbCardexSource);

        jPanel39.add(jPanel10);

        jPanel9.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlQuantity.setText("Cantidad:*");
        jlQuantity.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel9.add(jlQuantity);
        jPanel9.add(moDecQuantity);

        jlQuantityUnit.setText("UNID");
        jlQuantityUnit.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel9.add(jlQuantityUnit);

        jPanel39.add(jPanel9);

        jPanel37.add(jPanel39, java.awt.BorderLayout.NORTH);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Almacén destino:"));
        jPanel11.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel38.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel31.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlWarehouseDestinyBranch.setText("Sucursal:*");
        jlWarehouseDestinyBranch.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel31.add(jlWarehouseDestinyBranch);

        moKeyWarehouseDestinyBranch.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel31.add(moKeyWarehouseDestinyBranch);

        jPanel38.add(jPanel31);

        jPanel32.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlWarehouseDestinyWarehouse.setText("Almacén:*");
        jlWarehouseDestinyWarehouse.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel32.add(jlWarehouseDestinyWarehouse);

        moKeyWarehouseDestinyWarehouse.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel32.add(moKeyWarehouseDestinyWarehouse);

        jPanel38.add(jPanel32);

        jPanel41.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlDivisionDestiny.setText("División:");
        jlDivisionDestiny.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel41.add(jlDivisionDestiny);

        moKeyDivisionDestiny.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel41.add(moKeyDivisionDestiny);

        jPanel38.add(jPanel41);

        jPanel33.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlItemDestiny.setText("Ítem:*");
        jlItemDestiny.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel33.add(jlItemDestiny);

        moKeyItemDestiny.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel33.add(moKeyItemDestiny);

        jPanel38.add(jPanel33);

        jPanel34.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlXtaStockDestiny.setText("Existencias:");
        jlXtaStockDestiny.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel34.add(jlXtaStockDestiny);

        moDecXtaDestinyStock.setEditable(false);
        jPanel34.add(moDecXtaDestinyStock);

        jlXtaStockUnitDestiny.setText("UNID");
        jlXtaStockUnitDestiny.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel34.add(jlXtaStockUnitDestiny);

        jlXtaStockPeriodDestiny.setText("Ejercicio:");
        jlXtaStockPeriodDestiny.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel34.add(jlXtaStockPeriodDestiny);

        moTextXtaStockPeriodDestiny.setEditable(false);
        moTextXtaStockPeriodDestiny.setText("2013");
        moTextXtaStockPeriodDestiny.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel34.add(moTextXtaStockPeriodDestiny);

        jbCardexDestiny.setIcon(new javax.swing.ImageIcon(getClass().getResource("/som/gui/img/icon_std_kardex.gif"))); // NOI18N
        jbCardexDestiny.setToolTipText("Ver cardex");
        jbCardexDestiny.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel34.add(jbCardexDestiny);

        jPanel38.add(jPanel34);

        jPanel11.add(jPanel38, java.awt.BorderLayout.NORTH);

        jPanel37.add(jPanel11, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel37, java.awt.BorderLayout.CENTER);

        jPanel12.setLayout(new java.awt.GridLayout(2, 1));

        jPanel29.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlNote.setText("Observaciones:");
        jlNote.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel29.add(jlNote);

        moTextNote.setText("NOTE");
        moTextNote.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel29.add(moTextNote);

        jPanel12.add(jPanel29);

        jPanel40.setLayout(new java.awt.FlowLayout(0, 5, 0));

        moBoolDeleted.setText("Registro eliminado");
        moBoolDeleted.setEnabled(false);
        moBoolDeleted.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel40.add(moBoolDeleted);

        moBoolSystem.setText("Registro sistema");
        moBoolSystem.setEnabled(false);
        moBoolSystem.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel40.add(moBoolSystem);

        moBoolAuthorized.setText("Registro autorizado");
        moBoolAuthorized.setEnabled(false);
        moBoolAuthorized.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel40.add(moBoolAuthorized);

        jPanel12.add(jPanel40);

        jPanel2.add(jPanel12, java.awt.BorderLayout.SOUTH);

        jPanel1.add(jPanel2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void moDateDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_moDateDateFocusLost
        actionDateFocusLost();
    }//GEN-LAST:event_moDateDateFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCardexDestiny;
    private javax.swing.JButton jbCardexSource;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlDivisionDestiny;
    private javax.swing.JLabel jlDivisionSource;
    private javax.swing.JLabel jlItemDestiny;
    private javax.swing.JLabel jlItemSource;
    private javax.swing.JLabel jlMixType;
    private javax.swing.JLabel jlNote;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JLabel jlQuantity;
    private javax.swing.JLabel jlQuantityUnit;
    private javax.swing.JLabel jlWarehouseDestinyBranch;
    private javax.swing.JLabel jlWarehouseDestinyWarehouse;
    private javax.swing.JLabel jlWarehouseSourceBranch;
    private javax.swing.JLabel jlWarehouseSourceWarehouse;
    private javax.swing.JLabel jlXtaStock;
    private javax.swing.JLabel jlXtaStockDestiny;
    private javax.swing.JLabel jlXtaStockPeriod;
    private javax.swing.JLabel jlXtaStockPeriodDestiny;
    private javax.swing.JLabel jlXtaStockUnit;
    private javax.swing.JLabel jlXtaStockUnitDestiny;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolAuthorized;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolDeleted;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolSystem;
    private sa.lib.gui.bean.SBeanFieldDate moDateDate;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecQuantity;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecXtaDestinyStock;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecXtaSourceStock;
    private sa.lib.gui.bean.SBeanFieldKey moKeyDivisionDestiny;
    private sa.lib.gui.bean.SBeanFieldKey moKeyDivisionSource;
    private sa.lib.gui.bean.SBeanFieldKey moKeyItemDestiny;
    private sa.lib.gui.bean.SBeanFieldKey moKeyItemSource;
    private sa.lib.gui.bean.SBeanFieldKey moKeyWarehouseDestinyBranch;
    private sa.lib.gui.bean.SBeanFieldKey moKeyWarehouseDestinyWarehouse;
    private sa.lib.gui.bean.SBeanFieldKey moKeyWarehouseSourceBranch;
    private sa.lib.gui.bean.SBeanFieldKey moKeyWarehouseSourceWarehouse;
    private sa.lib.gui.bean.SBeanFieldText moTextMixType;
    private sa.lib.gui.bean.SBeanFieldText moTextNote;
    private sa.lib.gui.bean.SBeanFieldText moTextNumber;
    private sa.lib.gui.bean.SBeanFieldText moTextXtaSourceStockPeriod;
    private sa.lib.gui.bean.SBeanFieldText moTextXtaStockPeriodDestiny;
    private sa.lib.gui.bean.SBeanFieldKey sBeanFieldKey1;
    // End of variables declaration//GEN-END:variables

    /*
    * Private methods
    */

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 960, 600);

        moFieldKeyGroupWarehouseSource = new SGuiFieldKeyGroup(miClient);
        moFieldKeyGroupWarehouseDestiny = new SGuiFieldKeyGroup(miClient);
        moDialogStockCardex = new SDialogStockCardex(miClient);

        moTextMixType.setTextSettings(SGuiUtils.getLabelName(jlMixType.getText()), 100, 0);
        moTextNumber.setTextSettings(SGuiUtils.getLabelName(jlNumber.getText()), 15, 0);
        moDateDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate.getText()), true);
        moDecQuantity.setDecimalSettings(SGuiUtils.getLabelName(jlQuantity.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moKeyWarehouseSourceBranch.setKeySettings(miClient, SGuiUtils.getLabelName(jlWarehouseSourceBranch.getText()), true);
        moKeyWarehouseSourceWarehouse.setKeySettings(miClient, SGuiUtils.getLabelName(jlWarehouseSourceWarehouse.getText()), true);
        moKeyDivisionSource.setKeySettings(miClient, SGuiUtils.getLabelName(jlDivisionSource.getText()), false);
        moKeyItemSource.setKeySettings(miClient, SGuiUtils.getLabelName(jlItemSource.getText()), true);
        moDecXtaSourceStock.setDecimalSettings(SGuiUtils.getLabelName(jlXtaStock.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moTextXtaSourceStockPeriod.setTextSettings(jlXtaStockPeriod.getText(), 5, 0);
        moKeyWarehouseDestinyBranch.setKeySettings(miClient, SGuiUtils.getLabelName(jlWarehouseDestinyBranch.getText()), true);
        moKeyWarehouseDestinyWarehouse.setKeySettings(miClient, SGuiUtils.getLabelName(jlWarehouseDestinyWarehouse.getText()), true);
        moKeyDivisionDestiny.setKeySettings(miClient, SGuiUtils.getLabelName(jlDivisionDestiny.getText()), false);
        moKeyItemDestiny.setKeySettings(miClient, SGuiUtils.getLabelName(jlItemDestiny.getText()), true);
        moDecXtaDestinyStock.setDecimalSettings(SGuiUtils.getLabelName(jlXtaStockDestiny.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moTextXtaStockPeriodDestiny.setTextSettings(jlXtaStockPeriodDestiny.getText(), 5, 0);
        moTextNote.setTextSettings(SGuiUtils.getLabelName(jlNote.getText()), 255, 0);
        moBoolDeleted.setBooleanSettings(SGuiUtils.getLabelName(moBoolDeleted.getText()), false);
        moBoolSystem.setBooleanSettings(SGuiUtils.getLabelName(moBoolSystem.getText()), false);
        moBoolAuthorized.setBooleanSettings(SGuiUtils.getLabelName(moBoolAuthorized.getText()), false);

        moFields.addField(moTextMixType);
        moFields.addField(moTextNumber);
        moFields.addField(moDateDate);
        moFields.addField(moKeyWarehouseSourceBranch);
        moFields.addField(moKeyWarehouseSourceWarehouse);
        moFields.addField(moKeyDivisionSource);
        moFields.addField(moKeyItemSource);
        moFields.addField(moDecXtaSourceStock);
        moFields.addField(moTextXtaSourceStockPeriod);
        moFields.addField(moDecQuantity);
        moFields.addField(moKeyWarehouseDestinyBranch);
        moFields.addField(moKeyWarehouseDestinyWarehouse);
        moFields.addField(moKeyDivisionDestiny);
        moFields.addField(moKeyItemDestiny);
        moFields.addField(moDecXtaDestinyStock);
        moFields.addField(moTextXtaStockPeriodDestiny);
        moFields.addField(moTextNote);
        moFields.addField(moBoolDeleted);
        moFields.addField(moBoolSystem);
        moFields.addField(moBoolAuthorized);

        moFields.setFormButton(jbSave);

        jlXtaStockUnit.setText("");
        jlQuantityUnit.setText("");
        jlXtaStockUnitDestiny.setText("");
    }

    private void resetComboBoxes() {

        if (moKeyWarehouseSourceWarehouse.getModel().getSize() == 2) {
            moKeyWarehouseSourceWarehouse.setSelectedIndex(1);
        }

        if (moKeyDivisionSource.getModel().getSize() == 2) {
            moKeyDivisionSource.setSelectedIndex(1);
        }

        if (moKeyItemSource.getModel().getSize() == 2) {
            moKeyItemSource.setSelectedIndex(1);
        }

        if (moKeyWarehouseDestinyWarehouse.getModel().getSize() == 2) {
            moKeyWarehouseDestinyWarehouse.setSelectedIndex(1);
        }

        if (moKeyDivisionDestiny.getModel().getSize() == 2) {
            moKeyDivisionDestiny.setSelectedIndex(1);
        }

        if (moKeyItemDestiny.getModel().getSize() == 2) {
            moKeyItemDestiny.setSelectedIndex(1);
        }
    }

    private String readMixType() {
        return (String) (moRegistry.getFkMixTypeId() > 0 ? miClient.getSession().readField(SModConsts.SS_MIX_TP, new int[] { moRegistry.getFkMixTypeId() }, SDbRegistryUser.FIELD_NAME) : "INDEFINIDO");
    }

    private void loadFieldsValuesMix() {
        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        int[] anCompanyBranchId = null;

        removeAllListeners();
        reloadCatalogues();
        moFields.resetFields();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        mnParamFkMixTypeId = moRegistry.getFkMixTypeId();
        moTextMixType.setValue(readMixType());
        moTextNumber.setValue("" + moRegistry.getNumber());
        moDateDate.setValue(moRegistry.getDate());
        moDecQuantity.setValue(moRegistry.getQuantity() < 0 ? 0 : moRegistry.getQuantity());
        jlQuantityUnit.setText(moRegistry.getFkItemSourceId() > 0 && moKeyItemSource.getSelectedItem().getComplement() != null ? moKeyItemSource.getSelectedItem().getComplement().toString() : "");

        moKeyWarehouseSourceBranch.setValue(new int[] { moRegistry.getFkWarehouseSourceCompanyId(), moRegistry.getFkWarehouseSourceBranchId() });
        moKeyWarehouseSourceWarehouse.setValue(new int[] { moRegistry.getFkWarehouseSourceCompanyId(), moRegistry.getFkWarehouseSourceBranchId(), moRegistry.getFkWarehouseSourceWarehouseId() });
        moKeyDivisionSource.setValue(new int[] { moRegistry.getFkDivisionSourceId_n() });
        moKeyItemSource.setValue(new int[] { moRegistry.getFkItemSourceId() });
        moDecXtaSourceStock.setValue(0d);
        moTextXtaSourceStockPeriod.setValue("");

        moKeyWarehouseDestinyBranch.setValue(new int[] { moRegistry.getFkWarehouseDestinyCompanyId(), moRegistry.getFkWarehouseDestinyBranchId() });
        moKeyWarehouseDestinyWarehouse.setValue(new int[] { moRegistry.getFkWarehouseDestinyCompanyId(), moRegistry.getFkWarehouseDestinyBranchId(), moRegistry.getFkWarehouseDestinyWarehouseId() });
        moKeyDivisionDestiny.setValue(new int[] { moRegistry.getFkDivisionDestinyId_n() });
        moKeyItemDestiny.setValue(new int[] { moRegistry.getFkItemDestinyId() });
        moDecXtaDestinyStock.setValue(0d);
        moTextXtaStockPeriodDestiny.setValue("");

        moTextNote.setValue(moRegistry.getAuxNote());
        moBoolDeleted.setValue(moRegistry.isDeleted());
        moBoolSystem.setValue(moRegistry.isSystem());
        moBoolAuthorized.setValue(moRegistry.isAuthorized());

        setFormEditable(true);
        if (moRegistry.isRegistryNew()) {
            anCompanyBranchId = new int[] { ((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getCompany().getChildBranches().get(0).getPrimaryKey()[0],
                ((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getCompany().getChildBranches().get(0).getPrimaryKey()[1]};

            moKeyWarehouseSourceBranch.setValue(anCompanyBranchId);
            moKeyWarehouseDestinyBranch.setValue(anCompanyBranchId);

            resetComboBoxes();

            moTextNumber.setValue("0");
            moDateDate.setValue(miClient.getSession().getWorkingDate());
        }
        else {
            moKeyWarehouseSourceWarehouse.setEnabled(false);
            moKeyDivisionSource.setEnabled(false);
            moKeyItemSource.setEnabled(false);

            moKeyWarehouseDestinyWarehouse.setEnabled(false);
            moKeyDivisionDestiny.setEnabled(false);
            moKeyItemDestiny.setEnabled(false);

            if (moBoolSystem.getValue()) {

                moDateDate.setEditable(false);
                moDecQuantity.setEditable(false);
                moBoolDeleted.setEnabled(false);
            }
        }

        disabledFields(false);
        actionChangedFkItemSource();
        actionChangedFkItemDestiny();
        addAllListeners();
    }

    private void actionDateFocusLost() {
        obtainItem(true);
        obtainStock(true);
        obtainStock(false);
    }

    private void actionQuantityFocusLost() {
        // XXX assignIogDestinyQuantity();
    }

    private void actionChangedFkWarehouseSourceWarehouse() {
        if (mnParamFkMixTypeId == SModSysConsts.SS_MIX_TP_CNV &&
                moKeyWarehouseSourceWarehouse.getSelectedIndex() > 0) {
            moKeyWarehouseDestinyWarehouse.setValue(moKeyWarehouseSourceWarehouse.getValue());
        }
        else if (mnParamFkMixTypeId == SModSysConsts.SS_MIX_TP_CNV &&
                moKeyWarehouseSourceWarehouse.getSelectedIndex() <= 0) {
            moKeyWarehouseDestinyWarehouse.setSelectedIndex(0);
        }

        obtainItem(true);
        obtainStock(true);
        enabledCardex();
    }

    private void actionChangedFkWarehouseDestinyWarehouse() {
        obtainItem(false);
        obtainStock(false);
        enabledCardex();
    }

    private void actionChangedFkDivisionSource() {
        if (moKeyDivisionSource.getSelectedIndex() > 0) {
            moKeyDivisionDestiny.setValue(moKeyDivisionSource.getValue());
        }
        else {
            moKeyDivisionDestiny.setSelectedIndex(0);
        }

        obtainItem(true);
        obtainStock(true);
        enabledCardex();
    }

    private void actionChangedFkDivisionDestiny() {
        obtainItem(false);
        obtainStock(false);
        enabledCardex();
    }

    private void actionChangedFkItemSource() {
        if (moKeyItemSource.getSelectedIndex() > 0) {
            jlQuantityUnit.setText(moKeyItemSource.getSelectedIndex() > 0 ? moKeyItemSource.getSelectedItem().getComplement().toString() : "");
        }

        obtainStock(true);
        enabledCardex();
    }

    private void actionChangedFkItemDestiny() {
        obtainStock(false);
        enabledCardex();
    }

    private void enabledCardex() {
        if (moKeyWarehouseSourceWarehouse.getSelectedIndex() > 0 && moKeyItemSource.getSelectedIndex() > 0) {
            jbCardexSource.setEnabled(true);
        }
        else {
            jbCardexSource.setEnabled(false);
        }

        if (moKeyWarehouseDestinyWarehouse.getSelectedIndex() > 0 && moKeyItemDestiny.getSelectedIndex() > 0) {
            jbCardexDestiny.setEnabled(true);
        }
        else {
            jbCardexDestiny.setEnabled(false);
        }
    }

    private void actionCardexSource() {
        if (jbCardexSource.isEnabled()) {
            if (moDateDate.getValue() != null ) {

                moDialogStockCardex.formReset();
                moDialogStockCardex.setFormParams(
                        SLibTimeUtils.getEndOfYear(moDateDate.getValue()),
                        moKeyItemSource.getValue()[0],
                        moKeyItemSource.getSelectedItem().getForeignKey()[0],
                        moKeyWarehouseSourceWarehouse.getValue(),
                        (moKeyDivisionSource.getSelectedIndex() > 0 ? moKeyDivisionSource.getValue()[0] : SLibConsts.UNDEFINED));
                moDialogStockCardex.setVisible(true);
            }
            else {
                miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + moDateDate.getFieldName() + "'.");
                moDateDate.requestFocus();
            }
        }
    }

    private void actionCardexDestiny() {
        if (jbCardexDestiny.isEnabled()) {
            if (moDateDate.getValue() != null ) {

                moDialogStockCardex.formReset();
                moDialogStockCardex.setFormParams(
                        SLibTimeUtils.getEndOfYear(moDateDate.getValue()),
                        moKeyItemDestiny.getValue()[0],
                        moKeyItemDestiny.getSelectedItem().getForeignKey()[0],
                        moKeyWarehouseDestinyWarehouse.getValue(),
                        (moKeyDivisionDestiny.getSelectedIndex() > 0 ? moKeyDivisionDestiny.getValue()[0] : SLibConsts.UNDEFINED));
                moDialogStockCardex.setVisible(true);
            }
            else {
                miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + moDateDate.getFieldName() + "'.");
                moDateDate.requestFocus();
            }

        }
    }

    /* XXX
    private void assignIogDestinyQuantity() {

        // Assign quantity destiny depending of move type:

        if (moKeyWarehouseDestinyWarehouse.getSelectedIndex() > 0 && moKeyItemDestiny.getSelectedIndex() > 0) {

            if (SLibUtils.compareKeys(SModSysConsts.SS_IOG_TP_OUT_INT_TRA, mnParamFkMixTypeId) ||
                    SLibUtils.compareKeys(SModSysConsts.SS_IOG_TP_OUT_INT_MIX_PAS, mnParamFkMixTypeId) ) {

                moDecQuantityDestiny.setValue(moDecQuantity.getValue());
                moIogRegistryB.setQuantity(moDecQuantityDestiny.getValue());
            }
            else if (SLibUtils.compareKeys(SModSysConsts.SS_IOG_TP_OUT_INT_CNV, mnParamFkMixTypeId) ) {

                moDecQuantityDestiny.setValue(moDecQuantity.getValue());
                moIogRegistryB.setQuantity(moDecQuantityDestiny.getValue());
            }
            else if (SLibUtils.compareKeys(SModSysConsts.SS_IOG_TP_OUT_INT_MIX_ACT, mnParamFkMixTypeId) ) {

                moDecQuantityDestiny.setValue(moDecXtaDestinyStock.getValue());
                moIogRegistryB.setQuantity(moDecQuantity.getValue());
                moIogRegistryC.setQuantity(moDecQuantityDestiny.getValue());
                moIogRegistryD.setQuantity(moDecQuantityDestiny.getValue());
            }
        }
    }
    */

    private void obtainItem(final boolean bSource) {
        ArrayList<SSomWarehouseItem> somWarehouseItem = new ArrayList<SSomWarehouseItem>();

        if ((bSource && moKeyWarehouseSourceWarehouse.getSelectedIndex() > 0) ||
                (!bSource && moKeyWarehouseDestinyWarehouse.getSelectedIndex() > 0)) {

            somWarehouseItem = SSomUtils.stockWarehouseByItem(
                    miClient.getSession(),
                    SLibTimeUtils.digestYear(moDateDate.getValue() != null ? moDateDate.getValue() : miClient.getSession().getWorkingDate())[0],
                    bSource ? moKeyWarehouseSourceWarehouse.getValue() : moKeyWarehouseDestinyWarehouse.getValue(),
                    null,
                    moDateDate.getValue() != null ? moDateDate.getValue() : miClient.getSession().getWorkingDate(),
                    null,
                    (bSource ? (moKeyDivisionSource.getSelectedIndex() > 0 ? moKeyDivisionSource.getValue()[0] : SLibConsts.UNDEFINED) :
                        (moKeyDivisionDestiny.getSelectedIndex() > 0 ? moKeyDivisionDestiny.getValue()[0] : SLibConsts.UNDEFINED)),
                    SLibConsts.UNDEFINED);
        }

        if (somWarehouseItem.size() > 0) {

            if (bSource) {
                moKeyItemSource.setValue(new int[] { somWarehouseItem.get(0).getPkItemId() });
            }
            else {
                moKeyItemDestiny.setValue(new int[] { somWarehouseItem.get(0).getPkItemId() });
            }
        }
        else {

            if (bSource) {
                moKeyItemSource.setSelectedIndex(0);
            }
            else {
                moKeyItemDestiny.setSelectedIndex(0);
            }
        }
    }

    private void obtainStock(final boolean origin) {
        SSomStock stock = null;

        if (moDateDate.getValue() != null &&
                ((origin && moKeyWarehouseSourceWarehouse.getSelectedIndex() > 0 && moKeyItemSource.getSelectedIndex() > 0) ||
                (!origin && moKeyWarehouseDestinyWarehouse.getSelectedIndex() > 0 && moKeyItemDestiny.getSelectedIndex() > 0))) {
            stock = SSomUtils.obtainStock(
                miClient.getSession(),
                SLibTimeUtils.digestYear(moDateDate.getValue())[0],
                (origin ? (moKeyItemSource.getSelectedIndex() > 0 ? moKeyItemSource.getValue()[0] : 0) :
                    (moKeyItemDestiny.getSelectedIndex() > 0 ? moKeyItemDestiny.getValue()[0] : 0)),
                (origin ? (moKeyItemSource.getSelectedIndex() > 0 ? moKeyItemSource.getSelectedItem().getForeignKey()[0] : 0) :
                    (moKeyItemDestiny.getSelectedIndex() > 0 ? moKeyItemDestiny.getSelectedItem().getForeignKey()[0] : 0)),
                SLibConsts.UNDEFINED,
                (origin ? (moKeyWarehouseSourceWarehouse.getSelectedIndex() > 0 ? moKeyWarehouseSourceWarehouse.getValue() : moKeyWarehouseSourceBranch.getValue()) :
                    (moKeyWarehouseDestinyWarehouse.getSelectedIndex() > 0 ? moKeyWarehouseDestinyWarehouse.getValue() : moKeyWarehouseDestinyBranch.getValue())),
                (origin ? (mnParamFkMixTypeId != SModSysConsts.SS_MIX_TP_CNV && moKeyDivisionSource.getSelectedIndex() > 0 ? moKeyDivisionSource.getValue()[0] : SLibConsts.UNDEFINED) :
                    (mnParamFkMixTypeId != SModSysConsts.SS_MIX_TP_CNV && moKeyDivisionDestiny.getSelectedIndex() > 0 ? moKeyDivisionDestiny.getValue()[0] : SLibConsts.UNDEFINED)),
                null,
                moDateDate.getValue(), false, false);

            if (origin) {
                moDecXtaSourceStock.setValue(stock.getStock());
                jlXtaStockUnit.setText(moKeyItemSource.getSelectedIndex() > 0 ? moKeyItemSource.getSelectedItem().getComplement().toString() : "");
                moTextXtaSourceStockPeriod.setText("" + SLibTimeUtils.digestYear(moDateDate.getValue())[0]);
            }
            else {
                moDecXtaDestinyStock.setValue(stock.getStock());
                jlXtaStockUnitDestiny.setText(moKeyItemDestiny.getSelectedIndex() > 0 ? moKeyItemDestiny.getSelectedItem().getComplement().toString() : "");
                moTextXtaStockPeriodDestiny.setText("" + SLibTimeUtils.digestYear(moDateDate.getValue())[0]);
            }

            // XXX assignIogDestinyQuantity();
        }
        else {
            if (origin) {
                moDecXtaSourceStock.setValue(0d);
                jlXtaStockUnit.setText("");
                moTextXtaSourceStockPeriod.setText("");
            }
            else {
                moDecXtaDestinyStock.setValue(0d);
                jlXtaStockUnitDestiny.setText("");
                moTextXtaStockPeriodDestiny.setText("");
            }
        }

        if (mnParamFkMixTypeId == SModSysConsts.SS_MIX_TP_CNV &&
                moRegistry.isRegistryNew()) {

            moDecQuantity.setValue(moDecXtaSourceStock.getValue());
        }
    }

    private void disabledFields(final boolean b) {
        moKeyWarehouseSourceBranch.setEnabled(b);
        moKeyWarehouseDestinyBranch.setEnabled(b);
        moKeyDivisionDestiny.setEnabled(b);

        moTextMixType.setEditable(b);
        moTextNumber.setEditable(b);

        moTextXtaSourceStockPeriod.setEditable(b);
        moDecXtaSourceStock.setEditable(b);

        moTextXtaStockPeriodDestiny.setEditable(b);
        moDecXtaDestinyStock.setEditable(b);

        moBoolDeleted.setEnabled(b);
        moBoolSystem.setEnabled(b);
        moBoolAuthorized.setEnabled(b);

        switch (mnParamFkMixTypeId) {
            case SModSysConsts.SS_MIX_TP_MIX_PAS:

                break;

            case SModSysConsts.SS_MIX_TP_MIX_ACT:

                break;

            case SModSysConsts.SS_MIX_TP_CNV:

                moDecQuantity.setEditable(b);
                moKeyDivisionSource.setEnabled(b);
                moKeyWarehouseDestinyWarehouse.setEnabled(b);
                moKeyDivisionDestiny.setEnabled(b);
                break;

            default:
        }
    }

    private void reloadCatalogueItem() {
        SGuiParams params = new SGuiParams();

        /* XXX
        if (!moRegistry.getXtaDpsBizPartner().isEmpty() &&
            (SLibUtils.compareKeys(mnParamFkMixTypeId, SModSysConsts.SS_IOG_TP_IN_PUR_PUR) ||
             SLibUtils.compareKeys(mnParamFkMixTypeId, SModSysConsts.SS_IOG_TP_IN_SAL_SAL) ||
             SLibUtils.compareKeys(mnParamFkMixTypeId, SModSysConsts.SS_IOG_TP_OUT_PUR_PUR) ||
             SLibUtils.compareKeys(mnParamFkMixTypeId, SModSysConsts.SS_IOG_TP_OUT_SAL_SAL))) {
            params.getParamsMap().put(SModConsts.SX_EXT_ITEM, moRegistry.getXtaExternalItemId());
            miClient.getSession().populateCatalogue(moKeyItemSource, SModConsts.SU_ITEM, SLibConsts.UNDEFINED, params);
        }
        else {
        */
            miClient.getSession().populateCatalogue(moKeyItemSource, SModConsts.SU_ITEM, SLibConsts.UNDEFINED, null);
            miClient.getSession().populateCatalogue(moKeyItemDestiny, SModConsts.SU_ITEM, SLibConsts.UNDEFINED, null);
        //}
    }

    /* XXX
    private void renderTransferMoves() {

        if (SLibUtils.compareKeys(SModSysConsts.SS_IOG_TP_OUT_INT_TRA, mnParamFkMixTypeId) ) {

            moIogRegistryB = assignTransferTypeMove(SModSysConsts.SS_IOG_TP_IN_INT_TRA);
        }

        if (SLibUtils.compareKeys(SModSysConsts.SS_IOG_TP_OUT_INT_CNV, mnParamFkMixTypeId) ) {

            moIogRegistryB = assignTransferTypeMove(SModSysConsts.SS_IOG_TP_IN_INT_CNV);
        }

        if (SLibUtils.compareKeys(SModSysConsts.SS_IOG_TP_OUT_INT_MIX_PAS, mnParamFkMixTypeId) ) {

            moIogRegistryB = assignTransferTypeMove(SModSysConsts.SS_IOG_TP_IN_INT_MIX_PAS);
        }

        if (SLibUtils.compareKeys(SModSysConsts.SS_IOG_TP_OUT_INT_MIX_ACT, mnParamFkMixTypeId) ) {

            moIogRegistryB = assignTransferTypeMove(SModSysConsts.SS_IOG_TP_IN_INT_MIX_ACT);
            moIogRegistryC = assignTransferTypeMove(SModSysConsts.SS_IOG_TP_OUT_INT_MIX_ACT);
            moIogRegistryD = assignTransferTypeMove(SModSysConsts.SS_IOG_TP_IN_INT_MIX_ACT);
        }

        if (moIogRegistryB != null) {
            moIogRegistryB.setFkWarehouseCompanyId(((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getCompany().getPrimaryKey()[0]);
            moIogRegistryB.setFkWarehouseBranchId(((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getCompany().getChildBranches().get(0).getPrimaryKey()[0]);
        }
    }
    */

    /* XXX
    private SDbIog assignTransferTypeMove(final int[] typeIog) {
        SDbIog iog = new SDbIog();

        iog.setFkIogCategoryId(typeIog[0]);
        iog.setFkIogClassId(typeIog[1]);
        iog.setFkIogTypeId(typeIog[2]);
        iog.setSystem(true);

        return iog;
    }
    */

    /* XXX
    private void getRegistryDestiny(final SDbIog registry) {

         if (SLibUtils.compareKeys(SModSysConsts.SS_IOG_TP_OUT_INT_TRA, mnParamFkMixTypeId) ||
            SLibUtils.compareKeys(SModSysConsts.SS_IOG_TP_OUT_INT_CNV, mnParamFkMixTypeId) ||
            SLibUtils.compareKeys(SModSysConsts.SS_IOG_TP_OUT_INT_MIX_PAS, mnParamFkMixTypeId) ||
            SLibUtils.compareKeys(SModSysConsts.SS_IOG_TP_OUT_INT_MIX_ACT, mnParamFkMixTypeId) ) {

            moIogRegistryB = assignIogDestinyData(moIogRegistryB);

            if (SLibUtils.compareKeys(SModSysConsts.SS_IOG_TP_OUT_INT_TRA, mnParamFkMixTypeId) ||
                    SLibUtils.compareKeys(SModSysConsts.SS_IOG_TP_OUT_INT_MIX_ACT, mnParamFkMixTypeId)) {

                moIogRegistryB.setFkItemId(moKeyItemSource.getValue()[0]);
                moIogRegistryB.setFkUnitId(moKeyItemSource.getSelectedItem().getForeignKey()[0]);
            }
            else {
                moIogRegistryB.setFkItemId(moKeyItemDestiny.getValue()[0]);
                moIogRegistryB.setFkUnitId(moKeyItemDestiny.getSelectedItem().getForeignKey()[0]);
            }

            registry.setIogRegistryB(moIogRegistryB);
        }

        if (SLibUtils.compareKeys(SModSysConsts.SS_IOG_TP_OUT_INT_MIX_ACT, mnParamFkMixTypeId) ) {

            moIogRegistryC = assignIogDestinyData(moIogRegistryC);
            moIogRegistryC.setFkItemId(moKeyItemDestiny.getValue()[0]);
            moIogRegistryC.setFkUnitId(moKeyItemDestiny.getSelectedItem().getForeignKey()[0]);
            registry.setIogRegistryC(moIogRegistryC);

            moIogRegistryD = assignIogDestinyData(moIogRegistryD);
            moIogRegistryD.setFkItemId(moKeyItemSource.getValue()[0]);
            moIogRegistryD.setFkUnitId(moKeyItemSource.getSelectedItem().getForeignKey()[0]);
            registry.setIogRegistryD(moIogRegistryD);
        }
    }
    */

    /*
    private SDbIog assignIogDestinyData(final SDbIog iogRegistry) {
        SDbIog iog = iogRegistry;

        if (SLibUtils.compareKeys(SModSysConsts.SS_IOG_TP_OUT_INT_CNV, mnParamFkMixTypeId)) {
            iog.setFkWarehouseCompanyId(moKeyWarehouseSourceWarehouse.getValue()[0]);
            iog.setFkWarehouseBranchId(moKeyWarehouseSourceWarehouse.getValue()[1]);
            iog.setFkWarehouseWarehouseId(moKeyWarehouseSourceWarehouse.getValue()[2]);
            iog.setFkDivisionId(moKeyDivisionSource.getValue()[0]);
        }
        else {
            iog.setFkWarehouseCompanyId(moKeyWarehouseDestinyWarehouse.getValue()[0]);
            iog.setFkWarehouseBranchId(moKeyWarehouseDestinyWarehouse.getValue()[1]);
            iog.setFkWarehouseWarehouseId(moKeyWarehouseDestinyWarehouse.getValue()[2]);
            iog.setFkDivisionId(moKeyDivisionDestiny.getValue()[0]);
        }

        iog.setFkIogAdjustmentTypeId(moKeyIogAdjustmentType.getValue()[0]);
        iog.setDate(moDateDate.getValue());
        //iog.setQuantity(moDecQuantity.getValue());
        iog.setAuxNote(moTextNote.getValue());
        iog.setDeleted(moBoolDeleted.getValue());

        return iog;
    }
    */

    /*
    * Public methods
    */

    @Override
    public void addAllListeners() {
        moDateDate.getComponent().addFocusListener(this);
        moDecQuantity.getComponent().addFocusListener(this);
        moKeyWarehouseSourceWarehouse.addItemListener(this);
        moKeyWarehouseDestinyWarehouse.addItemListener(this);
        moKeyDivisionSource.addItemListener(this);
        moKeyDivisionDestiny.addItemListener(this);
        moKeyItemSource.addItemListener(this);
        moKeyItemDestiny.addItemListener(this);
        jbCardexSource.addActionListener(this);
        jbCardexDestiny.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        moDateDate.getComponent().removeFocusListener(this);
        moDecQuantity.getComponent().removeFocusListener(this);
        moKeyWarehouseSourceWarehouse.removeItemListener(this);
        moKeyWarehouseDestinyWarehouse.removeItemListener(this);
        moKeyDivisionSource.removeItemListener(this);
        moKeyDivisionDestiny.removeItemListener(this);
        moKeyItemSource.removeItemListener(this);
        moKeyItemDestiny.removeItemListener(this);
        jbCardexSource.removeActionListener(this);
        jbCardexDestiny.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        moFieldKeyGroupWarehouseSource.initGroup();
        moFieldKeyGroupWarehouseSource.addFieldKey(moKeyWarehouseSourceBranch, SModConsts.CU_COB, SLibConsts.UNDEFINED, null);
        moFieldKeyGroupWarehouseSource.addFieldKey(moKeyWarehouseSourceWarehouse, SModConsts.CU_WAH, SLibConsts.UNDEFINED, null);
        moFieldKeyGroupWarehouseSource.populateCatalogues();

        moFieldKeyGroupWarehouseDestiny.initGroup();
        moFieldKeyGroupWarehouseDestiny.addFieldKey(moKeyWarehouseDestinyBranch, SModConsts.CU_COB, SLibConsts.UNDEFINED, null);
        moFieldKeyGroupWarehouseDestiny.addFieldKey(moKeyWarehouseDestinyWarehouse, SModConsts.CU_WAH, SLibConsts.UNDEFINED, null);
        moFieldKeyGroupWarehouseDestiny.populateCatalogues();

        miClient.getSession().populateCatalogue(moKeyDivisionSource, SModConsts.CU_DIV, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyDivisionDestiny, SModConsts.CU_DIV, SLibConsts.UNDEFINED, null);
        reloadCatalogueItem();
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbMix) registry;

        loadFieldsValuesMix();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbMix registry = moRegistry.clone();

        if (moRegistry.isRegistryNew()) {

            registry.setFkMixTypeId(mnParamFkMixTypeId);
        }

        registry.setFkItemSourceId(moKeyItemSource.getValue()[0]);
        registry.setFkUnitSourceId(moKeyItemSource.getSelectedItem().getForeignKey()[0]);

        registry.setFkItemDestinyId(moKeyItemDestiny.getValue()[0]);
        registry.setFkUnitDestinyId(moKeyItemDestiny.getSelectedItem().getForeignKey()[0]);

        registry.setFkWarehouseSourceCompanyId(moKeyWarehouseSourceWarehouse.getValue()[0]);
        registry.setFkWarehouseSourceBranchId(moKeyWarehouseSourceWarehouse.getValue()[1]);
        registry.setFkWarehouseSourceWarehouseId(moKeyWarehouseSourceWarehouse.getValue()[2]);
        registry.setFkDivisionSourceId_n(mnParamFkMixTypeId != SModSysConsts.SS_MIX_TP_CNV ? moKeyDivisionSource.getValue()[0] : SLibConsts.UNDEFINED);

        registry.setFkWarehouseDestinyCompanyId(moKeyWarehouseDestinyWarehouse.getValue()[0]);
        registry.setFkWarehouseDestinyBranchId(moKeyWarehouseDestinyWarehouse.getValue()[1]);
        registry.setFkWarehouseDestinyWarehouseId(moKeyWarehouseDestinyWarehouse.getValue()[2]);
        registry.setFkDivisionDestinyId_n(mnParamFkMixTypeId != SModSysConsts.SS_MIX_TP_CNV ? moKeyDivisionDestiny.getValue()[0] : SLibConsts.UNDEFINED);

        registry.setDate(moDateDate.getValue());
        registry.setQuantity(moDecQuantity.getValue());
        registry.setDeleted(moBoolDeleted.getValue());
        registry.setSystem(moBoolSystem.getValue());
        registry.setAuthorized(moBoolAuthorized.getValue());

        registry.setAuxNote(moTextNote.getValue());

        registry.setAuxWarehouseSourceId(new int[] { registry.getFkWarehouseSourceCompanyId(), registry.getFkWarehouseSourceBranchId(), registry.getFkWarehouseSourceWarehouseId() });
        registry.setAuxWarehouseDestinyId(new int[] { registry.getFkWarehouseDestinyCompanyId(), registry.getFkWarehouseDestinyBranchId(), registry.getFkWarehouseDestinyWarehouseId() });

        return registry;
    }

    @Override
    public void setValue(int type, Object value) {
        switch(type) {
            case SModConsts.S_MIX:

                mnParamFkMixTypeId = (Integer) value;
                moRegistry.setFkMixTypeId(mnParamFkMixTypeId);
                moTextMixType.setValue(readMixType());
                loadFieldsValuesMix();
                break;

            default:
        }
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (!SGuiClientUtils.isPeriodOpened(miClient.getSession(), moDateDate.getValue())) {
                validation.setMessage("El período está cerrado.");
                validation.setComponent(moDateDate.getComponent());
            }
        }

        if (validation.isValid()) {
            if (moKeyDivisionSource.isEnabled() &&
                    moKeyDivisionSource.getSelectedIndex() <= 0) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + moKeyDivisionSource.getFieldName() + "'.");
                validation.setComponent(moKeyDivisionSource.getComponent());
            }
        }

        if (validation.isValid()) {
            if (moDecQuantity.getValue() <= 0) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + moDecQuantity.getFieldName() +
                    "' " + SGuiConsts.ERR_MSG_FIELD_VAL_GREAT + " 0.");
                validation.setComponent(moDecQuantity.getComponent());
            }
        }

        if (validation.isValid()) {
            if (!moRegistry.isRegistryNew() &&
                    moRegistry.getFkMixTypeId() == SModSysConsts.SS_MIX_TP_MIX_ACT &&
                    moDecXtaDestinyStock.getValue() > 0) {

                validation.setMessage("El almacén destino debe tener existencias en 0.");
                validation.setComponent(moDecQuantity.getComponent());
            }
        }

        return validation;
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof javax.swing.JComboBox && e.getStateChange() == ItemEvent.SELECTED) {
            JComboBox comboBox = (JComboBox)  e.getSource();

            if (comboBox == moKeyWarehouseSourceWarehouse) {
                actionChangedFkWarehouseSourceWarehouse();
            }
            else if (comboBox == moKeyWarehouseDestinyWarehouse) {
                actionChangedFkWarehouseDestinyWarehouse();
            }
            else if (comboBox == moKeyDivisionSource) {
                actionChangedFkDivisionSource();
            }
            else if (comboBox == moKeyDivisionDestiny) {
                actionChangedFkDivisionDestiny();
            }
            else if (comboBox == moKeyItemSource) {
                actionChangedFkItemSource();
            }
            else if (comboBox == moKeyItemDestiny) {
                actionChangedFkItemDestiny();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {

    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == moDateDate.getComponent()) {
                actionDateFocusLost();
            }
            else if (textField == moDecQuantity.getComponent()) {
                actionQuantityFocusLost();
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbCardexSource) {
                actionCardexSource();
            }
            else if (button == jbCardexDestiny) {
                actionCardexDestiny();
            }
        }
    }
}

