/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.sql.SQLException;
import java.util.Date;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import sa.gui.util.SUtilConsts;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridModel;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridPaneFormOwner;
import sa.lib.grid.SGridRow;
import sa.lib.grid.SGridUtils;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;
import som.gui.SGuiClientSessionCustom;
import som.mod.SModConsts;
import som.mod.ext.db.SExtUtils;
import som.mod.som.db.SDbMgmtTicketsSupplierItem;
import som.mod.som.db.SDbTicket;
import som.mod.som.db.SRowMgmtPayment;
import som.mod.som.db.SSomConsts;

/**
 *
 * @author Juan Barajas, Sergio Flores
 */
public class SFormMgmtSupplierItem extends SBeanForm implements SGridPaneFormOwner, ActionListener {
    
    private static final String COL_PAYED = "Pagado";

    private SDbMgmtTicketsSupplierItem moRegistry;
    private SFormTicketMgmt moFormTicketMgmt;
    private SFormTicketSeasonRegion moFormTicketSeasonRegion;
    private SGridPaneForm moGridTickets;
    private SGridPaneForm moGridPayments;

    private double mdDebit;

    private JButton jbTicketSeasonRegion;
    private JButton jbTicketPreviousStep;
    private JButton jbExportCsv;

    private JLabel jlYear;
    private JTextField jtfYear;

    protected Vector<SDbTicket> mvTicketsDelete;

    /**
     * Creates new form SFormMgmtSupplierItem
     */
    public SFormMgmtSupplierItem(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.SX_TIC_MAN, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jlWeightSource = new javax.swing.JLabel();
        moDecWeightSource = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWeightSourceUnit = new javax.swing.JLabel();
        jlCredit = new javax.swing.JLabel();
        moDecCredit = new sa.lib.gui.bean.SBeanFieldDecimal();
        moTextCurCodeCredit = new sa.lib.gui.bean.SBeanFieldText();
        jlImpurities = new javax.swing.JLabel();
        moDecImpurities = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel22 = new javax.swing.JPanel();
        jlWeightDestiny = new javax.swing.JLabel();
        moDecWeightDestiny = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWeightDestinyUnit = new javax.swing.JLabel();
        jlDebit = new javax.swing.JLabel();
        moDecDebit = new sa.lib.gui.bean.SBeanFieldDecimal();
        moTextCurCodeDebit = new sa.lib.gui.bean.SBeanFieldText();
        jlMoisture = new javax.swing.JLabel();
        moDecMoisture = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel23 = new javax.swing.JPanel();
        jlWeightPaymentSystem = new javax.swing.JLabel();
        moDecWeightPaymentSystem = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWeightPaymentSystemUnit = new javax.swing.JLabel();
        jlBalance = new javax.swing.JLabel();
        moDecBalance = new sa.lib.gui.bean.SBeanFieldDecimal();
        moTextCurCodeBalance = new sa.lib.gui.bean.SBeanFieldText();
        jlPenalty = new javax.swing.JLabel();
        moDecPenalty = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel24 = new javax.swing.JPanel();
        jlWeightPaymentUser = new javax.swing.JLabel();
        moDecWeightPaymentUser = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWeightPaymentUserUnit = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jlSeason = new javax.swing.JLabel();
        moTextSeason = new sa.lib.gui.bean.SBeanFieldText();
        jPanel18 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moTextItem = new sa.lib.gui.bean.SBeanFieldText();
        jPanel16 = new javax.swing.JPanel();
        jlProducer = new javax.swing.JLabel();
        moTextProducer = new sa.lib.gui.bean.SBeanFieldText();
        jPanel20 = new javax.swing.JPanel();
        jlFiscalId = new javax.swing.JLabel();
        moTextFiscalId = new sa.lib.gui.bean.SBeanFieldText();
        jPanel12 = new javax.swing.JPanel();
        jpTickets = new javax.swing.JPanel();
        jpPayments = new javax.swing.JPanel();

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder("Totales:"));
        jPanel17.setLayout(new java.awt.GridLayout(4, 1));

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeightSource.setText("Peso carga origen:");
        jlWeightSource.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel21.add(jlWeightSource);

        moDecWeightSource.setEditable(false);
        jPanel21.add(moDecWeightSource);

        jlWeightSourceUnit.setText("UNIT");
        jlWeightSourceUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel21.add(jlWeightSourceUnit);

        jlCredit.setText("Total a pagar:");
        jlCredit.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel21.add(jlCredit);

        moDecCredit.setEditable(false);
        jPanel21.add(moDecCredit);

        moTextCurCodeCredit.setEditable(false);
        moTextCurCodeCredit.setText("sBeanFieldText1");
        moTextCurCodeCredit.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel21.add(moTextCurCodeCredit);

        jlImpurities.setText("Impurezas pond.:");
        jlImpurities.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel21.add(jlImpurities);

        moDecImpurities.setEditable(false);
        moDecImpurities.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel21.add(moDecImpurities);

        jPanel17.add(jPanel21);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeightDestiny.setText("Peso carga destino:");
        jlWeightDestiny.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel22.add(jlWeightDestiny);

        moDecWeightDestiny.setEditable(false);
        jPanel22.add(moDecWeightDestiny);

        jlWeightDestinyUnit.setText("UNIT");
        jlWeightDestinyUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel22.add(jlWeightDestinyUnit);

        jlDebit.setText("Total pagado:");
        jlDebit.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel22.add(jlDebit);

        moDecDebit.setEditable(false);
        jPanel22.add(moDecDebit);

        moTextCurCodeDebit.setEditable(false);
        moTextCurCodeDebit.setText("sBeanFieldText1");
        moTextCurCodeDebit.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel22.add(moTextCurCodeDebit);

        jlMoisture.setText("Humedad pond.:");
        jlMoisture.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel22.add(jlMoisture);

        moDecMoisture.setEditable(false);
        moDecMoisture.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel22.add(moDecMoisture);

        jPanel17.add(jPanel22);

        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeightPaymentSystem.setText("Peso pago sistema:");
        jlWeightPaymentSystem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel23.add(jlWeightPaymentSystem);

        moDecWeightPaymentSystem.setEditable(false);
        jPanel23.add(moDecWeightPaymentSystem);

        jlWeightPaymentSystemUnit.setText("UNIT");
        jlWeightPaymentSystemUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel23.add(jlWeightPaymentSystemUnit);

        jlBalance.setText("Saldo:");
        jlBalance.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel23.add(jlBalance);

        moDecBalance.setEditable(false);
        jPanel23.add(moDecBalance);

        moTextCurCodeBalance.setEditable(false);
        moTextCurCodeBalance.setText("sBeanFieldText1");
        moTextCurCodeBalance.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel23.add(moTextCurCodeBalance);

        jlPenalty.setText("Castigo usr. pond.:");
        jlPenalty.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel23.add(jlPenalty);

        moDecPenalty.setEditable(false);
        moDecPenalty.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel23.add(moDecPenalty);

        jPanel17.add(jPanel23);

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeightPaymentUser.setText("Peso pago usr.:");
        jlWeightPaymentUser.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel24.add(jlWeightPaymentUser);

        moDecWeightPaymentUser.setEditable(false);
        jPanel24.add(moDecWeightPaymentUser);

        jlWeightPaymentUserUnit.setText("UNIT");
        jlWeightPaymentUserUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel24.add(jlWeightPaymentUserUnit);

        jPanel17.add(jPanel24);

        jPanel2.add(jPanel17, java.awt.BorderLayout.CENTER);

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del proveedor:"));
        jPanel15.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSeason.setText("Temporada:");
        jlSeason.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel19.add(jlSeason);

        moTextSeason.setEditable(false);
        moTextSeason.setText("sBeanFieldText2");
        jPanel19.add(moTextSeason);

        jPanel15.add(jPanel19);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Ítem:");
        jlItem.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel18.add(jlItem);

        moTextItem.setEditable(false);
        moTextItem.setText("sBeanFieldText2");
        moTextItem.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel18.add(moTextItem);

        jPanel15.add(jPanel18);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProducer.setText("Proveedor:");
        jlProducer.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel16.add(jlProducer);

        moTextProducer.setEditable(false);
        moTextProducer.setText("sBeanFieldText2");
        moTextProducer.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel16.add(moTextProducer);

        jPanel15.add(jPanel16);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFiscalId.setText("RFC:");
        jlFiscalId.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel20.add(jlFiscalId);

        moTextFiscalId.setEditable(false);
        moTextFiscalId.setText("sBeanFieldText2");
        moTextFiscalId.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel20.add(moTextFiscalId);

        jPanel15.add(jPanel20);

        jPanel2.add(jPanel15, java.awt.BorderLayout.WEST);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel12.setLayout(new java.awt.BorderLayout());

        jpTickets.setBorder(javax.swing.BorderFactory.createTitledBorder("Boletos:"));
        jpTickets.setPreferredSize(new java.awt.Dimension(100, 200));
        jpTickets.setLayout(new java.awt.BorderLayout());
        jPanel12.add(jpTickets, java.awt.BorderLayout.PAGE_START);
        jpTickets.getAccessibleContext().setAccessibleParent(jPanel1);

        jpPayments.setBorder(javax.swing.BorderFactory.createTitledBorder("Pagos:"));
        jpPayments.setLayout(new java.awt.BorderLayout());
        jPanel12.add(jpPayments, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel12, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JLabel jlBalance;
    private javax.swing.JLabel jlCredit;
    private javax.swing.JLabel jlDebit;
    private javax.swing.JLabel jlFiscalId;
    private javax.swing.JLabel jlImpurities;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlMoisture;
    private javax.swing.JLabel jlPenalty;
    private javax.swing.JLabel jlProducer;
    private javax.swing.JLabel jlSeason;
    private javax.swing.JLabel jlWeightDestiny;
    private javax.swing.JLabel jlWeightDestinyUnit;
    private javax.swing.JLabel jlWeightPaymentSystem;
    private javax.swing.JLabel jlWeightPaymentSystemUnit;
    private javax.swing.JLabel jlWeightPaymentUser;
    private javax.swing.JLabel jlWeightPaymentUserUnit;
    private javax.swing.JLabel jlWeightSource;
    private javax.swing.JLabel jlWeightSourceUnit;
    private javax.swing.JPanel jpPayments;
    private javax.swing.JPanel jpTickets;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecBalance;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecCredit;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecDebit;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecImpurities;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecMoisture;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecPenalty;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightDestiny;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightPaymentSystem;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightPaymentUser;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightSource;
    private sa.lib.gui.bean.SBeanFieldText moTextCurCodeBalance;
    private sa.lib.gui.bean.SBeanFieldText moTextCurCodeCredit;
    private sa.lib.gui.bean.SBeanFieldText moTextCurCodeDebit;
    private sa.lib.gui.bean.SBeanFieldText moTextFiscalId;
    private sa.lib.gui.bean.SBeanFieldText moTextItem;
    private sa.lib.gui.bean.SBeanFieldText moTextProducer;
    private sa.lib.gui.bean.SBeanFieldText moTextSeason;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 1050, 640);

        jbTicketSeasonRegion = new JButton(new javax.swing.ImageIcon(getClass().getResource("/som/gui/img/icon_std_tic_cfg.gif")));
        jbTicketSeasonRegion.setPreferredSize(new Dimension(23, 23));
        jbTicketSeasonRegion.addActionListener(this);
        jbTicketSeasonRegion.setToolTipText("Cambiar temporada y región");
        jbTicketPreviousStep = new JButton(new javax.swing.ImageIcon(getClass().getResource("/som/gui/img/icon_std_move_left.gif")));
        jbTicketPreviousStep.setPreferredSize(new Dimension(23, 23));
        jbTicketPreviousStep.addActionListener(this);
        jbTicketPreviousStep.setToolTipText("Regresar boleto al estado anterior");
        jbExportCsv = new JButton(new javax.swing.ImageIcon(getClass().getResource("/som/gui/img/icon_std_save.gif")));
        jbExportCsv.setPreferredSize(new Dimension(23, 23));
        jbExportCsv.addActionListener(this);
        jbExportCsv.setToolTipText("Exportar como CSV");

        jlYear = new JLabel("Ejercicio:");
        jlYear.setPreferredSize(new Dimension(45, 23));
        jtfYear = new JTextField();
        jtfYear.setPreferredSize(new Dimension(45, 23));
        jtfYear.setEditable(false);
        jtfYear.setFocusable(false);

        moTextSeason.setTextSettings(SGuiUtils.getLabelName(jlSeason.getText()), 25);
        moTextItem.setTextSettings(SGuiUtils.getLabelName(jlItem.getText()), 25);
        moTextProducer.setTextSettings(SGuiUtils.getLabelName(jlProducer.getText()), 25);
        moTextFiscalId.setTextSettings(SGuiUtils.getLabelName(jlFiscalId.getText()), 25);
        moDecWeightSource.setDecimalSettings(SGuiUtils.getLabelName(jlWeightSource.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecWeightDestiny.setDecimalSettings(SGuiUtils.getLabelName(jlWeightDestiny.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecWeightPaymentSystem.setDecimalSettings(SGuiUtils.getLabelName(jlWeightPaymentSystem.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecWeightPaymentUser.setDecimalSettings(SGuiUtils.getLabelName(jlWeightPaymentUser.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecCredit.setDecimalSettings(SGuiUtils.getLabelName(jlCredit.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moTextCurCodeCredit.setTextSettings(SGuiUtils.getLabelName(jlCredit.getText()), 3);
        moDecDebit.setDecimalSettings(SGuiUtils.getLabelName(jlDebit.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moTextCurCodeDebit.setTextSettings(SGuiUtils.getLabelName(jlDebit.getText()), 3);
        moDecBalance.setDecimalSettings(SGuiUtils.getLabelName(jlBalance.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moTextCurCodeBalance.setTextSettings(SGuiUtils.getLabelName(jlBalance.getText()), 3);
        moDecImpurities.setDecimalSettings(SGuiUtils.getLabelName(jlImpurities.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecImpurities.setDecimalFormat(SLibUtils.DecimalFormatPercentage2D);
        moDecMoisture.setDecimalSettings(SGuiUtils.getLabelName(jlMoisture.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecMoisture.setDecimalFormat(SLibUtils.DecimalFormatPercentage2D);
        moDecPenalty.setDecimalSettings(SGuiUtils.getLabelName(jlPenalty.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecPenalty.setDecimalFormat(SLibUtils.DecimalFormatPercentage2D);

        moFields.addField(moTextSeason);
        moFields.addField(moTextItem);
        moFields.addField(moTextProducer);
        moFields.addField(moTextFiscalId);
        moFields.addField(moDecWeightSource);
        moFields.addField(moDecWeightDestiny);
        moFields.addField(moDecWeightPaymentSystem);
        moFields.addField(moDecWeightPaymentUser);
        moFields.addField(moDecCredit);
        moFields.addField(moDecDebit);
        moFields.addField(moDecBalance);
        moFields.addField(moDecImpurities);
        moFields.addField(moDecMoisture);
        moFields.addField(moDecPenalty);

        moFields.setFormButton(jbSave);
        
        jlWeightSourceUnit.setText(SSomConsts.KG);
        jlWeightDestinyUnit.setText(SSomConsts.KG);
        jlWeightPaymentSystemUnit.setText(SSomConsts.KG);
        jlWeightPaymentUserUnit.setText(SSomConsts.KG);

        mvTicketsDelete = new Vector<>();

        moGridTickets = new SGridPaneForm(miClient, SModConsts.SX_TIC_MAN_SUP, SLibConsts.UNDEFINED, "Boletos x proveedor x ítem") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, true, false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                SGridColumnForm[] columns = new SGridColumnForm[12];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_INT_RAW, "Boleto", 50);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha entrada", 100);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Placas", 75);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Peso origen (" + SSomConsts.KG + ")", 120);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Peso destino (" + SSomConsts.KG + ")", 120);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_PER_2D, "Impurezas", 75);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_PER_2D, "Humedad", 75);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_PER_2D, "Castigo usr", 75);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Peso pago usr (" + SSomConsts.KG + ")", 120);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Precio ton $", 80);
                columns[col] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_L, COL_PAYED, 50);
                columns[col++].setEditable(true);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Total $");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        moGridPayments = new SGridPaneForm(miClient, SModConsts.SX_TIC_DPS_PAY, SLibConsts.UNDEFINED, "Pagos x proveedor x ítem") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                SGridColumnForm[] columns = new SGridColumnForm[25];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_REG_PER, "Período póliza");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Centro contable");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Sucursal empresa");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_REG_NUM, "Folio póliza");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha póliza");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ACC, "No. cuenta contable");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Cuenta contable");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Concepto");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Debe $");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Haber $");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_EXC_RATE, "T. cambio");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Debe moneda $");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Haber moneda $");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CUR, "Moneda");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Sistema");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Subclase movimiento");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ACC, "No. centro costo");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Centro costo");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Eliminado");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, "Usr. creación");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, "Creación");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, "Usr. modificación");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, "Modificación");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, "Usr. Eliminación");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, "Eliminación");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        moFormTicketMgmt = new SFormTicketMgmt(miClient, "Boleto");
        moFormTicketSeasonRegion = new SFormTicketSeasonRegion(miClient, "Temporada y región del boleto");
        moGridTickets.setForm(moFormTicketMgmt);
        moGridTickets.setPaneFormOwner(this);
        moGridTickets.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(jbTicketSeasonRegion);
        moGridTickets.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(jbTicketPreviousStep);
        moGridTickets.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(jbExportCsv);
        moGridPayments.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(jlYear);
        moGridPayments.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(jtfYear);

        jpTickets.add(moGridTickets, BorderLayout.CENTER);
        jpPayments.add(moGridPayments, BorderLayout.CENTER);
        
        mvFormGrids.add(moGridTickets);
        mvFormGrids.add(moGridPayments);
    }

    private void populateTickets() throws SQLException {
        Vector<SGridRow> rows = new Vector<>();

        for (SDbTicket row : moRegistry.getChildTickets()) {
            rows.add(row);
        }

        moGridTickets.populateGrid(rows);
    }

    private void populatePayments() throws SQLException {
        Vector<SGridRow> rows = new Vector<>();

        jtfYear.setText("" + moRegistry.getXtaYear());

        mdDebit = 0;

        for (SGridRow row : SExtUtils.polulatePayments(miClient, moRegistry.getXtaYear(), moRegistry.getXtaFkExternalProducerId())) {
            mdDebit += ((SRowMgmtPayment) row).getDebit();

            rows.add(row);
        }

        moGridPayments.populateGrid(rows);
    }

    private void updateTickets() {
        SDbTicket registry;
        SGridRow[] gridRows = moGridTickets.getSelectedGridRows();
        SGridModel oGridModel = moGridTickets.getModel();

        for (SDbTicket ticket : moRegistry.getChildTickets()) {
            for (int i = 0; i < gridRows.length; i++) {
                registry = (SDbTicket) gridRows[i];

                if (registry.getPkTicketId() == ticket.getPkTicketId()) {
                    if (registry.getFkProducerId() != ticket.getFkProducerId() || registry.getFkRegionId_n() != ticket.getFkRegionId_n()) {
                        mvTicketsDelete.add((SDbTicket) gridRows[i]);

                        oGridModel.getGridRows().remove(oGridModel.getGridRows().indexOf(gridRows[i]));
                        oGridModel.renderGridRows();

                        moGridTickets.setSelectedGridRow(oGridModel.getRowCount() > 0 ? 0 : - 1);

                        miClient.getSession().notifySuscriptors(SModConsts.SX_TIC_MAN);
                        miClient.getSession().notifySuscriptors(SModConsts.SX_TIC_MAN_SUP);
                        miClient.getSession().notifySuscriptors(SModConsts.S_TIC);
                        break;
                    }
                }
            }
        }

        moRegistry.getChildTickets().clear();

        for (SGridRow row : moGridTickets.getModel().getGridRows()) {
            moRegistry.getChildTickets().add((SDbTicket) row);
        }

        setTotals();
    }

    private void setTotals() {
        moRegistry.computeTicketValue(miClient.getSession());

        moDecWeightSource.setValue(moRegistry.getTotalWeightSource());
        moDecWeightDestiny.setValue(moRegistry.getTotalWeightDestiny());
        moDecWeightPaymentSystem.setValue(moRegistry.getTotalWeightPaymentSystem());
        moDecWeightPaymentUser.setValue(moRegistry.getTotalWeightPaymentUser());
        moDecDebit.setValue(mdDebit);
        moDecCredit.setValue(moRegistry.getTotalCredit());
        moDecBalance.setValue(moRegistry.getTotalCredit() - mdDebit);

        moDecImpurities.setValue(moRegistry.getXtaTotalImpurities());
        moDecMoisture.setValue(moRegistry.getXtaTotalMoisture());
        moDecPenalty.setValue(moRegistry.getXtaTotalPenalty());
    }

    private void actionTicketSeasonRegion() {
        if (jbTicketSeasonRegion.isEnabled()) {
            int row = moGridTickets.getTable().getSelectedRow();

            if (moGridTickets.getTable().getSelectedRowCount() != 1) {
                miClient.showMsgBoxInformation(SGridConsts.MSG_SELECT_ROW);
            }
            else {
                SGridModel oGridModel = moGridTickets.getModel();
                SGridRow gridRow = moGridTickets.getSelectedGridRow();

                try {
                    moFormTicketSeasonRegion.setRegistry((SDbTicket) gridRow);
                    moFormTicketSeasonRegion.setFormVisible(true);

                    if (moFormTicketSeasonRegion.getFormResult() == SGuiConsts.FORM_RESULT_OK) {
                        gridRow = (SGridRow) moFormTicketSeasonRegion.getRegistry();

                        oGridModel.getGridRows().setElementAt(gridRow, moGridTickets.getTable().convertRowIndexToModel(row));
                        oGridModel.renderGridRows();

                        moGridTickets.setSelectedGridRow(row);

                        updateTickets();
                    }
                }
                catch (Exception e) {
                    SLibUtils.showException(this, e);
                }
            }
        }
    }

    private void actionTicketPreviousStep() {
        SDbRegistry registry;
        SDbTicket ticket;

        if (jbTicketPreviousStep.isEnabled() && moGridTickets.getTable().getSelectedRow() >= 0) {
            int[] rows = moGridTickets.getTable().getSelectedRows();

            SGridModel oGridModel = moGridTickets.getModel();
            SGridRow[] gridRows = moGridTickets.getSelectedGridRows();

            try {

                if (miClient.showMsgBoxConfirm("¿Desea pasar el boleto al estado anterior?") == JOptionPane.YES_OPTION) {

                    for (int i = 0; i < gridRows.length; i++) {
                        registry = (SDbTicket) gridRows[i];
                        ticket = (SDbTicket) registry;

                        ticket.movePrevious(miClient.getSession());

                        oGridModel.getGridRows().remove(oGridModel.getGridRows().indexOf(gridRows[i]));
                        oGridModel.renderGridRows();

                        moGridTickets.setSelectedGridRow(rows[i] < oGridModel.getRowCount() ? rows[i] : oGridModel.getRowCount() - 1);

                        updateTickets();

                        miClient.getSession().notifySuscriptors(SModConsts.SX_TIC_MAN);
                        miClient.getSession().notifySuscriptors(SModConsts.SX_TIC_MAN_SUP);
                        miClient.getSession().notifySuscriptors(SModConsts.S_TIC);
                    }
                }
            }
            catch (SQLException e) {
                SLibUtils.showException(this, e);
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
        }
    }

    private void actionExportCsv() {
        int col = 0;
        int colType = 0;
        int colModel = 0;
        int rowModel = 0;
        int row = 0;
        String buffer = "";
        SDbTicket registry;

        moGridTickets.getClient().getFileChooser().setSelectedFile(new File(getTitle() + " " + SLibUtils.FileDateFormatDatetime.format(new Date()) + ".csv"));
        if (moGridTickets.getClient().getFileChooser().showSaveDialog(moGridTickets.getClient().getFrame()) == JFileChooser.APPROVE_OPTION) {
            File file = new File(moGridTickets.getClient().getFileChooser().getSelectedFile().getAbsolutePath());

            try {
                BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));

                buffer += "\"" + SLibUtils.textToAscii("Temporada") + "\",";
                buffer += "\"" + SLibUtils.textToAscii("Región") + "\",";
                buffer += "\"" + SLibUtils.textToAscii("Proveedor") + "\",";
                buffer += "\"" + SLibUtils.textToAscii("Ítem") + "\",";
                buffer += "\"" + SLibUtils.textToAscii("Chofer") + "\"";

                for (col = 0; col < moGridTickets.getTable().getColumnCount(); col++) {
                    colModel = moGridTickets.getTable().convertColumnIndexToModel(col);

                    if (!moGridTickets.getModel().getGridColumns().get(colModel).getColumnTitle().equalsIgnoreCase(COL_PAYED)) {
                        buffer += (buffer.length() == 0 ? "" : ",") + "\"" + SLibUtils.textToAscii(moGridTickets.getModel().getGridColumns().get(colModel).getColumnTitle()) + "\"";
                    }
                }
                bw.write(buffer);

                for (row = 0; row < moGridTickets.getTable().getRowCount(); row++) {
                    buffer = "";

                    SGridRow gridRow = moGridTickets.getModel().getGridRows().get(row);
                    registry = (SDbTicket) gridRow;

                    buffer += "\"" + SLibUtils.textToAscii(( moTextSeason.getText()).replaceAll("\"", "\"\"")) + "\",";
                    buffer += "\"" + SLibUtils.textToAscii(( registry.getXtaRegion() == null ? SUtilConsts.NON_APPLYING : registry.getXtaRegion()).replaceAll("\"", "\"\"")) + "\",";
                    buffer += "\"" + SLibUtils.textToAscii(( moTextProducer.getText()).replaceAll("\"", "\"\"")) + "\",";
                    buffer += "\"" + SLibUtils.textToAscii(( moTextItem.getText()).replaceAll("\"", "\"\"")) + "\",";
                    buffer += "\"" + SLibUtils.textToAscii(( registry.getDriver()).replaceAll("\"", "\"\"")) + "\",";

                    for (col = 0; col < moGridTickets.getTable().getColumnCount(); col++) {
                        buffer += (col == 0 ? "" : !moGridTickets.getModel().getGridColumns().get(colModel).getColumnTitle().equalsIgnoreCase(COL_PAYED) ? "," : "");
                        rowModel = moGridTickets.getTable().convertRowIndexToModel(row);
                        colModel = moGridTickets.getTable().convertColumnIndexToModel(col);

                        if (moGridTickets.getModel().getValueAt(rowModel, colModel) != null) {
                            colType = moGridTickets.getModel().getGridColumns().get(colModel).getColumnType();

                            switch (SGridUtils.getDataType(colType)) {
                                case SLibConsts.DATA_TYPE_BOOL:
                                    if (!moGridTickets.getModel().getGridColumns().get(colModel).getColumnTitle().equalsIgnoreCase(COL_PAYED)) {
                                        buffer += (((Boolean) moGridTickets.getModel().getValueAt(rowModel, colModel)).booleanValue() ? "1" : "0");
                                    }
                                    break;
                                case SLibConsts.DATA_TYPE_INT:
                                    buffer += ((Number) moGridTickets.getModel().getValueAt(rowModel, colModel)).longValue();
                                    break;
                                case SLibConsts.DATA_TYPE_DEC:
                                    switch (colType) {
                                        case SGridConsts.COL_TYPE_DEC_PER_0D:
                                        case SGridConsts.COL_TYPE_DEC_PER_2D:
                                        case SGridConsts.COL_TYPE_DEC_PER_4D:
                                        case SGridConsts.COL_TYPE_DEC_PER_8D:
                                            buffer += ((((Number) moGridTickets.getModel().getValueAt(rowModel, colModel)).doubleValue()) * 100);
                                            break;
                                        default:
                                            buffer += ((Number) moGridTickets.getModel().getValueAt(rowModel, colModel)).doubleValue();
                                    }
                                    break;
                                case SLibConsts.DATA_TYPE_TEXT:
                                    buffer += "\"" + SLibUtils.textToAscii(((String) moGridTickets.getModel().getValueAt(rowModel, colModel)).replaceAll("\"", "\"\"")) + "\"";
                                    break;
                                case SLibConsts.DATA_TYPE_DATE:
                                    switch (colType) {
                                        case SGridConsts.COL_TYPE_DATE:
                                            buffer += SLibUtils.CsvFormatDate.format((Date) moGridTickets.getModel().getValueAt(rowModel, colModel));
                                            break;
                                        case SGridConsts.COL_TYPE_DATE_DATETIME:
                                            buffer += SLibUtils.CsvFormatDatetime.format((Date) moGridTickets.getModel().getValueAt(rowModel, colModel));
                                            break;
                                        case SGridConsts.COL_TYPE_DATE_TIME:
                                            buffer += SLibUtils.CsvFormatTime.format((Date) moGridTickets.getModel().getValueAt(rowModel, colModel));
                                            break;
                                        default:
                                    }
                                    break;
                                default:
                                    buffer += "\"?\"";
                            }
                        }
                    }
                    bw.write("\n");
                    bw.write(SLibUtils.textToAscii(buffer));
                }

                bw.flush();
                bw.close();

                moGridTickets.getClient().showMsgBoxInformation(SGuiConsts.MSG_FILE_SAVED + file.getAbsolutePath());
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
        }
    }

    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {
        try {
            populateTickets();
            populatePayments();
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbMgmtTicketsSupplierItem) registry;
        mvTicketsDelete.clear();

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moTextSeason.setValue(moRegistry.getXtaSeason());
        moTextItem.setValue(moRegistry.getXtaItem());
        moTextProducer.setValue(moRegistry.getXtaProducer());
        moTextFiscalId.setValue(moRegistry.getXtaProducerFiscalId());

        setTotals();

        moTextCurCodeCredit.setValue(((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getLocalCurrencyCode());
        moTextCurCodeDebit.setValue(((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getLocalCurrencyCode());
        moTextCurCodeBalance.setValue(((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getLocalCurrencyCode());

        setFormEditable(true);

        moGridTickets.setRowButtonsEnabled(false, moRegistry.isLaboratory() && !moRegistry.isMfgOutsourcing(), false);
        jbTicketSeasonRegion.setEnabled(moRegistry.isLaboratory() && !moRegistry.isMfgOutsourcing());

        moTextSeason.setEditable(false);
        moTextItem.setEditable(false);
        moTextProducer.setEditable(false);
        moTextFiscalId.setEditable(false);
        moDecWeightSource.setEditable(false);
        moDecWeightDestiny.setEditable(false);
        moDecWeightPaymentSystem.setEditable(false);
        moDecWeightPaymentUser.setEditable(false);
        moDecCredit.setEditable(false);
        moDecDebit.setEditable(false);
        moDecBalance.setEditable(false);
        moDecImpurities.setEditable(false);
        moDecMoisture.setEditable(false);
        moDecPenalty.setEditable(false);

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbMgmtTicketsSupplierItem registry = (SDbMgmtTicketsSupplierItem) moRegistry.clone();

        if (registry.isRegistryNew()) { }

        registry.getChildTickets().clear();

        for (SGridRow row : moGridTickets.getModel().getGridRows()) {
            registry.getChildTickets().add((SDbTicket) row);
        }

        for (SDbTicket scaleTicket : mvTicketsDelete) {
            registry.getChildTickets().add(scaleTicket);
        }

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbTicketSeasonRegion) {
                actionTicketSeasonRegion();
            }
            else if (button == jbTicketPreviousStep) {
                actionTicketPreviousStep();
            }
            else if (button == jbExportCsv) {
                actionExportCsv();
            }
        }
    }

    @Override
    public void notifyRowNew(int i, int i1, int i2, SGridRow sgr) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void notifyRowEdit(int i, int i1, int i2, SGridRow gridRow) {
        updateTickets();
    }

    @Override
    public void notifyRowDelete(int i, int i1, int i2, SGridRow sgr) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
