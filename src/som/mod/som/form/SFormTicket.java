/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;
import som.gui.SGuiClientUtils;
import som.mod.SModConsts;
import som.mod.SModSysConsts;
import som.mod.som.db.SDbItem;
import som.mod.som.db.SDbTicket;
import som.mod.som.db.SDbTicketNote;
import som.mod.som.db.SSomConsts;
import som.mod.som.db.SSomUtils;

/**
 *
 * @author Juan Barajas, Sergio Flores
 */
public class SFormTicket extends SBeanForm implements ActionListener, ItemListener, FocusListener {

    private Connection moConnectionRevuelta;

    private SDbTicket moRegistry;
    private SDbItem moItem;
    private int mnSeasonId;
    private int mnRegionId;
    private boolean mbIsTared;
    private boolean mbIsPackage;
    private boolean mbIsLaboratory;
    private boolean mbIsSaveSend;
    private boolean mbIsRevImport1;
    private boolean mbIsRevImport2;
    private boolean mbIsEnableScale;

    private boolean mbFirstTime;
    private JButton jbSaveSend;

    /**
     * Creates new form SFormTicket
     */
    public SFormTicket(SGuiClient client, String title, int formSubType) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.S_TIC, formSubType, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jlScale = new javax.swing.JLabel();
        moKeyScale = new sa.lib.gui.bean.SBeanFieldKey();
        moTextScale = new sa.lib.gui.bean.SBeanFieldText();
        moBoolTared = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel4 = new javax.swing.JPanel();
        jlTicket = new javax.swing.JLabel();
        moIntTicket = new sa.lib.gui.bean.SBeanFieldInteger();
        jlDummy = new javax.swing.JLabel();
        jbImportTicket = new javax.swing.JButton();
        jbCleanTicket = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jlProducer = new javax.swing.JLabel();
        moKeyProducer = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel12 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moKeyItem = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel6 = new javax.swing.JPanel();
        jlPlates = new javax.swing.JLabel();
        moTextPlates = new sa.lib.gui.bean.SBeanFieldText();
        jPanel14 = new javax.swing.JPanel();
        jlPlatesCage = new javax.swing.JLabel();
        moTextPlatesCage = new sa.lib.gui.bean.SBeanFieldText();
        jPanel3 = new javax.swing.JPanel();
        jlDriver = new javax.swing.JLabel();
        moTextDriver = new sa.lib.gui.bean.SBeanFieldText();
        jPanel7 = new javax.swing.JPanel();
        jlWeightSource = new javax.swing.JLabel();
        moDecWeightSource = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWeightSourceUnit = new javax.swing.JLabel();
        moBoolWeightSourceAvailable = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel9 = new javax.swing.JPanel();
        jlWeightDestinyArrival = new javax.swing.JLabel();
        moDecWeightDestinyArrival = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWeightDestinyArrivalUnit = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jlWeightDestinyDeparture = new javax.swing.JLabel();
        moDecWeightDestinyDeparture = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWeightDestinyDepartureUnit = new javax.swing.JLabel();
        jbImportTareTicket = new javax.swing.JButton();
        jbCleanTare = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jlDatetimeArrival = new javax.swing.JLabel();
        moDatetimeArrival = new sa.lib.gui.bean.SBeanFieldDatetime();
        jPanel11 = new javax.swing.JPanel();
        jlDatetimeDeparture = new javax.swing.JLabel();
        moDatetimeDeparture = new sa.lib.gui.bean.SBeanFieldDatetime();
        jPanel16 = new javax.swing.JPanel();
        jlPackageQuantityArrival = new javax.swing.JLabel();
        moDecPackageQuantityArrival = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlPackageQuantityArrivalUnit = new javax.swing.JLabel();
        jbPackageQuantityArrival = new javax.swing.JButton();
        jPanel18 = new javax.swing.JPanel();
        jlPackageEmptyQuantityArrival = new javax.swing.JLabel();
        moDecPackageEmptyQuantityArrival = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlPackageEmptyQuantityArrivalUnit = new javax.swing.JLabel();
        jbPackageEmptyQuantityArrival = new javax.swing.JButton();
        jPanel17 = new javax.swing.JPanel();
        jlPackageQuantityDeparture = new javax.swing.JLabel();
        moDecPackageQuantityDeparture = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlPackageQuantityDepartureUnit = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        jlPackageEmptyQuantityDeparture = new javax.swing.JLabel();
        moDecPackageEmptyQuantityDeparture = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlPackageEmptyQuantityDepartureUnit = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        jlWeightAverage = new javax.swing.JLabel();
        moDecWeightAverage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWeightAverageUnit = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jlNote = new javax.swing.JLabel();
        moTextNote = new sa.lib.gui.bean.SBeanFieldText();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(18, 1, 0, 5));

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlScale.setForeground(new java.awt.Color(51, 51, 255));
        jlScale.setText("Báscula:*");
        jlScale.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel13.add(jlScale);

        moKeyScale.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel13.add(moKeyScale);

        moTextScale.setEditable(false);
        moTextScale.setText("sBeanFieldText1");
        moTextScale.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel13.add(moTextScale);

        moBoolTared.setText("Boleto tarado");
        moBoolTared.setEditable(false);
        jPanel13.add(moBoolTared);

        jPanel2.add(jPanel13);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTicket.setText("Boleto:*");
        jlTicket.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel4.add(jlTicket);
        jPanel4.add(moIntTicket);

        jlDummy.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel4.add(jlDummy);

        jbImportTicket.setText("Importar Revuelta XXI ");
        jbImportTicket.setToolTipText("Importar de Revuelta XXI (primer pesada)");
        jbImportTicket.setPreferredSize(new java.awt.Dimension(165, 23));
        jPanel4.add(jbImportTicket);

        jbCleanTicket.setText("Limpiar");
        jbCleanTicket.setToolTipText("Limpiar datos primer pesada");
        jbCleanTicket.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel4.add(jbCleanTicket);

        jPanel2.add(jPanel4);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProducer.setText("Proveedor:*");
        jlProducer.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel10.add(jlProducer);

        moKeyProducer.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel10.add(moKeyProducer);

        jPanel2.add(jPanel10);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Ítem:*");
        jlItem.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel12.add(jlItem);

        moKeyItem.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel12.add(moKeyItem);

        jPanel2.add(jPanel12);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPlates.setText("Placas:*");
        jlPlates.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel6.add(jlPlates);

        moTextPlates.setText("sBeanFieldText2");
        jPanel6.add(moTextPlates);

        jPanel2.add(jPanel6);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPlatesCage.setText("Placas caja:");
        jlPlatesCage.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel14.add(jlPlatesCage);

        moTextPlatesCage.setText("sBeanFieldText2");
        jPanel14.add(moTextPlatesCage);

        jPanel2.add(jPanel14);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDriver.setText("Chofer:*");
        jlDriver.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel3.add(jlDriver);

        moTextDriver.setText("sBeanFieldText2");
        moTextDriver.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel3.add(moTextDriver);

        jPanel2.add(jPanel3);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeightSource.setText("Peso carga origen:*");
        jlWeightSource.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel7.add(jlWeightSource);
        jPanel7.add(moDecWeightSource);

        jlWeightSourceUnit.setText("UNIT");
        jlWeightSourceUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel7.add(jlWeightSourceUnit);

        moBoolWeightSourceAvailable.setText("Peso carga origen disponible");
        moBoolWeightSourceAvailable.setPreferredSize(new java.awt.Dimension(165, 23));
        jPanel7.add(moBoolWeightSourceAvailable);

        jPanel2.add(jPanel7);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeightDestinyArrival.setText("Peso entrada:*");
        jlWeightDestinyArrival.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel9.add(jlWeightDestinyArrival);
        jPanel9.add(moDecWeightDestinyArrival);

        jlWeightDestinyArrivalUnit.setText("UNIT");
        jlWeightDestinyArrivalUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel9.add(jlWeightDestinyArrivalUnit);

        jPanel2.add(jPanel9);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeightDestinyDeparture.setText("Peso salida:*");
        jlWeightDestinyDeparture.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel15.add(jlWeightDestinyDeparture);
        jPanel15.add(moDecWeightDestinyDeparture);

        jlWeightDestinyDepartureUnit.setText("UNIT");
        jlWeightDestinyDepartureUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel15.add(jlWeightDestinyDepartureUnit);

        jbImportTareTicket.setText("Importar Revuelta XXI ");
        jbImportTareTicket.setToolTipText("Importar de Revuelta XXI (segunda pesada)");
        jbImportTareTicket.setPreferredSize(new java.awt.Dimension(165, 23));
        jPanel15.add(jbImportTareTicket);

        jbCleanTare.setText("Limpiar");
        jbCleanTare.setToolTipText("Limpiar datos segunda pesada");
        jbCleanTare.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel15.add(jbCleanTare);

        jPanel2.add(jPanel15);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDatetimeArrival.setText("Fecha-hora entrada:*");
        jlDatetimeArrival.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel8.add(jlDatetimeArrival);
        jPanel8.add(moDatetimeArrival);

        jPanel2.add(jPanel8);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDatetimeDeparture.setText("Fecha-hora salida:*");
        jlDatetimeDeparture.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel11.add(jlDatetimeDeparture);
        jPanel11.add(moDatetimeDeparture);

        jPanel2.add(jPanel11);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPackageQuantityArrival.setText("Cant. empaque entrada:");
        jlPackageQuantityArrival.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel16.add(jlPackageQuantityArrival);
        jPanel16.add(moDecPackageQuantityArrival);

        jlPackageQuantityArrivalUnit.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel16.add(jlPackageQuantityArrivalUnit);

        jbPackageQuantityArrival.setText("Modificar");
        jbPackageQuantityArrival.setToolTipText("Modificar cantidad entrada empaque ");
        jbPackageQuantityArrival.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jbPackageQuantityArrival.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel16.add(jbPackageQuantityArrival);

        jPanel2.add(jPanel16);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPackageEmptyQuantityArrival.setText("Cant. empaque vacío entrada:");
        jlPackageEmptyQuantityArrival.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel18.add(jlPackageEmptyQuantityArrival);
        jPanel18.add(moDecPackageEmptyQuantityArrival);

        jlPackageEmptyQuantityArrivalUnit.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel18.add(jlPackageEmptyQuantityArrivalUnit);

        jbPackageEmptyQuantityArrival.setText("Modificar");
        jbPackageEmptyQuantityArrival.setToolTipText("Modificar cantidad entrada empaque vacío");
        jbPackageEmptyQuantityArrival.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jbPackageEmptyQuantityArrival.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel18.add(jbPackageEmptyQuantityArrival);

        jPanel2.add(jPanel18);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPackageQuantityDeparture.setText("Cant. empaque salida:");
        jlPackageQuantityDeparture.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel17.add(jlPackageQuantityDeparture);
        jPanel17.add(moDecPackageQuantityDeparture);

        jlPackageQuantityDepartureUnit.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel17.add(jlPackageQuantityDepartureUnit);

        jPanel2.add(jPanel17);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPackageEmptyQuantityDeparture.setText("Cant. empaque vacío salida:");
        jlPackageEmptyQuantityDeparture.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel19.add(jlPackageEmptyQuantityDeparture);
        jPanel19.add(moDecPackageEmptyQuantityDeparture);

        jlPackageEmptyQuantityDepartureUnit.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel19.add(jlPackageEmptyQuantityDepartureUnit);

        jPanel2.add(jPanel19);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeightAverage.setText("Peso promedio:");
        jlWeightAverage.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel20.add(jlWeightAverage);
        jPanel20.add(moDecWeightAverage);

        jlWeightAverageUnit.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel20.add(jlWeightAverageUnit);

        jPanel2.add(jPanel20);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNote.setText("Observaciones:");
        jlNote.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel5.add(jlNote);

        moTextNote.setText("sBeanFieldText2");
        moTextNote.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel5.add(moTextNote);

        jPanel2.add(jPanel5);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        attendWindowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        attendWindowClosed();
    }//GEN-LAST:event_formWindowClosed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCleanTare;
    private javax.swing.JButton jbCleanTicket;
    private javax.swing.JButton jbImportTareTicket;
    private javax.swing.JButton jbImportTicket;
    private javax.swing.JButton jbPackageEmptyQuantityArrival;
    private javax.swing.JButton jbPackageQuantityArrival;
    private javax.swing.JLabel jlDatetimeArrival;
    private javax.swing.JLabel jlDatetimeDeparture;
    private javax.swing.JLabel jlDriver;
    private javax.swing.JLabel jlDummy;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlNote;
    private javax.swing.JLabel jlPackageEmptyQuantityArrival;
    private javax.swing.JLabel jlPackageEmptyQuantityArrivalUnit;
    private javax.swing.JLabel jlPackageEmptyQuantityDeparture;
    private javax.swing.JLabel jlPackageEmptyQuantityDepartureUnit;
    private javax.swing.JLabel jlPackageQuantityArrival;
    private javax.swing.JLabel jlPackageQuantityArrivalUnit;
    private javax.swing.JLabel jlPackageQuantityDeparture;
    private javax.swing.JLabel jlPackageQuantityDepartureUnit;
    private javax.swing.JLabel jlPlates;
    private javax.swing.JLabel jlPlatesCage;
    private javax.swing.JLabel jlProducer;
    private javax.swing.JLabel jlScale;
    private javax.swing.JLabel jlTicket;
    private javax.swing.JLabel jlWeightAverage;
    private javax.swing.JLabel jlWeightAverageUnit;
    private javax.swing.JLabel jlWeightDestinyArrival;
    private javax.swing.JLabel jlWeightDestinyArrivalUnit;
    private javax.swing.JLabel jlWeightDestinyDeparture;
    private javax.swing.JLabel jlWeightDestinyDepartureUnit;
    private javax.swing.JLabel jlWeightSource;
    private javax.swing.JLabel jlWeightSourceUnit;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolTared;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolWeightSourceAvailable;
    private sa.lib.gui.bean.SBeanFieldDatetime moDatetimeArrival;
    private sa.lib.gui.bean.SBeanFieldDatetime moDatetimeDeparture;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecPackageEmptyQuantityArrival;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecPackageEmptyQuantityDeparture;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecPackageQuantityArrival;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecPackageQuantityDeparture;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightAverage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightDestinyArrival;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightDestinyDeparture;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightSource;
    private sa.lib.gui.bean.SBeanFieldInteger moIntTicket;
    private sa.lib.gui.bean.SBeanFieldKey moKeyItem;
    private sa.lib.gui.bean.SBeanFieldKey moKeyProducer;
    private sa.lib.gui.bean.SBeanFieldKey moKeyScale;
    private sa.lib.gui.bean.SBeanFieldText moTextDriver;
    private sa.lib.gui.bean.SBeanFieldText moTextNote;
    private sa.lib.gui.bean.SBeanFieldText moTextPlates;
    private sa.lib.gui.bean.SBeanFieldText moTextPlatesCage;
    private sa.lib.gui.bean.SBeanFieldText moTextScale;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 960, 600);
        
        jbSaveSend = new JButton("Guardar y enviar");
        jbSaveSend.setPreferredSize(new Dimension(175, 23));
        jbSaveSend.addActionListener(this);
        jbSaveSend.setToolTipText("Guardar y enviar al estado siguiente");

        moKeyScale.setKeySettings(miClient, SGuiUtils.getLabelName(jlScale.getText()), true);
        moIntTicket.setIntegerSettings(SGuiUtils.getLabelName(jlTicket.getText()), SGuiConsts.GUI_TYPE_INT_RAW, true);
        moKeyItem.setKeySettings(miClient, SGuiUtils.getLabelName(jlItem.getText()), true);
        moKeyProducer.setKeySettings(miClient, SGuiUtils.getLabelName(jlProducer.getText()), true);
        moTextPlates.setTextSettings(SGuiUtils.getLabelName(jlPlates.getText()), 25);
        moTextPlatesCage.setTextSettings(SGuiUtils.getLabelName(jlPlatesCage.getText()), 25, 0);
        moTextDriver.setTextSettings(SGuiUtils.getLabelName(jlDriver.getText()), 150);
        moDecWeightSource.setDecimalSettings(SGuiUtils.getLabelName(jlWeightSource.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moBoolWeightSourceAvailable.setBooleanSettings(SGuiUtils.getLabelName(moBoolWeightSourceAvailable.getText()), false);
        moDecWeightDestinyArrival.setDecimalSettings(SGuiUtils.getLabelName(jlWeightDestinyArrival.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moDecWeightDestinyDeparture.setDecimalSettings(SGuiUtils.getLabelName(jlWeightDestinyDeparture.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moDecWeightAverage.setDecimalSettings(SGuiUtils.getLabelName(jlWeightAverage.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDatetimeArrival.setDateSettings(miClient, SGuiUtils.getLabelName(jlDatetimeArrival.getText()), true);
        moDatetimeDeparture.setDateSettings(miClient, SGuiUtils.getLabelName(jlDatetimeDeparture.getText()), true);
        moDecPackageQuantityArrival.setDecimalSettings(SGuiUtils.getLabelName(jlPackageQuantityArrival.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecPackageEmptyQuantityArrival.setDecimalSettings(SGuiUtils.getLabelName(jlPackageEmptyQuantityArrival.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecPackageQuantityDeparture.setDecimalSettings(SGuiUtils.getLabelName(jlPackageQuantityDeparture.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecPackageEmptyQuantityDeparture.setDecimalSettings(SGuiUtils.getLabelName(jlPackageEmptyQuantityDeparture.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moTextNote.setTextSettings(SGuiUtils.getLabelName(jlNote.getText()), 255, 0);

        moFields.addField(moKeyScale);
        moFields.addField(moIntTicket);
        moFields.addField(moKeyProducer);
        moFields.addField(moKeyItem);
        moFields.addField(moTextPlates);
        moFields.addField(moTextPlatesCage);
        moFields.addField(moTextDriver);
        moFields.addField(moBoolWeightSourceAvailable);
        moFields.addField(moDecWeightSource);
        moFields.addField(moDecWeightDestinyArrival);
        moFields.addField(moDecWeightDestinyDeparture);
        moFields.addField(moDecWeightAverage);
        moFields.addField(moDatetimeArrival);
        moFields.addField(moDatetimeDeparture);
        moFields.addField(moDecPackageQuantityArrival);
        moFields.addField(moDecPackageEmptyQuantityArrival);
        moFields.addField(moDecPackageQuantityDeparture);
        moFields.addField(moDecPackageEmptyQuantityDeparture);
        moFields.addField(moTextNote);

        moFields.setFormButton(jbSave);

        jpCommandCenter.add(jbSaveSend);
        
        jlWeightSourceUnit.setText(SSomConsts.KG);
        jlWeightDestinyArrivalUnit.setText(SSomConsts.KG);
        jlWeightDestinyDepartureUnit.setText(SSomConsts.KG);
    }

    private void attendWindowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            
            moConnectionRevuelta = SSomUtils.openConnectionRevueltaJdbc(miClient.getSession());
            if (moConnectionRevuelta == null) {
                miClient.showMsgBoxWarning("No se pudo establecer comunicación con el sistema Revuelta XXI.");
            }
            
            setEnabledFields(true);
        }
    }

    private void attendWindowClosed() {
        if (moConnectionRevuelta != null) {
            try {
                if (!moConnectionRevuelta.isClosed()) {
                    moConnectionRevuelta.close();
                }
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
        }
    }

    private void setEnabledFields(boolean enable) {
        moBoolTared.setEditable(false);
        moBoolTared.setValue(moRegistry.isTared());

        if (mnFormSubtype == SModConsts.SX_TIC_TARE_PEND) {
            moIntTicket.setEditable(false);
            jbImportTicket.setEnabled(false);
            jbCleanTicket.setEnabled(false);
            moKeyProducer.setEnabled(false);
            moKeyItem.setEnabled(false);
            moTextPlates.setEditable(false);
            moTextPlatesCage.setEditable(false);
            moTextDriver.setEditable(false);
            moDecWeightSource.setEditable(false);
            moBoolWeightSourceAvailable.setEnabled(false);
            moDecWeightDestinyArrival.setEditable(false);
            moDecWeightDestinyDeparture.setEditable(enable);
            moDatetimeArrival.setEditable(false);
            moDatetimeDeparture.setEditable(enable);
            moDecPackageQuantityArrival.setEditable(false);
            jbPackageQuantityArrival.setEnabled(mbIsPackage);
            moDecPackageEmptyQuantityArrival.setEditable(false);
            jbPackageEmptyQuantityArrival.setEnabled(mbIsPackage);
            moDecPackageQuantityDeparture.setEditable(mbIsPackage);
            moDecPackageEmptyQuantityDeparture.setEditable(mbIsPackage);
            jbImportTareTicket.setEnabled(enable && moConnectionRevuelta != null);
            jbCleanTare.setEnabled(!enable);
            jbSaveSend.setEnabled(false);
        }
        else if (moRegistry.isRegistryNew()) {
            moIntTicket.setEditable(enable);
            jbImportTicket.setEnabled(enable && moConnectionRevuelta != null);
            jbCleanTicket.setEnabled(!enable);
            moKeyProducer.setEnabled(enable);
            moKeyItem.setEnabled(enable);
            moTextPlates.setEditable(enable);
            moTextPlatesCage.setEditable(true);
            moTextDriver.setEditable(enable);
            moDecWeightSource.setEditable(moBoolWeightSourceAvailable.getValue());
            moBoolWeightSourceAvailable.setEnabled(true);
            moDecWeightDestinyArrival.setEditable(enable);
            moDecWeightDestinyDeparture.setEditable(false);
            moDatetimeArrival.setEditable(enable);
            moDatetimeDeparture.setEditable(false);
            moDecPackageQuantityArrival.setEditable(false);
            jbPackageQuantityArrival.setEnabled(false);
            moDecPackageEmptyQuantityArrival.setEditable(false);
            jbPackageEmptyQuantityArrival.setEnabled(false);
            moDecPackageQuantityDeparture.setEditable(false);
            moDecPackageEmptyQuantityDeparture.setEditable(false);
            jbImportTareTicket.setEnabled(false);
            jbCleanTare.setEnabled(false);
            jbSaveSend.setEnabled(true);
        }
        else {
            enable = (!mbIsRevImport1 && !moRegistry.isTared());

            moIntTicket.setEditable(enable);
            jbImportTicket.setEnabled(enable && moConnectionRevuelta != null);
            jbCleanTicket.setEnabled(!enable && !moRegistry.isTared());
            moKeyProducer.setEnabled(enable);
            moKeyItem.setEnabled(enable);
            moTextPlates.setEditable(enable);
            moTextPlatesCage.setEditable(!moRegistry.isTared());
            moTextDriver.setEditable(enable);
            moDecWeightSource.setEditable(!moRegistry.isTared() && moBoolWeightSourceAvailable.getValue());
            moBoolWeightSourceAvailable.setEnabled(!moRegistry.isTared());
            moDecWeightDestinyArrival.setEditable(enable);
            moDecWeightDestinyDeparture.setEditable(false);
            moDatetimeArrival.setEditable(enable);
            moDatetimeDeparture.setEditable(false);
            moDecPackageQuantityArrival.setEditable(mbIsPackage && !moRegistry.isTared());
            jbPackageQuantityArrival.setEnabled(false);
            moDecPackageEmptyQuantityArrival.setEditable(mbIsPackage && !moRegistry.isTared());
            jbPackageEmptyQuantityArrival.setEnabled(false);
            moDecPackageQuantityDeparture.setEditable(false);
            moDecPackageEmptyQuantityDeparture.setEditable(false);
            jbImportTareTicket.setEnabled(false);
            jbCleanTare.setEnabled(false);
            jbSaveSend.setEnabled(true);
        }
    }

    private void itemStateKeyItem() {
        mbIsPackage = false;
        mbIsLaboratory = false;
        moDecPackageQuantityArrival.setValue(0d);
        moDecPackageEmptyQuantityArrival.setValue(0d);
        moDecPackageQuantityDeparture.setValue(0d);
        moDecPackageEmptyQuantityDeparture.setValue(0d);
        jlPackageQuantityArrivalUnit.setText("");
        jlPackageEmptyQuantityArrivalUnit.setText("");
        jlPackageQuantityDepartureUnit.setText("");
        jlPackageEmptyQuantityDepartureUnit.setText("");
        jlWeightAverageUnit.setText("");
        moDecPackageQuantityArrival.setEditable(mbIsPackage);
        moDecPackageEmptyQuantityArrival.setEditable(mbIsPackage);

        if (moKeyItem.getSelectedIndex() > 0) {
            try {
                readItem();

                mbIsPackage = moItem.isPackage();
                mbIsLaboratory = moItem.isLaboratory();
                jlPackageQuantityArrivalUnit.setText(moItem.getPackageName());
                jlPackageEmptyQuantityArrivalUnit.setText(moItem.getPackageName());
                jlPackageQuantityDepartureUnit.setText(moItem.getPackageName());
                jlPackageEmptyQuantityDepartureUnit.setText(moItem.getPackageName());
                moDecPackageQuantityArrival.setEditable(mbIsPackage);
                moDecPackageEmptyQuantityArrival.setEditable(mbIsPackage);

                if (!jlWeightDestinyDepartureUnit.getText().isEmpty() && !moItem.getPackageName().isEmpty()) {
                    jlWeightAverageUnit.setText(jlWeightDestinyDepartureUnit.getText() + "/" + moItem.getPackageName());
                }
                else {
                    jlWeightAverageUnit.setText("");
                }
            }
            catch (SQLException e) {
                SLibUtils.showException(this, e);
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
        }
    }

    private void readItem() throws SQLException, Exception {
        if (moKeyItem.getSelectedIndex() > 0) {
            moItem = new SDbItem();
            moItem.read(miClient.getSession(), moKeyItem.getValue());
        }
    }

    private void itemStateWeightSourceAvailable() {
        moDecWeightSource.setEditable(moBoolWeightSourceAvailable.getValue());
    }

    private void computeWeightAverage() {
        if (moDecWeightDestinyDeparture.getValue() > 0 && moDecPackageQuantityArrival.getValue() > 0) {

            moDecWeightAverage.setValue(
                ((moDecWeightDestinyArrival.getValue() - moDecWeightDestinyDeparture.getValue()) -
                ((moDecPackageQuantityArrival.getValue() + moDecPackageEmptyQuantityArrival.getValue()) * moItem.getPackageWeight()) +
                ((moDecPackageQuantityDeparture.getValue() + moDecPackageEmptyQuantityDeparture.getValue()) * moItem.getPackageWeight())) /
                (moDecPackageQuantityArrival.getValue()));
        }
    }

    private void actionImportTicket() {
        int producerId = 0;
        int itemId = 0;
        String sql = "";
        String producerRevId  = "";
        String itemRevId = "";
        Statement statement = null;
        ResultSet resulset = null;
        SimpleDateFormat datetimeParser = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss a");
        //SimpleDateFormat dateFormatDateShort = new SimpleDateFormat("MM/dd/yyyy");    // XXX used when ODBC was supported by JVM (sflores, 2015-06-24)

        if (moConnectionRevuelta != null) {
            try {
                if (moKeyScale.getSelectedIndex() > 0) {
                    if (!SSomUtils.existsTicket(miClient.getSession(), moIntTicket.getValue(), moRegistry.getPkTicketId())) {
                        statement = moConnectionRevuelta.createStatement();

                        /* XXX used when ODBC was supported by JVM (sflores, 2015-06-24)
                        sql = "SELECT be.clave_e, DateValue(be.fecha_e) + TimeValue(be.hora_e), be.placas, be.observa_e, be.conductor, be.peso_e, " + // 6
                                "be.clave_p, be.clave_c, be.clave_o, be.nombre_oe, be.turno_oe, be.bascula_e, p.nombre_p, c.nombre_c " + // 14
                                "FROM ((boleto_ent AS be " +
                                "INNER JOIN producto AS p ON be.clave_p = p.clave_p) " +
                                "INNER JOIN cliente AS c ON be.clave_c = c.clave_c) " +
                                "WHERE be.clave_e = " + moIntTicket.getValue() + " AND be.fecha_e = #" + dateFormatDateShort.format(moDatetimeArrival.getValue()) + "# ";
                        */
                        sql = "SELECT be.clave_e, CAST(DATE(be.fecha_e) AS SQL_CHAR) + ' ' + be.hora_e, be.placas, be.observa_e, be.conductor, be.peso_e, " + // 6
                                "be.clave_p, be.clave_c, be.clave_o, be.nombre_oe, be.turno_oe, be.bascula_e, p.nombre_p, c.nombre_c " + // 14
                                "FROM ((boleto_ent AS be " +
                                "INNER JOIN producto AS p ON be.clave_p = p.clave_p) " +
                                "INNER JOIN cliente AS c ON be.clave_c = c.clave_c) " +
                                "WHERE be.clave_e = " + moIntTicket.getValue() + " AND be.fecha_e = '" + SLibUtils.DbmsDateFormatDate.format(moDatetimeArrival.getValue()) + "' ";
                        
                        resulset = statement.executeQuery(sql);
                        if (resulset.next()) {
                            producerRevId = resulset.getString(8);
                            itemRevId = resulset.getString(7);

                            producerId = SSomUtils.mapProducerSomRevuelta(miClient.getSession(), producerRevId);
                            itemId = SSomUtils.mapItemSomRevuelta(miClient.getSession(), itemRevId);

                            if (producerId > 0) {
                                if (itemId > 0) {
                                    moKeyProducer.setValue(new int [] { producerId });
                                    moKeyItem.setValue(new int [] { itemId });
                                    moTextPlates.setValue(resulset.getString(3));
                                    moTextDriver.setValue(resulset.getString(5));
                                    moDecWeightDestinyArrival.setValue(resulset.getDouble(6));
                                    //moDatetimeArrival.setValue(SLibUtils.DbmsDateFormatDatetime.parse(resulset.getString(2)));
                                    moDatetimeArrival.setValue(datetimeParser.parse(resulset.getString(2).replaceAll("a.m.", "AM").replaceAll("p.m.", "PM")));
                                    moTextNote.setValue(resulset.getString(4));
                                    moKeyScale.setEnabled(false);
                                    mbIsRevImport1 = true;

                                    setEnabledFields(false);
                                    itemStateKeyItem();
                                }
                                else {
                                    miClient.showMsgBoxInformation("No se encontró el mapeo para el producto '" + resulset.getString(13) + "', en el catálogo de ítems de SOM.");
                                }
                            }
                            else {
                                miClient.showMsgBoxInformation("No se encontró el mapeo para el proveedor '" + resulset.getString(14) + "', en el catálogo de proveedores de SOM.");
                            }
                        }
                        else {
                            miClient.showMsgBoxInformation("No se encontró ningún registro para el boleto '" + moIntTicket.getValue() + "', del día '" + SLibUtils.DateFormatDate.format(moDatetimeArrival.getValue()) + "', en Revuelta XXI.");
                        }
                    }
                    else {
                        miClient.showMsgBoxInformation("El boleto '" + moIntTicket.getValue() + "', ya existe.");
                    }
                }
                else {
                    miClient.showMsgBoxInformation("Se debe especificar un valor para el campo '" + SGuiUtils.getLabelName(jlScale) + "'.");
                    moKeyScale.requestFocus();
                }
            }
            catch (ParseException | SQLException e) {
                SLibUtils.showException(this, e);
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
        }
        else {
            miClient.showMsgBoxWarning("No se pudo establecer comunicación con el sistema Revuelta XXI.");
        }
    }

    private void actionImportTareTicket() {
        String sql = "";
        Statement statement = null;
        ResultSet resulset = null;
        SimpleDateFormat datetimeParser = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss a");
        //SimpleDateFormat DateFormatDateShort = new SimpleDateFormat("MM/dd/yyyy");    // XXX used when ODBC was supported by JVM (sflores, 2015-06-24)

        if (moConnectionRevuelta != null) {
            try {
                statement = moConnectionRevuelta.createStatement();

                /* XXX used when ODBC was supported by JVM (sflores, 2015-06-24)
                sql = "SELECT clave_e, DateValue(fecha_s) + TimeValue(hora_s), peso_s " + // 3
                        "FROM boleto_sal " +
                        "WHERE clave_e = " + moIntTicket.getValue() + " AND fecha_s = #" + DateFormatDateShort.format(moDatetimeDeparture.getValue()) + "# ";
                */
                sql = "SELECT clave_e, CAST(DATE(fecha_s) AS SQL_CHAR) + ' ' + hora_s, peso_s " + // 3
                        "FROM boleto_sal " +
                        "WHERE clave_e = " + moIntTicket.getValue() + " AND fecha_s = '" + SLibUtils.DbmsDateFormatDate.format(moDatetimeDeparture.getValue()) + "' ";
                        
                resulset = statement.executeQuery(sql);
                if (resulset.next()) {
                    moDecWeightDestinyDeparture.setValue(resulset.getDouble(3));
                    //moDatetimeDeparture.setValue(SLibUtils.DbmsDateFormatDatetime.parse(resulset.getString(2)));
                    moDatetimeDeparture.setValue(datetimeParser.parse(resulset.getString(2).replaceAll("a.m.", "AM").replaceAll("p.m.", "PM")));
                    mbIsRevImport2 = true;

                    setEnabledFields(false);
                }
                else {
                    miClient.showMsgBoxInformation("No se encontró ningún registro para el boleto '" + moIntTicket.getValue() + "', del día '" + SLibUtils.DateFormatDate.format(moDatetimeDeparture.getValue()) + ".");
                }
            }
            catch (ParseException | SQLException e) {
                SLibUtils.showException(this, e);
            }
        }
        else {
            miClient.showMsgBoxWarning("No se pudo establecer comunicación con el sistema Revuelta XXI.");
        }
    }

    private void getSeasonRegion() {
        mnSeasonId = 0;
        mnRegionId = 0;

        try {
            mnSeasonId = SSomUtils.getProperSeasonId(miClient.getSession(), moDatetimeArrival.getValue(), moKeyItem.getValue()[0], moKeyProducer.getValue()[0]);

            if (mnSeasonId != SLibConsts.UNDEFINED) {
                mnRegionId = SSomUtils.getProperRegionId(miClient.getSession(), mnSeasonId, moKeyItem.getValue()[0], moKeyProducer.getValue()[0]);
            }
        }
        catch (Exception e) {
             SLibUtils.showException(this, e);
        }
    }

    private void actionCleanTicket() {
        if (miClient.showMsgBoxConfirm("¿Está seguro(a) que desea borrar los datos de la primer pesada?") == JOptionPane.YES_OPTION) {
            moIntTicket.setValue(0);
            moKeyProducer.setSelectedIndex(0);
            moKeyItem.setSelectedIndex(0);
            moTextPlates.setValue("");
            moTextPlatesCage.setValue("");
            moTextDriver.setValue("");
            moDecWeightDestinyArrival.setValue(0d);
            moDecWeightSource.setValue(0d);
            moDatetimeArrival.setValue(miClient.getSession().getWorkingDate());
            moTextNote.setValue("");
            mbIsRevImport1 = false;

            setEnabledFields(true);
        }
    }

    private void actionCleanTare() {
        if (miClient.showMsgBoxConfirm("¿Está seguro(a) que desea borrar los datos de la segunda pesada?") == JOptionPane.YES_OPTION) {
            moDecWeightDestinyDeparture.setValue(0d);
            moDatetimeDeparture.setValue(miClient.getSession().getWorkingDate());
            mbIsRevImport2 = false;

            setEnabledFields(true);
        }
    }

    private void actionSaveSend() {
        mbIsSaveSend = true;
        super.actionSave();
    }

    private void actionPackageQuantityArrival() {
        jbPackageQuantityArrival.setEnabled(false);
        moDecPackageQuantityArrival.setEditable(true);
        moDecPackageQuantityArrival.requestFocus();
    }

    private void actionPackageEmptyQuantityArrival() {
        jbPackageEmptyQuantityArrival.setEnabled(false);
        moDecPackageEmptyQuantityArrival.setEditable(true);
        moDecPackageEmptyQuantityArrival.requestFocus();
    }

    @Override
    public void addAllListeners() {
        moKeyItem.addItemListener(this);
        jbImportTicket.addActionListener(this);
        jbImportTareTicket.addActionListener(this);
        jbCleanTicket.addActionListener(this);
        jbCleanTare.addActionListener(this);
        jbSaveSend.addActionListener(this);
        jbPackageQuantityArrival.addActionListener(this);
        moBoolWeightSourceAvailable.addItemListener(this);
        moDecWeightSource.addFocusListener(this);
        moDecWeightDestinyArrival.addFocusListener(this);
        moDecWeightDestinyDeparture.addFocusListener(this);
        moDecPackageQuantityArrival.addFocusListener(this);
        moDecPackageEmptyQuantityArrival.addFocusListener(this);
        moDecPackageQuantityDeparture.addFocusListener(this);
        moDecPackageEmptyQuantityDeparture.addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        moKeyItem.removeItemListener(this);
        jbImportTicket.removeActionListener(this);
        jbImportTareTicket.removeActionListener(this);
        jbCleanTicket.removeActionListener(this);
        jbCleanTare.removeActionListener(this);
        jbSaveSend.removeActionListener(this);
        jbPackageQuantityArrival.removeActionListener(this);
        moBoolWeightSourceAvailable.removeItemListener(this);
        moDecWeightSource.removeFocusListener(this);
        moDecWeightDestinyArrival.removeFocusListener(this);
        moDecWeightDestinyDeparture.removeFocusListener(this);
        moDecPackageQuantityArrival.removeFocusListener(this);
        moDecPackageEmptyQuantityArrival.removeFocusListener(this);
        moDecPackageQuantityDeparture.removeFocusListener(this);
        moDecPackageEmptyQuantityDeparture.removeFocusListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyScale, SModConsts.CU_USR_SCA, SLibConsts.UNDEFINED, new SGuiParams(new int[] { miClient.getSession().getUser().getPkUserId() }));
        miClient.getSession().populateCatalogue(moKeyItem, SModConsts.SU_ITEM, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyProducer, SModConsts.SU_PROD, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbTicket) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;
        mbFirstTime = true;
        mbIsSaveSend = false;
        mbIsEnableScale = false;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            moRegistry.setDatetimeArrival(miClient.getSession().getWorkingDate());
            moRegistry.setDatetimeDeparture(miClient.getSession().getWorkingDate());
            moKeyScale.setVisible(true);
            moTextScale.setVisible(false);
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moKeyScale.setValue(new int[] { moRegistry.getFkScaleId() });
        moIntTicket.setValue(moRegistry.getNumber());
        moKeyItem.setValue(new int[] { moRegistry.getFkItemId() });
        itemStateKeyItem();
        moKeyProducer.setValue(new int[] { moRegistry.getFkProducerId() });
        mbIsTared = moRegistry.isTared();
        moTextPlates.setValue(moRegistry.getPlate());
        moTextPlatesCage.setValue(moRegistry.getPlateCage());
        moTextDriver.setValue(moRegistry.getDriver());
        moDecWeightSource.setValue(moRegistry.getWeightSource());
        moBoolWeightSourceAvailable.setValue(moRegistry.isWeightSourceAvailable());
        moDecWeightDestinyArrival.setValue(moRegistry.getWeightDestinyArrival());
        moDecWeightDestinyDeparture.setValue(moRegistry.getWeightDestinyDeparture());
        moDatetimeArrival.setValue(moRegistry.getDatetimeArrival());
        moDatetimeDeparture.setValue(moRegistry.getDatetimeDeparture());
        moDecPackageQuantityArrival.setValue(moRegistry.getPackageQuantityArrival());
        moDecPackageEmptyQuantityArrival.setValue(moRegistry.getPackageEmptyQuantityArrival());
        moDecPackageQuantityDeparture.setValue(moRegistry.getPackageQuantityDeparture());
        moDecPackageEmptyQuantityDeparture.setValue(moRegistry.getPackageEmptyQuantityDeparture());
        moTextNote.setValue("");

        moTextScale.setValue(moRegistry.getXtaScaleName());
        mbIsRevImport1 = moRegistry.isRevueltaImport1();
        mbIsRevImport2 = moRegistry.isRevueltaImport2();

        if (moRegistry.getChildTicketNotes().size() > 0) {
            moTextNote.setValue(moRegistry.getChildTicketNotes().get(0).getNote());
        }

        setFormEditable(true);

        if (moRegistry.isRegistryNew()) {
            if (moKeyScale.getItemCount() == 2) {
                moKeyScale.setSelectedIndex(1);
                moKeyScale.setEnabled(false);
            }
            else {
                mbIsEnableScale = true;
            }
            moBoolWeightSourceAvailable.setValue(true);

            moTextScale.setVisible(false);
            moTextScale.setEditable(false);
        }
        else {
            moKeyScale.setVisible(false);
            moKeyScale.setEnabled(false);
            moTextScale.setVisible(true);
            moTextScale.setEditable(false);
        }

        moDecWeightAverage.setEditable(false);

        readItem();
        itemStateWeightSourceAvailable();
        computeWeightAverage();

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbTicketNote ticketNote = new SDbTicketNote();
        SDbTicket registry = moRegistry.clone();

        if (registry.isRegistryNew()) {}

        getSeasonRegion();

        registry.setNumber(moIntTicket.getValue());
        registry.setDate(moDatetimeArrival.getValue());
        registry.setPlate(moTextPlates.getValue());
        registry.setPlateCage(moTextPlatesCage.getValue());
        registry.setDriver(moTextDriver.getValue());
        registry.setDatetimeArrival(moDatetimeArrival.getValue());
        registry.setDatetimeDeparture(moRegistry.isRegistryNew() ? moDatetimeArrival.getValue() : moDatetimeDeparture.getValue());
        registry.setPackageQuantityArrival(moDecPackageQuantityArrival.getValue());
        registry.setPackageEmptyQuantityArrival(moDecPackageEmptyQuantityArrival.getValue());
        registry.setPackageQuantityDeparture(mnFormSubtype == SModConsts.SX_TIC_TARE_PEND ? moDecPackageQuantityDeparture.getValue() : registry.isTared() ? moDecPackageQuantityDeparture.getValue() : 0d);
        registry.setPackageEmptyQuantityDeparture(mnFormSubtype == SModConsts.SX_TIC_TARE_PEND ? moDecPackageEmptyQuantityDeparture.getValue() : registry.isTared() ? moDecPackageEmptyQuantityDeparture.getValue() : 0d);
        registry.setWeightSource(moDecWeightSource.getValue());
        registry.setWeightDestinyArrival(moDecWeightDestinyArrival.getValue());
        registry.setWeightDestinyDeparture(mnFormSubtype == SModConsts.SX_TIC_TARE_PEND ? moDecWeightDestinyDeparture.getValue() : registry.isTared() ? moDecWeightDestinyDeparture.getValue() : 0d);
        registry.setRevueltaImport1(mbIsRevImport1);
        registry.setRevueltaImport2(mbIsRevImport2);
        registry.setWeightSourceAvailable(moBoolWeightSourceAvailable.getValue());
        registry.setMfgOutsourcing(false);
        registry.setPayed(false);
        registry.setAssorted(false);
        registry.setPackage(mbIsPackage);
        registry.setLaboratory(mbIsLaboratory);
        registry.setDpsSupply(false);
        registry.setFkScaleId(moKeyScale.isVisible() ? moKeyScale.getValue()[0] : registry.getFkScaleId());
        registry.setFkTicketStatusId(registry.isRegistryNew() ? SModSysConsts.SS_TIC_ST_SCA : registry.getFkTicketStatusId());
        registry.setFkSeasonId_n(mnSeasonId);
        registry.setFkRegionId_n(mnRegionId);
        registry.setFkItemId(moKeyItem.getValue()[0]);
        registry.setFkUnitId(moKeyItem.getSelectedItem().getForeignKey()[0]);
        registry.setFkProducerId(moKeyProducer.getValue()[0]);
        registry.setFkLaboratoryId_n(registry.isRegistryNew() ? 0 : registry.getFkLaboratoryId_n());
        registry.setAuxRequiredCalculation(!mbIsLaboratory && mnFormSubtype == SModConsts.SX_TIC_TARE_PEND);
        registry.setTared(mnFormSubtype == SModConsts.SX_TIC_TARE_PEND || moRegistry.isTared());

        if (mnFormSubtype == SModConsts.SX_TIC_TARE_PEND && moItem.isAutoMailNotification()) {
            registry.setAuxSendMail(true);
            registry.setAuxRecipientsTo(moItem.getAutoMailNotificationBoxes());
        }

        registry.setAuxMoveNextOnSend(mbIsSaveSend);

        registry.getChildTicketNotes().clear();
        if (moTextNote.getValue().length() > 0) {
            ticketNote.setNote(moTextNote.getValue());
            registry.getChildTicketNotes().add(ticketNote);
        }

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (mnFormSubtype == SModConsts.SX_TIC_TARE_PEND) {
                if (!mbIsRevImport2) {
                    validation = SGuiUtils.validateDateRange(moDatetimeArrival, moDatetimeDeparture);
                    if (!validation.isValid() && !moDatetimeArrival.isEditable()) {
                        validation.setComponent(((JSpinner.DefaultEditor) moDatetimeDeparture.getComponent().getEditor()).getTextField());
                    }
                }
            }

            if (validation.isValid() && !SGuiClientUtils.isPeriodOpened(miClient.getSession(), moDatetimeArrival.getValue())) {
                validation.setMessage("El período está cerrado.");
                validation.setComponent(((JSpinner.DefaultEditor) moDatetimeArrival.getComponent().getEditor()).getTextField());
            }
            else if (validation.isValid() && (moDecPackageQuantityArrival.isEditable() && moDecPackageQuantityArrival.getValue() == 0)) {
                if (miClient.showMsgBoxConfirm("No se registró un valor para el campo '" + SGuiUtils.getLabelName(jlPackageQuantityArrival.getText()) + "',\n" + SGuiConsts.MSG_CNF_CONT) == JOptionPane.YES_OPTION) {
                }
                else {
                    validation.setMessage("Se debe especificar un valor decimal para el campo '" + SGuiUtils.getLabelName(jlPackageQuantityArrival.getText()) + "'.");
                    validation.setComponent(moDecPackageQuantityArrival);
                }
            }
            else if (validation.isValid() && (moDecPackageQuantityDeparture.isEditable() && moDecPackageQuantityDeparture.getValue() == 0)) {
                if (miClient.showMsgBoxConfirm("No se registró un valor para el campo '" + SGuiUtils.getLabelName(jlPackageQuantityDeparture.getText()) + "',\n" + SGuiConsts.MSG_CNF_CONT) == JOptionPane.YES_OPTION) {
                }
                else {
                    validation.setMessage("Se debe especificar un valor decimal para el campo '" + SGuiUtils.getLabelName(jlPackageQuantityDeparture.getText()) + "'.");
                    validation.setComponent(moDecPackageQuantityDeparture);
                }
            }
        }

        return validation;
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox && e.getStateChange() == ItemEvent.SELECTED) {
            JComboBox comboBox = (JComboBox)  e.getSource();

            if (comboBox == moKeyItem) {
                itemStateKeyItem();
            }
        }
        else if (e.getSource() instanceof JCheckBox) {
            JCheckBox checkBox = (JCheckBox)  e.getSource();

            if (checkBox == moBoolWeightSourceAvailable) {
                itemStateWeightSourceAvailable();
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbImportTicket) {
                actionImportTicket();
            }
            else if (button == jbImportTareTicket) {
                actionImportTareTicket();
            }
            else if (button == jbCleanTicket) {
                actionCleanTicket();
            }
            else if (button == jbCleanTare) {
                actionCleanTare();
            }
            else if (button == jbSaveSend) {
                actionSaveSend();
            }
            else if (button == jbPackageQuantityArrival) {
                actionPackageQuantityArrival();
            }
            else if (button == jbPackageEmptyQuantityArrival) {
                actionPackageEmptyQuantityArrival();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {

    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == moDecWeightSource.getComponent() ||
                textField == moDecWeightDestinyArrival.getComponent() ||
                textField == moDecWeightDestinyDeparture.getComponent() ||
                textField == moDecPackageQuantityArrival.getComponent() ||
                textField == moDecPackageEmptyQuantityArrival.getComponent() ||
                textField == moDecPackageQuantityDeparture.getComponent() ||
                textField == moDecPackageEmptyQuantityDeparture.getComponent()) {

                    computeWeightAverage();
            }
        }
    }
}
