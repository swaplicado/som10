/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiFieldKeyGroup;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import som.gui.SGuiClientSessionCustom;
import som.gui.SGuiClientUtils;
import som.mod.SModConsts;
import som.mod.SModSysConsts;
import som.mod.som.db.SDbIog;
import som.mod.som.db.SDbTicket;
import som.mod.som.db.SSomStock;
import som.mod.som.db.SSomUtils;
import som.mod.som.db.SSomWarehouseItem;

/**
 *
 * @author Néstor Ávalos, Sergio Flores
 * 2018-11-21, Sergio Flores:
 * 1) Adición de columna referencia en tabla de movimientos de almacén.
 */
public class SFormIog extends sa.lib.gui.bean.SBeanForm implements ActionListener, ItemListener, FocusListener {

    private boolean mbTicketRegistry;
    private int[] moFkIogTypeId;

    private SDbIog moRegistry;
    private SDbIog moIogRegistryB;
    private SDbIog moIogRegistryC;
    private SDbIog moIogRegistryD;
    private SGuiFieldKeyGroup moFieldKeyGroupWarehouse;
    private SGuiFieldKeyGroup moFieldKeyGroupWarehouseDestiny;

    private SDialogStockCardex moDialogStockCardex;

    /**
     * Creates new form SFormIog
     */
    public SFormIog(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.S_IOG, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        sBeanFieldKey1 = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel36 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jlIogType = new javax.swing.JLabel();
        moTextIogType = new sa.lib.gui.bean.SBeanFieldText();
        jPanel16 = new javax.swing.JPanel();
        jlIogAdjustmentType = new javax.swing.JLabel();
        moKeyIogAdjustmentType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel17 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        moTextNumber = new sa.lib.gui.bean.SBeanFieldText();
        jPanel4 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDateDate = new sa.lib.gui.bean.SBeanFieldDate();
        jlReference = new javax.swing.JLabel();
        moTextReference = new sa.lib.gui.bean.SBeanFieldText();
        jPanel37 = new javax.swing.JPanel();
        jPanel39 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlBranch = new javax.swing.JLabel();
        moKeyBranch = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel7 = new javax.swing.JPanel();
        jlWarehouse = new javax.swing.JLabel();
        moKeyWarehouseSource = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel30 = new javax.swing.JPanel();
        jlDivision = new javax.swing.JLabel();
        moKeyDivisionSource = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel8 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moKeyItem = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel10 = new javax.swing.JPanel();
        jlXtaStock = new javax.swing.JLabel();
        moDecXtaStock = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlXtaStockUnit = new javax.swing.JLabel();
        jlXtaStockPeriod = new javax.swing.JLabel();
        moTextXtaStockPeriod = new sa.lib.gui.bean.SBeanFieldText();
        jbCardex = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jlQuantity = new javax.swing.JLabel();
        moDecQuantity = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlQuantityUnit = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jPanel38 = new javax.swing.JPanel();
        jPanel31 = new javax.swing.JPanel();
        jlBranchDestiny = new javax.swing.JLabel();
        moKeyBranchDestiny = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel32 = new javax.swing.JPanel();
        jlWarehouseDestiny = new javax.swing.JLabel();
        moKeyWarehouseDestiny = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel41 = new javax.swing.JPanel();
        jlDivisionDestiny = new javax.swing.JLabel();
        moKeyDivisionDestiny = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel33 = new javax.swing.JPanel();
        jlItemDestiny = new javax.swing.JLabel();
        moKeyItemDestiny = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel34 = new javax.swing.JPanel();
        jlXtaStockDestiny = new javax.swing.JLabel();
        moDecXtaStockDestiny = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlXtaStockUnitDestiny = new javax.swing.JLabel();
        jlXtaStockPeriodDestiny = new javax.swing.JLabel();
        moTextXtaStockPeriodDestiny = new sa.lib.gui.bean.SBeanFieldText();
        jbCardexDestiny = new javax.swing.JButton();
        jPanel35 = new javax.swing.JPanel();
        jlQuantityDestiny = new javax.swing.JLabel();
        moDecQuantityDestiny = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlQuantityUnitDestiny = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jPanel29 = new javax.swing.JPanel();
        jlNote = new javax.swing.JLabel();
        moTextNote = new sa.lib.gui.bean.SBeanFieldText();
        jPanel40 = new javax.swing.JPanel();
        moBoolDeleted = new sa.lib.gui.bean.SBeanFieldBoolean();
        moBoolSystem = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel5 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jlDpsBizPartner = new javax.swing.JLabel();
        moTextDpsBizPartner = new sa.lib.gui.bean.SBeanFieldText();
        jPanel22 = new javax.swing.JPanel();
        jlDpsBizPartnerCode = new javax.swing.JLabel();
        moTextDpsBizPartnerCode = new sa.lib.gui.bean.SBeanFieldText();
        jPanel18 = new javax.swing.JPanel();
        jlDpsDate = new javax.swing.JLabel();
        moDateDpsDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel19 = new javax.swing.JPanel();
        jlDpsNumberSeries = new javax.swing.JLabel();
        moTextDpsNumberSeries = new sa.lib.gui.bean.SBeanFieldText();
        jPanel62 = new javax.swing.JPanel();
        jlDpsNumberReference = new javax.swing.JLabel();
        moTextDpsNumberReference = new sa.lib.gui.bean.SBeanFieldText();
        jPanel20 = new javax.swing.JPanel();
        jlDpsItem = new javax.swing.JLabel();
        moTextDpsItem = new sa.lib.gui.bean.SBeanFieldText();
        jPanel23 = new javax.swing.JPanel();
        jlDpsItemCode = new javax.swing.JLabel();
        moTextDpsItemCode = new sa.lib.gui.bean.SBeanFieldText();
        jPanel21 = new javax.swing.JPanel();
        jlDpsQuantityOriginal = new javax.swing.JLabel();
        moDecDpsQuantityOriginal = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlDpsQuantityOriginalUnit = new javax.swing.JLabel();
        jPanel24 = new javax.swing.JPanel();
        jlDpsQuantitySupDev = new javax.swing.JLabel();
        moDecDpsQuantitySupDev = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlDpsQuantitySupDevUnit = new javax.swing.JLabel();
        jPanel25 = new javax.swing.JPanel();
        jlDpsQuantityPending = new javax.swing.JLabel();
        moDecDpsQuantityPending = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlDpsQuantityPendingUnit = new javax.swing.JLabel();
        jPanel27 = new javax.swing.JPanel();
        jPanel28 = new javax.swing.JPanel();
        jlTicketScale = new javax.swing.JLabel();
        moTextTicketScale = new sa.lib.gui.bean.SBeanFieldText();
        jPanel26 = new javax.swing.JPanel();
        jlTicketNumber = new javax.swing.JLabel();
        moIntTicketNumber = new sa.lib.gui.bean.SBeanFieldInteger();

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setPreferredSize(new java.awt.Dimension(525, 400));
        jPanel2.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel36.setLayout(new java.awt.GridLayout(4, 0, 0, 5));

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlIogType.setText("Tipo docto.:");
        jlIogType.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel15.add(jlIogType);

        moTextIogType.setEditable(false);
        moTextIogType.setText("MOVE TYPE");
        moTextIogType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel15.add(moTextIogType);

        jPanel36.add(jPanel15);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlIogAdjustmentType.setText("Tipo ajuste:*");
        jlIogAdjustmentType.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel16.add(jlIogAdjustmentType);

        moKeyIogAdjustmentType.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel16.add(moKeyIogAdjustmentType);

        jPanel36.add(jPanel16);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumber.setText("Folio:");
        jlNumber.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel17.add(jlNumber);

        moTextNumber.setEditable(false);
        jPanel17.add(moTextNumber);

        jPanel36.add(jPanel17);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha:*");
        jlDate.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel4.add(jlDate);

        moDateDate.setPreferredSize(new java.awt.Dimension(100, 23));
        moDateDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                moDateDateFocusLost(evt);
            }
        });
        jPanel4.add(moDateDate);

        jlReference.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlReference.setText("Referencia:");
        jlReference.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel4.add(jlReference);
        jPanel4.add(moTextReference);

        jPanel36.add(jPanel4);

        jPanel2.add(jPanel36, java.awt.BorderLayout.NORTH);

        jPanel37.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel39.setBorder(javax.swing.BorderFactory.createTitledBorder("Almacén:"));
        jPanel39.setLayout(new java.awt.GridLayout(6, 1, 0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBranch.setText("Sucursal:*");
        jlBranch.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel6.add(jlBranch);

        moKeyBranch.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel6.add(moKeyBranch);

        jPanel39.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWarehouse.setText("Almacén:*");
        jlWarehouse.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel7.add(jlWarehouse);

        moKeyWarehouseSource.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel7.add(moKeyWarehouseSource);

        jPanel39.add(jPanel7);

        jPanel30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDivision.setText("División:*");
        jlDivision.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel30.add(jlDivision);

        moKeyDivisionSource.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel30.add(moKeyDivisionSource);

        jPanel39.add(jPanel30);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Ítem:*");
        jlItem.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel8.add(jlItem);

        moKeyItem.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel8.add(moKeyItem);

        jPanel39.add(jPanel8);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlXtaStock.setText("Existencias:");
        jlXtaStock.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel10.add(jlXtaStock);

        moDecXtaStock.setEditable(false);
        jPanel10.add(moDecXtaStock);

        jlXtaStockUnit.setText("UNID");
        jlXtaStockUnit.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel10.add(jlXtaStockUnit);

        jlXtaStockPeriod.setText("Ejercicio:");
        jlXtaStockPeriod.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel10.add(jlXtaStockPeriod);

        moTextXtaStockPeriod.setEditable(false);
        moTextXtaStockPeriod.setText("2013");
        moTextXtaStockPeriod.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel10.add(moTextXtaStockPeriod);

        jbCardex.setIcon(new javax.swing.ImageIcon(getClass().getResource("/som/gui/img/icon_std_kardex.gif"))); // NOI18N
        jbCardex.setToolTipText("Ver cardex");
        jbCardex.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbCardex);

        jPanel39.add(jPanel10);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQuantity.setText("Cantidad:*");
        jlQuantity.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel9.add(jlQuantity);
        jPanel9.add(moDecQuantity);

        jlQuantityUnit.setText("UNID");
        jlQuantityUnit.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel9.add(jlQuantityUnit);

        jPanel39.add(jPanel9);

        jPanel37.add(jPanel39, java.awt.BorderLayout.NORTH);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Almacén destino:"));
        jPanel11.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel38.setLayout(new java.awt.GridLayout(6, 1, 0, 5));

        jPanel31.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBranchDestiny.setText("Sucursal:");
        jlBranchDestiny.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel31.add(jlBranchDestiny);

        moKeyBranchDestiny.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel31.add(moKeyBranchDestiny);

        jPanel38.add(jPanel31);

        jPanel32.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWarehouseDestiny.setText("Almacén:");
        jlWarehouseDestiny.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel32.add(jlWarehouseDestiny);

        moKeyWarehouseDestiny.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel32.add(moKeyWarehouseDestiny);

        jPanel38.add(jPanel32);

        jPanel41.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDivisionDestiny.setText("División:*");
        jlDivisionDestiny.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel41.add(jlDivisionDestiny);

        moKeyDivisionDestiny.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel41.add(moKeyDivisionDestiny);

        jPanel38.add(jPanel41);

        jPanel33.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemDestiny.setText("Ítem:");
        jlItemDestiny.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel33.add(jlItemDestiny);

        moKeyItemDestiny.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel33.add(moKeyItemDestiny);

        jPanel38.add(jPanel33);

        jPanel34.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlXtaStockDestiny.setText("Existencias:");
        jlXtaStockDestiny.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel34.add(jlXtaStockDestiny);

        moDecXtaStockDestiny.setEditable(false);
        jPanel34.add(moDecXtaStockDestiny);

        jlXtaStockUnitDestiny.setText("UNID");
        jlXtaStockUnitDestiny.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel34.add(jlXtaStockUnitDestiny);

        jlXtaStockPeriodDestiny.setText("Ejercicio:");
        jlXtaStockPeriodDestiny.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel34.add(jlXtaStockPeriodDestiny);

        moTextXtaStockPeriodDestiny.setEditable(false);
        moTextXtaStockPeriodDestiny.setText("2013");
        moTextXtaStockPeriodDestiny.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel34.add(moTextXtaStockPeriodDestiny);

        jbCardexDestiny.setIcon(new javax.swing.ImageIcon(getClass().getResource("/som/gui/img/icon_std_kardex.gif"))); // NOI18N
        jbCardexDestiny.setToolTipText("Ver cardex");
        jbCardexDestiny.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel34.add(jbCardexDestiny);

        jPanel38.add(jPanel34);

        jPanel35.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQuantityDestiny.setText("Cantidad:");
        jlQuantityDestiny.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel35.add(jlQuantityDestiny);

        moDecQuantityDestiny.setEditable(false);
        jPanel35.add(moDecQuantityDestiny);

        jlQuantityUnitDestiny.setText("UNID");
        jlQuantityUnitDestiny.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel35.add(jlQuantityUnitDestiny);

        jPanel38.add(jPanel35);

        jPanel11.add(jPanel38, java.awt.BorderLayout.NORTH);

        jPanel37.add(jPanel11, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel37, java.awt.BorderLayout.CENTER);

        jPanel12.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNote.setText("Observaciones:");
        jlNote.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel29.add(jlNote);

        moTextNote.setText("NOTE");
        moTextNote.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel29.add(moTextNote);

        jPanel12.add(jPanel29);

        jPanel40.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolDeleted.setText("Registro eliminado");
        moBoolDeleted.setEnabled(false);
        moBoolDeleted.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel40.add(moBoolDeleted);

        moBoolSystem.setText("Registro sistema");
        moBoolSystem.setEnabled(false);
        moBoolSystem.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel40.add(moBoolSystem);

        jPanel12.add(jPanel40);

        jPanel2.add(jPanel12, java.awt.BorderLayout.SOUTH);

        jPanel1.add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel5.setOpaque(false);
        jPanel5.setPreferredSize(new java.awt.Dimension(430, 400));
        jPanel5.setRequestFocusEnabled(false);
        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del documento externo:"));
        jPanel13.setLayout(new java.awt.GridLayout(10, 0, 0, 5));

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDpsBizPartner.setText("Asoc. neg.:");
        jlDpsBizPartner.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel14.add(jlDpsBizPartner);

        moTextDpsBizPartner.setEditable(false);
        moTextDpsBizPartner.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel14.add(moTextDpsBizPartner);

        jPanel13.add(jPanel14);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDpsBizPartnerCode.setText("Asoc. neg. cód.:");
        jlDpsBizPartnerCode.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel22.add(jlDpsBizPartnerCode);

        moTextDpsBizPartnerCode.setEditable(false);
        jPanel22.add(moTextDpsBizPartnerCode);

        jPanel13.add(jPanel22);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDpsDate.setText("Fecha docto.:");
        jlDpsDate.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel18.add(jlDpsDate);

        moDateDpsDate.setEditable(false);
        jPanel18.add(moDateDpsDate);

        jPanel13.add(jPanel18);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDpsNumberSeries.setText("Folio docto.:");
        jlDpsNumberSeries.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel19.add(jlDpsNumberSeries);

        moTextDpsNumberSeries.setEditable(false);
        jPanel19.add(moTextDpsNumberSeries);

        jPanel13.add(jPanel19);

        jPanel62.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDpsNumberReference.setText("Ref. docto.:");
        jlDpsNumberReference.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel62.add(jlDpsNumberReference);

        moTextDpsNumberReference.setEditable(false);
        jPanel62.add(moTextDpsNumberReference);

        jPanel13.add(jPanel62);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDpsItem.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlDpsItem.setText("Ítem: ");
        jlDpsItem.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel20.add(jlDpsItem);

        moTextDpsItem.setEditable(false);
        moTextDpsItem.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        moTextDpsItem.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel20.add(moTextDpsItem);

        jPanel13.add(jPanel20);

        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDpsItemCode.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlDpsItemCode.setText("Código ítem:");
        jlDpsItemCode.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel23.add(jlDpsItemCode);

        moTextDpsItemCode.setEditable(false);
        moTextDpsItemCode.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jPanel23.add(moTextDpsItemCode);

        jPanel13.add(jPanel23);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDpsQuantityOriginal.setText("C. original:");
        jlDpsQuantityOriginal.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel21.add(jlDpsQuantityOriginal);

        moDecDpsQuantityOriginal.setEditable(false);
        jPanel21.add(moDecDpsQuantityOriginal);

        jlDpsQuantityOriginalUnit.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel21.add(jlDpsQuantityOriginalUnit);

        jPanel13.add(jPanel21);

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDpsQuantitySupDev.setText("C. surt./dev.:");
        jlDpsQuantitySupDev.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel24.add(jlDpsQuantitySupDev);

        moDecDpsQuantitySupDev.setEditable(false);
        jPanel24.add(moDecDpsQuantitySupDev);

        jlDpsQuantitySupDevUnit.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel24.add(jlDpsQuantitySupDevUnit);

        jPanel13.add(jPanel24);

        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDpsQuantityPending.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlDpsQuantityPending.setText("C. pendiente:");
        jlDpsQuantityPending.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel25.add(jlDpsQuantityPending);

        moDecDpsQuantityPending.setEditable(false);
        moDecDpsQuantityPending.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jPanel25.add(moDecDpsQuantityPending);

        jlDpsQuantityPendingUnit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlDpsQuantityPendingUnit.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel25.add(jlDpsQuantityPendingUnit);

        jPanel13.add(jPanel25);

        jPanel5.add(jPanel13, java.awt.BorderLayout.NORTH);

        jPanel27.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del boleto:"));
        jPanel27.setLayout(new java.awt.GridLayout(9, 0, 0, 5));

        jPanel28.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTicketScale.setText("Báscula:");
        jlTicketScale.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel28.add(jlTicketScale);

        moTextTicketScale.setEditable(false);
        moTextTicketScale.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel28.add(moTextTicketScale);

        jPanel27.add(jPanel28);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTicketNumber.setText("Boleto:");
        jlTicketNumber.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel26.add(jlTicketNumber);

        moIntTicketNumber.setEditable(false);
        jPanel26.add(moIntTicketNumber);

        jPanel27.add(jPanel26);

        jPanel5.add(jPanel27, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel5, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void moDateDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_moDateDateFocusLost
        actionDateFocusLost();
    }//GEN-LAST:event_moDateDateFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel62;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCardex;
    private javax.swing.JButton jbCardexDestiny;
    private javax.swing.JLabel jlBranch;
    private javax.swing.JLabel jlBranchDestiny;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlDivision;
    private javax.swing.JLabel jlDivisionDestiny;
    private javax.swing.JLabel jlDpsBizPartner;
    private javax.swing.JLabel jlDpsBizPartnerCode;
    private javax.swing.JLabel jlDpsDate;
    private javax.swing.JLabel jlDpsItem;
    private javax.swing.JLabel jlDpsItemCode;
    private javax.swing.JLabel jlDpsNumberReference;
    private javax.swing.JLabel jlDpsNumberSeries;
    private javax.swing.JLabel jlDpsQuantityOriginal;
    private javax.swing.JLabel jlDpsQuantityOriginalUnit;
    private javax.swing.JLabel jlDpsQuantityPending;
    private javax.swing.JLabel jlDpsQuantityPendingUnit;
    private javax.swing.JLabel jlDpsQuantitySupDev;
    private javax.swing.JLabel jlDpsQuantitySupDevUnit;
    private javax.swing.JLabel jlIogAdjustmentType;
    private javax.swing.JLabel jlIogType;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlItemDestiny;
    private javax.swing.JLabel jlNote;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JLabel jlQuantity;
    private javax.swing.JLabel jlQuantityDestiny;
    private javax.swing.JLabel jlQuantityUnit;
    private javax.swing.JLabel jlQuantityUnitDestiny;
    private javax.swing.JLabel jlReference;
    private javax.swing.JLabel jlTicketNumber;
    private javax.swing.JLabel jlTicketScale;
    private javax.swing.JLabel jlWarehouse;
    private javax.swing.JLabel jlWarehouseDestiny;
    private javax.swing.JLabel jlXtaStock;
    private javax.swing.JLabel jlXtaStockDestiny;
    private javax.swing.JLabel jlXtaStockPeriod;
    private javax.swing.JLabel jlXtaStockPeriodDestiny;
    private javax.swing.JLabel jlXtaStockUnit;
    private javax.swing.JLabel jlXtaStockUnitDestiny;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolDeleted;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolSystem;
    private sa.lib.gui.bean.SBeanFieldDate moDateDate;
    private sa.lib.gui.bean.SBeanFieldDate moDateDpsDate;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecDpsQuantityOriginal;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecDpsQuantityPending;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecDpsQuantitySupDev;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecQuantity;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecQuantityDestiny;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecXtaStock;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecXtaStockDestiny;
    private sa.lib.gui.bean.SBeanFieldInteger moIntTicketNumber;
    private sa.lib.gui.bean.SBeanFieldKey moKeyBranch;
    private sa.lib.gui.bean.SBeanFieldKey moKeyBranchDestiny;
    private sa.lib.gui.bean.SBeanFieldKey moKeyDivisionDestiny;
    private sa.lib.gui.bean.SBeanFieldKey moKeyDivisionSource;
    private sa.lib.gui.bean.SBeanFieldKey moKeyIogAdjustmentType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyItem;
    private sa.lib.gui.bean.SBeanFieldKey moKeyItemDestiny;
    private sa.lib.gui.bean.SBeanFieldKey moKeyWarehouseDestiny;
    private sa.lib.gui.bean.SBeanFieldKey moKeyWarehouseSource;
    private sa.lib.gui.bean.SBeanFieldText moTextDpsBizPartner;
    private sa.lib.gui.bean.SBeanFieldText moTextDpsBizPartnerCode;
    private sa.lib.gui.bean.SBeanFieldText moTextDpsItem;
    private sa.lib.gui.bean.SBeanFieldText moTextDpsItemCode;
    private sa.lib.gui.bean.SBeanFieldText moTextDpsNumberReference;
    private sa.lib.gui.bean.SBeanFieldText moTextDpsNumberSeries;
    private sa.lib.gui.bean.SBeanFieldText moTextIogType;
    private sa.lib.gui.bean.SBeanFieldText moTextNote;
    private sa.lib.gui.bean.SBeanFieldText moTextNumber;
    private sa.lib.gui.bean.SBeanFieldText moTextReference;
    private sa.lib.gui.bean.SBeanFieldText moTextTicketScale;
    private sa.lib.gui.bean.SBeanFieldText moTextXtaStockPeriod;
    private sa.lib.gui.bean.SBeanFieldText moTextXtaStockPeriodDestiny;
    private sa.lib.gui.bean.SBeanFieldKey sBeanFieldKey1;
    // End of variables declaration//GEN-END:variables

    /*
    * Private methods
    */

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 1024, 640);
        mbTicketRegistry = false;
        moIogRegistryB = null;
        moIogRegistryC = null;
        moIogRegistryD = null;

        moFieldKeyGroupWarehouse = new SGuiFieldKeyGroup(miClient);
        moFieldKeyGroupWarehouseDestiny = new SGuiFieldKeyGroup(miClient);
        moDialogStockCardex = new SDialogStockCardex(miClient);

        moTextIogType.setTextSettings(SGuiUtils.getLabelName(jlIogType), 100, 0);
        moKeyIogAdjustmentType.setKeySettings(miClient, SGuiUtils.getLabelName(jlIogAdjustmentType), true);
        moTextNumber.setTextSettings(SGuiUtils.getLabelName(jlNumber), 15, 0);
        moDateDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate), true);
        moTextReference.setTextSettings(SGuiUtils.getLabelName(jlReference), 10, 0);
        moKeyBranch.setKeySettings(miClient, SGuiUtils.getLabelName(jlBranch), true);
        moKeyWarehouseSource.setKeySettings(miClient, SGuiUtils.getLabelName(jlWarehouse), true);
        moKeyDivisionSource.setKeySettings(miClient, SGuiUtils.getLabelName(jlDivision), true);
        moKeyItem.setKeySettings(miClient, SGuiUtils.getLabelName(jlItem), true);
        moDecXtaStock.setDecimalSettings(SGuiUtils.getLabelName(jlXtaStock), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moTextXtaStockPeriod.setTextSettings(jlXtaStockPeriod.getText(), 5, 0);
        moDecQuantity.setDecimalSettings(SGuiUtils.getLabelName(jlQuantity), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moKeyBranchDestiny.setKeySettings(miClient, SGuiUtils.getLabelName(jlBranchDestiny), true);
        moKeyWarehouseDestiny.setKeySettings(miClient, SGuiUtils.getLabelName(jlWarehouseDestiny), true);
        moKeyDivisionDestiny.setKeySettings(miClient, SGuiUtils.getLabelName(jlDivisionDestiny), true);
        moKeyItemDestiny.setKeySettings(miClient, SGuiUtils.getLabelName(jlItemDestiny), true);
        moDecXtaStockDestiny.setDecimalSettings(SGuiUtils.getLabelName(jlXtaStockDestiny), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moTextXtaStockPeriodDestiny.setTextSettings(jlXtaStockPeriodDestiny.getText(), 5, 0);
        moDecQuantityDestiny.setDecimalSettings(SGuiUtils.getLabelName(jlQuantityDestiny), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moTextNote.setTextSettings(SGuiUtils.getLabelName(jlNote), 255, 0);
        moBoolDeleted.setBooleanSettings(moBoolDeleted.getText(), false);
        moBoolSystem.setBooleanSettings(moBoolSystem.getText(), false);

        moIntTicketNumber.setIntegerSettings(SGuiUtils.getLabelName(jlTicketNumber), SGuiConsts.GUI_TYPE_INT, false);
        moTextDpsBizPartner.setTextSettings(jlDpsBizPartner.getText(), 200, 0);
        moTextDpsBizPartnerCode.setTextSettings("Código", 100, 0);
        moDateDpsDate.setDateSettings(miClient, jlDpsDate.getText(), false);
        moTextDpsNumberSeries.setTextSettings(jlDpsNumberSeries.getText(), 100, 0);
        moTextDpsNumberReference.setTextSettings(jlDpsNumberReference.getText(), 100, 0);
        moTextDpsItem.setTextSettings(jlDpsItem.getText(), 200, 0);
        moTextDpsItemCode.setTextSettings("Código", 100, 0);
        moDecDpsQuantityOriginal.setDecimalSettings(SGuiUtils.getLabelName(jlDpsQuantityOriginal), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecDpsQuantitySupDev.setDecimalSettings(SGuiUtils.getLabelName(jlDpsQuantitySupDev), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecDpsQuantityPending.setDecimalSettings(SGuiUtils.getLabelName(jlDpsQuantityPending), SGuiConsts.GUI_TYPE_DEC_AMT, false);

        moTextTicketScale.setTextSettings(jlTicketScale.getText(), 200, 0);
        moIntTicketNumber.setIntegerSettings(jlTicketNumber.getText(), SGuiConsts.GUI_TYPE_INT, false);

        moFields.addField(moTextIogType);
        moFields.addField(moKeyIogAdjustmentType);
        moFields.addField(moTextNumber);
        moFields.addField(moDateDate);
        moFields.addField(moTextReference);
        moFields.addField(moKeyBranch);
        moFields.addField(moKeyWarehouseSource);
        moFields.addField(moKeyDivisionSource);
        moFields.addField(moKeyItem);
        moFields.addField(moDecXtaStock);
        moFields.addField(moTextXtaStockPeriod);
        moFields.addField(moDecQuantity);
        moFields.addField(moKeyBranchDestiny);
        moFields.addField(moKeyWarehouseDestiny);
        moFields.addField(moKeyDivisionDestiny);
        moFields.addField(moKeyItemDestiny);
        moFields.addField(moDecXtaStockDestiny);
        moFields.addField(moTextXtaStockPeriodDestiny);
        moFields.addField(moDecQuantityDestiny);
        moFields.addField(moTextNote);
        moFields.addField(moBoolDeleted);
        moFields.addField(moBoolSystem);

        moFields.addField(moTextDpsBizPartner);
        moFields.addField(moTextDpsBizPartnerCode);
        moFields.addField(moDateDpsDate);
        moFields.addField(moTextDpsNumberSeries);
        moFields.addField(moTextDpsNumberReference);
        moFields.addField(moTextDpsItem);
        moFields.addField(moTextDpsItemCode);
        moFields.addField(moDecDpsQuantityOriginal);
        moFields.addField(moDecDpsQuantitySupDev);
        moFields.addField(moDecDpsQuantityPending);

        moFields.addField(moTextTicketScale);
        moFields.addField(moIntTicketNumber);

        moFields.setFormButton(jbSave);

        jlXtaStockUnit.setText("");
        jlQuantityUnit.setText("");
        jlXtaStockUnitDestiny.setText("");
        jlQuantityUnitDestiny.setText("");
    }

    private void resetComboBoxes() {
        if (moRegistry.getFkWarehouseCompanyId() == 0) {
            moFieldKeyGroupWarehouse.resetGroup();
        }

        if (moKeyWarehouseSource.getModel().getSize() == 2) {
            moKeyWarehouseSource.setSelectedIndex(1);
        }

        if (moKeyDivisionSource.getModel().getSize() == 2) {
            moKeyDivisionSource.setSelectedIndex(1);
        }

        if (moKeyItem.getModel().getSize() == 2) {
            moKeyItem.setSelectedIndex(1);
        }

        if (moIogRegistryB != null && moIogRegistryB.getFkWarehouseCompanyId() == 0) {
            moFieldKeyGroupWarehouseDestiny.resetGroup();
        }

        if (SLibUtils.compareKeys(SModSysConsts.SS_IOG_TP_OUT_INT_TRA, moFkIogTypeId)) {
            if (moKeyWarehouseDestiny.getModel().getSize() == 2) {
                moKeyWarehouseDestiny.setSelectedIndex(1);
            }

            if (moKeyDivisionDestiny.getModel().getSize() == 2) {
                moKeyDivisionDestiny.setSelectedIndex(1);
            }

            if (moKeyItemDestiny.getModel().getSize() == 2) {
                moKeyItemDestiny.setSelectedIndex(1);
            }
        }
    }

    private void loadFieldsValuesIog() {
        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;
        mbTicketRegistry = false;

        moFields.resetFields();
        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
            moIogRegistryB = moRegistry.getIogRegistryB();
            moIogRegistryC = moRegistry.getIogRegistryC();
            moIogRegistryD = moRegistry.getIogRegistryD();
        }

        moFkIogTypeId = new int[] { moRegistry.getFkIogCategoryId(), moRegistry.getFkIogClassId(), moRegistry.getFkIogTypeId() };
        moTextIogType.setValue(moRegistry.getXtaIogTypeName());
        moTextNumber.setValue(moRegistry.getXtaNumber());
        moDateDate.setValue(moRegistry.getDate());
        moTextReference.setValue(moRegistry.getReference());
        moKeyBranch.setValue(new int[] { moRegistry.getFkWarehouseCompanyId(), moRegistry.getFkWarehouseBranchId() });
        moKeyWarehouseSource.setValue(new int[] { moRegistry.getFkWarehouseCompanyId(), moRegistry.getFkWarehouseBranchId(), moRegistry.getFkWarehouseWarehouseId() });
        moKeyDivisionSource.setValue(new int[] { moRegistry.getFkDivisionId() });
        moKeyIogAdjustmentType.setValue(new int[] { moRegistry.getFkIogAdjustmentTypeId() });
        moKeyItem.setValue(new int[] { moRegistry.getFkItemId() });
        jlQuantityUnit.setText(moRegistry.getFkItemId() > 0 && moKeyItem.getSelectedItem().getComplement() != null ? moKeyItem.getSelectedItem().getComplement().toString() : "");
        moDecQuantity.setValue(moRegistry.getQuantity() < 0 ? 0 : moRegistry.getQuantity());
        moIntTicketNumber.setValue(moRegistry.getXtaTicketNumber());
        moTextNote.setValue(moRegistry.getXtaNote());
        moBoolDeleted.setValue(moRegistry.isDeleted());
        moBoolSystem.setValue(moRegistry.isSystem());

        moDecXtaStock.setValue(0d);
        moTextXtaStockPeriod.setValue("");
        moDecXtaStockDestiny.setValue(0d);
        moTextXtaStockPeriodDestiny.setValue("");

        loadIogDestiny();
        loadFieldsValuesDps();
        loadFieldsValuesTicket();

        setFormEditable(true);
        if (moRegistry.isRegistryNew()) {
            resetComboBoxes();

            moTextNumber.setValue(moRegistry.getXtaIogTypeCode() + "-");
            moDateDate.setValue(miClient.getSession().getWorkingDate());
            moBoolDeleted.setEnabled(false);
            moBoolSystem.setEnabled(false);
        }
        else {
            moKeyWarehouseSource.setEnabled(false);
            moKeyDivisionSource.setEnabled(false);
            moKeyIogAdjustmentType.setEnabled(false);
            moKeyItem.setEnabled(false);
            moKeyWarehouseDestiny.setEnabled(false);
            moKeyDivisionDestiny.setEnabled(false);
            moKeyItemDestiny.setEnabled(false);
            moBoolSystem.setEnabled(false);

            if (moBoolSystem.getValue()) {
                moDateDate.setEditable(false);
                moTextReference.setEditable(false);
                moDecQuantity.setEditable(false);
                moBoolDeleted.setEnabled(false);
            }
        }

        // Check if is move type adjustment:

        if (SLibUtils.compareKeys(moFkIogTypeId, SModSysConsts.SS_IOG_TP_IN_EXT_ADJ) ||
            SLibUtils.compareKeys(moFkIogTypeId, SModSysConsts.SS_IOG_TP_OUT_EXT_ADJ)) {
            moKeyIogAdjustmentType.setEnabled(true);
        }
        else {
            moKeyIogAdjustmentType.setEnabled(false);
            if (moRegistry.isRegistryNew()) {
                moKeyIogAdjustmentType.setValue(new int[] { SModSysConsts.SU_IOG_ADJ_TP_NA });
            }
        }

        disabledFields(false);
        editableDpsFields(false);
        editableTicketFields(false);
        actionChangedFkItemId();
        actionChangedFkItemDestinyId();
        addAllListeners();
    }

    private void loadFieldsValuesDps() {
        if (moRegistry.getFkExternalDpsYearId_n() > 0 && moRegistry.getFkExternalDpsDocId_n() > 0) {

            moTextDpsBizPartner.setValue(moRegistry.getXtaDpsBizPartner());
            moTextDpsBizPartner.setToolTipText(moRegistry.getXtaDpsBizPartner());
            moTextDpsBizPartnerCode.setValue(moRegistry.getXtaDpsBizPartnerCode());
            moTextDpsBizPartnerCode.setToolTipText(moRegistry.getXtaDpsBizPartnerCode());
            moDateDpsDate.setValue(moRegistry.getXtaDpsDate());
            moTextDpsNumberSeries.setValue(moRegistry.getXtaDpsNumberSeries());
            moTextDpsNumberReference.setValue(moRegistry.getXtaDpsNumberReference());
            moTextDpsItem.setValue(moRegistry.getXtaDpsItem());
            moTextDpsItem.setToolTipText(moRegistry.getXtaDpsItem());
            moTextDpsItemCode.setValue(moRegistry.getXtaDpsItemCode());
            moTextDpsItemCode.setToolTipText(moRegistry.getXtaDpsItemCode());
            moDecDpsQuantityOriginal.setValue(moRegistry.getXtaDpsQuantityOriginal());
            moDecDpsQuantitySupDev.setValue(moRegistry.getXtaDpsQuantitySupDev());
            moDecDpsQuantityPending.setValue(moRegistry.getXtaDpsQuantityPending());
            jlDpsQuantityOriginalUnit.setText(moRegistry.getXtaDpsQuantityUnit());
            jlDpsQuantitySupDevUnit.setText(moRegistry.getXtaDpsQuantityUnit());
            jlDpsQuantityPendingUnit.setText(moRegistry.getXtaDpsQuantityUnit());

            if (moRegistry.isRegistryNew()) {
                moDecQuantity.setValue(moRegistry.getQuantity());
                reloadCatalogueItem();
                resetComboBoxes();
            }

            if ((SLibUtils.compareKeys(moFkIogTypeId, SModSysConsts.SS_IOG_TP_IN_PUR_PUR) ||
                 SLibUtils.compareKeys(moFkIogTypeId, SModSysConsts.SS_IOG_TP_IN_SAL_SAL) ||
                 SLibUtils.compareKeys(moFkIogTypeId, SModSysConsts.SS_IOG_TP_OUT_PUR_PUR) ||
                 SLibUtils.compareKeys(moFkIogTypeId, SModSysConsts.SS_IOG_TP_OUT_SAL_SAL))) {
                disabledDpsFields(true);
            }
        }
        else {
            disabledDpsFields(false);
        }
    }

    private void loadFieldsValuesTicket() {
        SDbTicket ticket = null;

        try {
            if (moRegistry.getFkTicketId_n() > 0) {
                ticket = new SDbTicket();
                ticket.read(miClient.getSession(), new int[] { moRegistry.getFkTicketId_n() });

                moTextTicketScale.setValue(ticket.getXtaScaleName());
                moIntTicketNumber.setValue(ticket.getNumber());
                disabledTicketFields(true);

                if (moRegistry.isRegistryNew()) {
                    reloadCatalogueItem();

                    moDecQuantity.setValue(moRegistry.getQuantity());
                    moKeyBranch.setValue(new int[] { moRegistry.getFkWarehouseCompanyId(), moRegistry.getFkWarehouseBranchId() });
                    moKeyWarehouseSource.setValue(new int[] { moRegistry.getFkWarehouseCompanyId(), moRegistry.getFkWarehouseBranchId(), moRegistry.getFkWarehouseWarehouseId() });
                    moKeyItem.setValue(new int[] { moRegistry.getFkItemId() });
                    jlQuantityUnit.setText(moRegistry.getFkItemId() > 0 && moKeyItem.getSelectedItem().getComplement() != null ? moKeyItem.getSelectedItem().getComplement().toString() : "");

                    resetComboBoxes();
                }
            }
            else {
                disabledTicketFields(false);
            }
        }
        catch (Exception e) {
            SLibUtils.showException(SSomUtils.class.getName(), e);
        }
    }

    private void loadIogDestiny() {

        if (SLibUtils.compareKeys(SModSysConsts.SS_IOG_TP_OUT_INT_TRA, moFkIogTypeId)) {
            moKeyBranchDestiny.setValue(new int[] { moIogRegistryB.getFkWarehouseCompanyId(), moIogRegistryB.getFkWarehouseBranchId() });
            moKeyWarehouseDestiny.setValue(new int[] { moIogRegistryB.getFkWarehouseCompanyId(), moIogRegistryB.getFkWarehouseBranchId(), moIogRegistryB.getFkWarehouseWarehouseId() });
            moKeyDivisionDestiny.setValue(new int[] { moIogRegistryB.getFkDivisionId() });
            moKeyItemDestiny.setValue(new int[] { moIogRegistryB.getFkItemId() });
        }
        else {
            moKeyBranchDestiny.setSelectedIndex(0);
            moKeyWarehouseDestiny.setSelectedIndex(0);
            moKeyDivisionDestiny.setSelectedIndex(0);
            moKeyItemDestiny.setSelectedIndex(0);
        }
    }

    private void actionDateFocusLost() {
        obtainItem(true);
        obtainStock(true);
        obtainStock(false);
    }

    private void actionQuantityFocusLost() {
        assignIogDestinyQuantity();
    }

    private void actionChangedFkWarehouseId() {
        obtainItem(true);
        obtainStock(true);
        enabledCardex();
    }

    private void actionChangedFkWarehouseDestinyId() {
        obtainItem(false);
        obtainStock(false);
        enabledCardex();
    }

    private void actionChangedFkDivisionId() {
        obtainItem(true);
        obtainStock(true);
        enabledCardex();
    }

    private void actionChangedFkDivisionDestinyId() {
        obtainItem(false);
        obtainStock(false);
        enabledCardex();
    }

    private void actionChangedFkItemId() {
        if (moKeyItem.getSelectedIndex() > 0) {
            jlQuantityUnit.setText(moKeyItem.getSelectedIndex() > 0 ? moKeyItem.getSelectedItem().getComplement().toString() : "");
            obtainStock(true);
            enabledCardex();
        }
    }

    private void actionChangedFkItemDestinyId() {
        if (moKeyItemDestiny.getSelectedIndex() > 0) {
            jlQuantityUnitDestiny.setText(moKeyItemDestiny.getSelectedIndex() > 0 ? moKeyItemDestiny.getSelectedItem().getComplement().toString() : "");
            obtainStock(false);
            enabledCardex();
        }
    }

    private void enabledCardex() {
        if (moKeyWarehouseSource.getSelectedIndex() > 0 && moKeyItem.getSelectedIndex() > 0) {
            jbCardex.setEnabled(true);
        }
        else {
            jbCardex.setEnabled(false);
        }

        if (moKeyWarehouseDestiny.getSelectedIndex() > 0 && moKeyItemDestiny.getSelectedIndex() > 0) {
            jbCardexDestiny.setEnabled(true);
        }
        else {
            jbCardexDestiny.setEnabled(false);
        }
    }

    private void actionCardex() {
        if (jbCardex.isEnabled()) {
            if (moDateDate.getValue() != null ) {
                moDialogStockCardex.formReset();
                moDialogStockCardex.setFormParams(
                        SLibTimeUtils.getEndOfYear(moDateDate.getValue()),
                        moKeyItem.getValue()[0],
                        moKeyItem.getSelectedItem().getForeignKey()[0],
                        moKeyWarehouseSource.getValue(),
                        (moKeyDivisionSource.getSelectedIndex() > 0 ? moKeyDivisionSource.getValue()[0] : SLibConsts.UNDEFINED));
                moDialogStockCardex.setVisible(true);
            }
            else {
                miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + moDateDate.getFieldName() + "'.");
                moDateDate.requestFocus();
            }
        }
    }

    private void actionCardexDestiny() {
        if (jbCardexDestiny.isEnabled()) {
            if (moDateDate.getValue() != null ) {

                moDialogStockCardex.formReset();
                moDialogStockCardex.setFormParams(
                        SLibTimeUtils.getEndOfYear(moDateDate.getValue()),
                        moKeyItemDestiny.getValue()[0],
                        moKeyItemDestiny.getSelectedItem().getForeignKey()[0],
                        moKeyWarehouseDestiny.getValue(),
                        (moKeyDivisionDestiny.getSelectedIndex() > 0 ? moKeyDivisionDestiny.getValue()[0] : SLibConsts.UNDEFINED));
                moDialogStockCardex.setVisible(true);
            }
            else {
                miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + moDateDate.getFieldName() + "'.");
                moDateDate.requestFocus();
            }
        }
    }

    private void assignIogDestinyQuantity() {
        // Assign quantity destiny depending of move type:

        if (moKeyWarehouseDestiny.getSelectedIndex() > 0 && moKeyItemDestiny.getSelectedIndex() > 0) {

            if (SLibUtils.compareKeys(SModSysConsts.SS_IOG_TP_OUT_INT_TRA, moFkIogTypeId)) {
                moDecQuantityDestiny.setValue(moDecQuantity.getValue());
                moIogRegistryB.setQuantity(moDecQuantityDestiny.getValue());
            }
        }
    }

    private void obtainItem(final boolean bSource) {
        ArrayList<SSomWarehouseItem> somWarehouseItem = new ArrayList<SSomWarehouseItem>();

        if ((bSource && moKeyItem.isEnabled() && moKeyWarehouseSource.getSelectedIndex() > 0) ||
            (!bSource && moKeyItemDestiny.isEnabled() && moKeyWarehouseDestiny.getSelectedIndex() > 0)) {

            somWarehouseItem = SSomUtils.stockWarehouseByItem(
                    miClient.getSession(),
                    SLibTimeUtils.digestYear(moDateDate.getValue() != null ? moDateDate.getValue() : miClient.getSession().getWorkingDate())[0],
                    bSource ? moKeyWarehouseSource.getValue() : moKeyWarehouseDestiny.getValue(),
                    null,
                    moDateDate.getValue() != null ? moDateDate.getValue() : miClient.getSession().getWorkingDate(),
                    null,
                    (bSource ? (moKeyDivisionSource.getSelectedIndex() > 0 ? moKeyDivisionSource.getValue()[0] : SLibConsts.UNDEFINED) :
                        (moKeyDivisionDestiny.getSelectedIndex() > 0 ? moKeyDivisionDestiny.getValue()[0] : SLibConsts.UNDEFINED)),
                    SLibConsts.UNDEFINED);
        }

        if (somWarehouseItem.size() > 0) {
            if (bSource) {
                moKeyItem.setValue(new int[] { somWarehouseItem.get(0).getPkItemId() });
            }
            else {
                moKeyItemDestiny.setValue(new int[] { somWarehouseItem.get(0).getPkItemId() });
            }
        }
        else {

            if (bSource && moKeyItem.isEnabled()) {
                moKeyItem.setSelectedIndex(0);
            }
            else if (bSource && moKeyItemDestiny.isEnabled()) {
                moKeyItemDestiny.setSelectedIndex(0);
            }
        }
    }

    private void obtainStock(final boolean origin) {
        SSomStock stock = null;

        if (moDateDate.getValue() != null &&
                ((origin && moKeyWarehouseSource.getSelectedIndex() > 0 && moKeyItem.getSelectedIndex() > 0) ||
                (!origin && moKeyWarehouseDestiny.getSelectedIndex() > 0 && moKeyItemDestiny.getSelectedIndex() > 0))) {
            stock = SSomUtils.obtainStock(
                miClient.getSession(),
                SLibTimeUtils.digestYear(moDateDate.getValue())[0],
                (origin ? (moKeyItem.getSelectedIndex() > 0 ? moKeyItem.getValue()[0] : 0) :
                    (moKeyItemDestiny.getSelectedIndex() > 0 ? moKeyItemDestiny.getValue()[0] : 0)),
                (origin ? (moKeyItem.getSelectedIndex() > 0 ? moKeyItem.getSelectedItem().getForeignKey()[0] : 0) :
                    (moKeyItemDestiny.getSelectedIndex() > 0 ? moKeyItemDestiny.getSelectedItem().getForeignKey()[0] : 0)),
                SLibConsts.UNDEFINED,
                (origin ? (moKeyWarehouseSource.getSelectedIndex() > 0 ? moKeyWarehouseSource.getValue() : moKeyBranch.getValue()) :
                    (moKeyWarehouseDestiny.getSelectedIndex() > 0 ? moKeyWarehouseDestiny.getValue() : moKeyBranchDestiny.getValue())),
                (origin ? (moKeyDivisionSource.getSelectedIndex() > 0 ? moKeyDivisionSource.getValue()[0] : SLibConsts.UNDEFINED) :
                    (moKeyDivisionDestiny.getSelectedIndex() > 0 ? moKeyDivisionDestiny.getValue()[0] : SLibConsts.UNDEFINED)),
                null,
                moDateDate.getValue(), false, false);

            if (origin) {
                moDecXtaStock.setValue(stock.getStock());
                jlXtaStockUnit.setText(moKeyItem.getSelectedIndex() > 0 ? moKeyItem.getSelectedItem().getComplement().toString() : "");
                moTextXtaStockPeriod.setText("" + SLibTimeUtils.digestYear(moDateDate.getValue())[0]);
            }
            else {
                moDecXtaStockDestiny.setValue(stock.getStock());
                jlXtaStockUnitDestiny.setText(moKeyItemDestiny.getSelectedIndex() > 0 ? moKeyItemDestiny.getSelectedItem().getComplement().toString() : "");
                moTextXtaStockPeriodDestiny.setText("" + SLibTimeUtils.digestYear(moDateDate.getValue())[0]);
            }

            assignIogDestinyQuantity();
        }
        else {
            if (origin) {
                moDecXtaStock.setValue(0d);
                jlXtaStockUnit.setText("");
                moTextXtaStockPeriod.setText("");
            }
            else {
                moDecXtaStockDestiny.setValue(0d);
                jlXtaStockUnitDestiny.setText("");
                moTextXtaStockPeriodDestiny.setText("");
            }
        }
    }

    private void disabledFields(final boolean b) {
        moKeyBranch.setEnabled(false);
        jlBranch.setEnabled(false);
        moTextIogType.setEditable(b);
        moTextNumber.setEditable(b);

        moTextXtaStockPeriod.setEditable(b);
        moTextXtaStockPeriodDestiny.setEditable(b);
        moKeyItem.setEnabled(!moRegistry.isRegistryNew() || mbTicketRegistry ? false : true);
        moDecXtaStock.setEditable(false);
        moDecXtaStockDestiny.setEditable(false);
        moDecQuantity.setEditable(mbTicketRegistry ? false : true);
        moDecQuantityDestiny.setEditable(false);

        jlBranchDestiny.setEnabled(false);
        moKeyBranchDestiny.setEnabled(false);

        if (!SLibUtils.compareKeys(SModSysConsts.SS_IOG_TP_OUT_INT_TRA, moFkIogTypeId)) {
            moKeyWarehouseDestiny.setEnabled(b);
            moKeyDivisionDestiny.setEnabled(b);
            moKeyItemDestiny.setEnabled(!moRegistry.isRegistryNew() ? false : b);

            jbCardexDestiny.setEnabled(b);
        }
    }

    private void editableDpsFields(final boolean b) {
        moTextDpsBizPartner.setEditable(b);
        moTextDpsBizPartnerCode.setEditable(b);
        moDateDpsDate.setEditable(b);
        moTextDpsNumberSeries.setEditable(b);
        moTextDpsNumberReference.setEditable(b);
        moTextDpsItem.setEditable(b);
        moTextDpsItemCode.setEditable(b);
        moDecDpsQuantityOriginal.setEditable(b);
        moDecDpsQuantitySupDev.setEditable(b);
        moDecDpsQuantityPending.setEditable(b);
    }

    private void editableTicketFields(final boolean b) {
        moTextTicketScale.setEditable(b);
        moIntTicketNumber.setEditable(b);
    }

    private void disabledDpsFields(final boolean b) {
        moTextDpsBizPartner.setEnabled(b);
        moTextDpsBizPartnerCode.setEnabled(b);
        moDateDpsDate.setEnabled(b);
        moTextDpsNumberSeries.setEnabled(b);
        moTextDpsNumberReference.setEnabled(b);
        moTextDpsItem.setEnabled(b);
        moTextDpsItemCode.setEnabled(b);
        moDecDpsQuantityOriginal.setEnabled(b);
        moDecDpsQuantitySupDev.setEnabled(b);
        moDecDpsQuantityPending.setEnabled(b);

        jlDpsBizPartner.setEnabled(b);
        jlDpsBizPartnerCode.setEnabled(b);
        jlDpsDate.setEnabled(b);
        jlDpsNumberSeries.setEnabled(b);
        jlDpsNumberReference.setEnabled(b);
        jlDpsItem.setEnabled(b);
        jlDpsItemCode.setEnabled(b);
        jlDpsQuantityOriginal.setEnabled(b);
        jlDpsQuantitySupDev.setEnabled(b);
        jlDpsQuantityPending.setEnabled(b);
        jlDpsQuantityPendingUnit.setEnabled(b);
    }

    private void disabledTicketFields(final boolean b) {
        moTextTicketScale.setEnabled(b);
        moIntTicketNumber.setEnabled(b);

        jlTicketScale.setEnabled(b);
        jlTicketNumber.setEnabled(b);
    }

    private void reloadCatalogueItem() {
        SGuiParams params = new SGuiParams();

        if (!moRegistry.getXtaDpsBizPartner().isEmpty() &&
            (SLibUtils.compareKeys(moFkIogTypeId, SModSysConsts.SS_IOG_TP_IN_PUR_PUR) ||
             SLibUtils.compareKeys(moFkIogTypeId, SModSysConsts.SS_IOG_TP_IN_SAL_SAL) ||
             SLibUtils.compareKeys(moFkIogTypeId, SModSysConsts.SS_IOG_TP_OUT_PUR_PUR) ||
             SLibUtils.compareKeys(moFkIogTypeId, SModSysConsts.SS_IOG_TP_OUT_SAL_SAL))) {
            params.getParamsMap().put(SModConsts.SX_EXT_ITEM, moRegistry.getXtaExternalItemId());
            miClient.getSession().populateCatalogue(moKeyItem, SModConsts.SU_ITEM, SLibConsts.UNDEFINED, params);
        }
        else {
            miClient.getSession().populateCatalogue(moKeyItem, SModConsts.SU_ITEM, SLibConsts.UNDEFINED, null);
            miClient.getSession().populateCatalogue(moKeyItemDestiny, SModConsts.SU_ITEM, SLibConsts.UNDEFINED, null);
        }
    }

    private void renderTransferMoves() {
        if (SLibUtils.compareKeys(SModSysConsts.SS_IOG_TP_OUT_INT_TRA, moFkIogTypeId) ) {

            moIogRegistryB = assignTransferTypeMove(SModSysConsts.SS_IOG_TP_IN_INT_TRA);
        }

        if (moIogRegistryB != null) {
            moIogRegistryB.setFkWarehouseCompanyId(((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getCompany().getPrimaryKey()[0]);
            moIogRegistryB.setFkWarehouseBranchId(((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getCompany().getChildBranches().get(0).getPrimaryKey()[0]);
        }
    }

    private SDbIog assignTransferTypeMove(final int[] typeIog) {
        SDbIog iog = new SDbIog();

        iog.setFkIogCategoryId(typeIog[0]);
        iog.setFkIogClassId(typeIog[1]);
        iog.setFkIogTypeId(typeIog[2]);
        iog.setSystem(true);

        return iog;
    }

    private void getRegistryDestiny(final SDbIog registry) {

         if (SLibUtils.compareKeys(SModSysConsts.SS_IOG_TP_OUT_INT_TRA, moFkIogTypeId)) {
            moIogRegistryB = assignIogDestinyData(moIogRegistryB);

            if (SLibUtils.compareKeys(SModSysConsts.SS_IOG_TP_OUT_INT_TRA, moFkIogTypeId)) {
                moIogRegistryB.setFkItemId(moKeyItem.getValue()[0]);
                moIogRegistryB.setFkUnitId(moKeyItem.getSelectedItem().getForeignKey()[0]);
            }
            else {
                moIogRegistryB.setFkItemId(moKeyItemDestiny.getValue()[0]);
                moIogRegistryB.setFkUnitId(moKeyItemDestiny.getSelectedItem().getForeignKey()[0]);
            }

            registry.setIogRegistryB(moIogRegistryB);
        }
    }

    private SDbIog assignIogDestinyData(final SDbIog iogRegistry) {
        SDbIog iog = iogRegistry;

        iog.setFkWarehouseCompanyId(moKeyWarehouseDestiny.getValue()[0]);
        iog.setFkWarehouseBranchId(moKeyWarehouseDestiny.getValue()[1]);
        iog.setFkWarehouseWarehouseId(moKeyWarehouseDestiny.getValue()[2]);
        iog.setFkDivisionId(moKeyDivisionDestiny.getValue()[0]);

        iog.setFkIogAdjustmentTypeId(moKeyIogAdjustmentType.getValue()[0]);
        iog.setDate(moDateDate.getValue());
        //iog.setQuantity(moDecQuantity.getValue());
        iog.setXtaNote(moTextNote.getValue());
        iog.setDeleted(moBoolDeleted.getValue());

        return iog;
    }

    /*
    * Public methods
    */

    @Override
    public void addAllListeners() {
        moDateDate.getComponent().addFocusListener(this);
        moDecQuantity.getComponent().addFocusListener(this);
        moKeyWarehouseSource.addItemListener(this);
        moKeyWarehouseDestiny.addItemListener(this);
        moKeyDivisionSource.addItemListener(this);
        moKeyDivisionDestiny.addItemListener(this);
        moKeyItem.addItemListener(this);
        moKeyItemDestiny.addItemListener(this);
        jbCardex.addActionListener(this);
        jbCardexDestiny.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        moDateDate.getComponent().removeFocusListener(this);
        moDecQuantity.getComponent().removeFocusListener(this);
        moKeyWarehouseSource.removeItemListener(this);
        moKeyWarehouseDestiny.removeItemListener(this);
        moKeyDivisionSource.removeItemListener(this);
        moKeyDivisionDestiny.removeItemListener(this);
        moKeyItem.removeItemListener(this);
        moKeyItemDestiny.removeItemListener(this);
        jbCardex.removeActionListener(this);
        jbCardexDestiny.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        moFieldKeyGroupWarehouse.initGroup();
        moFieldKeyGroupWarehouse.addFieldKey(moKeyBranch, SModConsts.CU_COB, SLibConsts.UNDEFINED, null);
        moFieldKeyGroupWarehouse.addFieldKey(moKeyWarehouseSource, SModConsts.CU_WAH, SLibConsts.UNDEFINED, null);
        moFieldKeyGroupWarehouse.populateCatalogues();

        moFieldKeyGroupWarehouseDestiny.initGroup();
        moFieldKeyGroupWarehouseDestiny.addFieldKey(moKeyBranchDestiny, SModConsts.CU_COB, SLibConsts.UNDEFINED, null);
        moFieldKeyGroupWarehouseDestiny.addFieldKey(moKeyWarehouseDestiny, SModConsts.CU_WAH, SLibConsts.UNDEFINED, null);
        moFieldKeyGroupWarehouseDestiny.populateCatalogues();

        miClient.getSession().populateCatalogue(moKeyIogAdjustmentType, SModConsts.SU_IOG_ADJ_TP, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyDivisionSource, SModConsts.CU_DIV, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyDivisionDestiny, SModConsts.CU_DIV, SLibConsts.UNDEFINED, null);
        reloadCatalogueItem();
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbIog) registry;
        loadFieldsValuesIog();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbIog registry = moRegistry.clone();

        registry.setFkWarehouseCompanyId(moKeyWarehouseSource.getValue()[0]);
        registry.setFkWarehouseBranchId(moKeyWarehouseSource.getValue()[1]);
        registry.setFkWarehouseWarehouseId(moKeyWarehouseSource.getValue()[2]);
        //registry.setFkIogCategoryId(registry.getFkIogCategoryId());
        //registry.setFkIogClassId(registry.getFkIogClassId());
        //registry.setFkIogTypeId(registry.getFkIogTypeId());
        registry.setFkIogAdjustmentTypeId(moKeyIogAdjustmentType.getValue()[0]);
        registry.setFkItemId(moKeyItem.getValue()[0]);
        registry.setFkUnitId(moKeyItem.getSelectedItem().getForeignKey()[0]);
        registry.setFkDivisionId(moKeyDivisionSource.getValue()[0]);

        registry.setDate(moDateDate.getValue());
        registry.setReference(moTextReference.getValue());
        registry.setQuantity(moDecQuantity.getValue());
        registry.setXtaNote(moTextNote.getValue());
        registry.setDeleted(moBoolDeleted.getValue());
        registry.setSystem(moBoolSystem.getValue());

        registry.setXtaUnit(jlQuantityUnit.getText());

        getRegistryDestiny(registry);

        return registry;
    }

    @Override
    public void setValue(int type, Object value) {
        switch(type) {
            case SModConsts.SX_TIC_SUP_RM:
                mbTicketRegistry = (Boolean) value;
                disabledFields(false);
                break;

            case SModConsts.SS_IOG_TP:
                moFkIogTypeId = (int []) value;
                moRegistry.setFkIogCategoryId(moFkIogTypeId[0]);
                moRegistry.setFkIogClassId(moFkIogTypeId[1]);
                moRegistry.setFkIogTypeId(moFkIogTypeId[2]);

                moRegistry.setFkWarehouseCompanyId(((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getCompany().getPrimaryKey()[0]);
                moRegistry.setFkWarehouseBranchId(((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getCompany().getChildBranches().get(0).getPrimaryKey()[0]);
                moRegistry.setFkIogAdjustmentTypeId(SLibConsts.UNDEFINED);
                moRegistry.setDate(miClient.getSession().getWorkingDate());

                renderTransferMoves();

                try {
                    moRegistry.obtainXtaValues(miClient.getSession(), (int[])value);
                }
                catch (Exception e) {
                    SLibUtils.showException(this, e);
                }

                loadFieldsValuesIog();
                break;

            case SModConsts.SX_EXT_DPS:
                try {
                    moRegistry.obtainDps(miClient.getSession(), (int[]) value);
                    loadFieldsValuesDps();
                }
                catch (Exception e) {
                    SLibUtils.showException(this, e);
                }
                break;

            case SModConsts.S_TIC:
                try {
                    moRegistry.obtainTicket( miClient.getSession(), ((int []) value)[0]);
                    loadFieldsValuesTicket();
                }
                catch (Exception e) {
                    SLibUtils.showException(this, e);
                }
                break;
        }
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (!SGuiClientUtils.isPeriodOpened(miClient.getSession(), moDateDate.getValue())) {
                validation.setMessage("El período está cerrado.");
                validation.setComponent(moDateDate.getComponent());
            }
        }

        if (validation.isValid()) {
            if (moDecQuantity.getValue() <= 0) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + moDecQuantity.getFieldName() +
                    "' " + SGuiConsts.ERR_MSG_FIELD_VAL_GREAT + " 0.");
                validation.setComponent(moDecQuantity.getComponent());
            }
        }

        if (validation.isValid()) {
            if (SLibUtils.compareKeys(moFkIogTypeId, SModSysConsts.SS_IOG_TP_IN_EXT_ADJ) ||
                SLibUtils.compareKeys(moFkIogTypeId, SModSysConsts.SS_IOG_TP_OUT_EXT_ADJ)) {
                if (moKeyIogAdjustmentType.getValue()[0] == SModSysConsts.SU_IOG_ADJ_TP_NA) {
                    if (miClient.getSession().getUser().getFkUserTypeId() == SModSysConsts.CS_USR_TP_SUP) {
                        if (miClient.showMsgBoxConfirm("Esté ajuste con la opción '" + moKeyIogAdjustmentType.getSelectedItem().getItem() + "' en el '" + moKeyIogAdjustmentType.getFieldName() + "'  no será enviado en la exportación de información al sistema externo. \n" +
                                SGuiConsts.MSG_CNF_CONT) != JOptionPane.YES_OPTION) {
                            validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + moKeyIogAdjustmentType.getFieldName() +
                            "' no puede ser '" + moKeyIogAdjustmentType.getSelectedItem().getItem() + "'.");
                            validation.setComponent(moKeyIogAdjustmentType.getComponent());
                        }
                    }
                    else {
                        validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + moKeyIogAdjustmentType.getFieldName() +
                            "' no puede ser '" + moKeyIogAdjustmentType.getSelectedItem().getItem() + "'.");
                        validation.setComponent(moKeyIogAdjustmentType.getComponent());
                    }
                }
            }
        }

        if (validation.isValid()) {
            if (!moRegistry.getXtaDpsBizPartner().isEmpty() &&
                (SLibUtils.compareKeys(moFkIogTypeId, SModSysConsts.SS_IOG_TP_IN_PUR_PUR) ||
                SLibUtils.compareKeys(moFkIogTypeId, SModSysConsts.SS_IOG_TP_IN_SAL_SAL) ||
                SLibUtils.compareKeys(moFkIogTypeId, SModSysConsts.SS_IOG_TP_OUT_PUR_PUR) ||
                SLibUtils.compareKeys(moFkIogTypeId, SModSysConsts.SS_IOG_TP_OUT_SAL_SAL))) {

                if (moDecDpsQuantityPending.getValue() > 0 && moDecQuantity.getValue() > moDecDpsQuantityPending.getValue()) {
                    if (miClient.showMsgBoxConfirm(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlQuantity.getText()) + "' es mayor que el valor del campo '" +
                            SGuiUtils.getLabelName(jlDpsQuantityPending.getText()) + "'. \n " + SGuiConsts.MSG_CNF_CONT) != JOptionPane.YES_OPTION) {
                        validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlQuantity.getText()) + "' debe ser menor o igual al del campo '" +
                            SGuiUtils.getLabelName(jlDpsQuantityPending.getText()) + "'.");
                        validation.setComponent(moDecQuantity.getComponent());
                    }
                }

                if (validation.isValid()) {
                    if (moRegistry.getXtaExternalUnitId() != moKeyItem.getSelectedItem().getForeignKey()[1]) {
                        validation.setMessage("No hay una correspondencia con la unidad del ítem del sistema externo.");
                        validation.setComponent(moKeyIogAdjustmentType.getComponent());
                    }
                }
            }
        }

        if (validation.isValid()) {
            if (SLibUtils.compareKeys(SModSysConsts.SS_IOG_TP_OUT_INT_TRA, moFkIogTypeId)) {
                if (SLibUtils.compareKeys(moKeyWarehouseSource.getValue(), moKeyWarehouseDestiny.getValue())) {
                    validation.setMessage("El almacén origen y destino deben ser diferentes.");
                    validation.setComponent(moKeyWarehouseSource.getComponent());
                }
                else if (!SLibUtils.compareKeys(moKeyDivisionSource.getValue(), moKeyDivisionDestiny.getValue())) {
                    validation.setMessage("La división origen y destino deben ser iguales.");
                    validation.setComponent(moKeyDivisionSource.getComponent());
                }
            }
        }

        return validation;
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof javax.swing.JComboBox && e.getStateChange() == ItemEvent.SELECTED) {
            JComboBox comboBox = (JComboBox)  e.getSource();

            if (comboBox == moKeyWarehouseSource) {
                actionChangedFkWarehouseId();
            }
            else if (comboBox == moKeyWarehouseDestiny) {
                actionChangedFkWarehouseDestinyId();
            }
            else if (comboBox == moKeyDivisionSource) {
                actionChangedFkDivisionId();
            }
            else if (comboBox == moKeyDivisionDestiny) {
                actionChangedFkDivisionDestinyId();
            }
            else if (comboBox == moKeyItem) {
                actionChangedFkItemId();
            }
            else if (comboBox == moKeyItemDestiny) {
                actionChangedFkItemDestinyId();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
        
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == moDateDate.getComponent()) {
                actionDateFocusLost();
            }
            else if (textField == moDecQuantity.getComponent()) {
                actionQuantityFocusLost();
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbCardex) {
                actionCardex();
            }
            else if (button == jbCardexDestiny) {
                actionCardexDestiny();
            }
        }
    }
}

