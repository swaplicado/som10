/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;
import som.gui.SGuiClientSessionCustom;
import som.mod.SModConsts;
import som.mod.SModSysConsts;
import som.mod.som.db.SDbDpsAssorted;
import som.mod.som.db.SDbIog;
import som.mod.som.db.SDbItem;
import som.mod.som.db.SDbMfgEstimation;
import som.mod.som.db.SDbTicket;
import som.mod.som.db.SSomConsts;
import som.mod.som.db.SSomWizardDpsPurchasesSalesReturn;
import som.mod.som.db.SSomWizardDpsPurchasesSalesSupply;
import som.mod.som.db.SSomWizardDpsTicketSupply;

/**
 *
 * @author Néstor Ávalos, Sergio Flores
 */
public class SFormDialogWizardDps extends SBeanFormDialog implements ActionListener {

    private int mnFkUnitdId;
    private int mnStageSelectedId;
    private Date mtDate;
    private ArrayList<Object[]> maStages;

    private SFormIog moFormIog;
    private SDbIog moIog;
    private SSomWizardDpsTicketSupply moWizardDpsTicketSupply;
    private SSomWizardDpsPurchasesSalesSupply moWizardDpsPurchasesSalesSupply;
    private SSomWizardDpsPurchasesSalesReturn moWizardDpsPurchasesSalesReturn;
    private SGridPaneForm moGridPaneForm;

    private SGuiClient moClient;

    /**
     * Creates new form SFormProductionEstimate
     */
    public SFormDialogWizardDps(SGuiClient client, String title) {
        moClient = client;
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.SX_WIZ_DPS, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jpStage1 = new javax.swing.JPanel();
        jlStage1 = new javax.swing.JLabel();
        jpStage2 = new javax.swing.JPanel();
        jlStage2 = new javax.swing.JLabel();
        jpStage3 = new javax.swing.JPanel();
        jlStage3 = new javax.swing.JLabel();
        jpStage4 = new javax.swing.JPanel();
        jlStage4 = new javax.swing.JLabel();
        jpStage5 = new javax.swing.JPanel();
        jlStage5 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel29 = new javax.swing.JPanel();
        jlUnit = new javax.swing.JLabel();
        moKeyUnit = new sa.lib.gui.bean.SBeanFieldKey();
        jbSelect = new javax.swing.JButton();
        jPanel30 = new javax.swing.JPanel();
        jlTicketOrigin = new javax.swing.JLabel();
        moKeyTicketOrigin = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel31 = new javax.swing.JPanel();
        jlTicketDestination = new javax.swing.JLabel();
        moKeyTicketDestination = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel32 = new javax.swing.JPanel();
        jlTicketScale = new javax.swing.JLabel();
        moKeyTicketScale = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel6 = new javax.swing.JPanel();
        jpDocuments = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jbActionDocumentSupply = new javax.swing.JButton();
        jbActionDocumentClose = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jbPrevious = new javax.swing.JButton();
        jbNext = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.GridLayout(6, 1, 0, 5));

        jPanel5.setLayout(new java.awt.GridLayout(1, 5));

        jpStage1.setBackground(new java.awt.Color(192, 192, 192));

        jlStage1.setText("Boletos por surtir");
        jpStage1.add(jlStage1);

        jPanel5.add(jpStage1);

        jpStage2.setBackground(new java.awt.Color(192, 192, 192));

        jlStage2.setText("Compras por surtir");
        jpStage2.add(jlStage2);

        jPanel5.add(jpStage2);

        jpStage3.setBackground(new java.awt.Color(192, 192, 192));

        jlStage3.setText("Compras por devolver");
        jpStage3.add(jlStage3);

        jPanel5.add(jpStage3);

        jpStage4.setBackground(new java.awt.Color(192, 192, 192));

        jlStage4.setText("Ventas por surtir");
        jpStage4.add(jlStage4);

        jPanel5.add(jpStage4);

        jpStage5.setBackground(new java.awt.Color(192, 192, 192));

        jlStage5.setText("Ventas por devolver");
        jpStage5.add(jlStage5);

        jPanel5.add(jpStage5);

        jPanel2.add(jPanel5);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));
        jPanel2.add(jPanel4);

        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUnit.setText("Unidad: *");
        jlUnit.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel29.add(jlUnit);

        moKeyUnit.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel29.add(moKeyUnit);

        jbSelect.setText("Seleccionar");
        jPanel29.add(jbSelect);

        jPanel2.add(jPanel29);

        jPanel30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTicketOrigin.setText("Procedencia boleto:");
        jlTicketOrigin.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel30.add(jlTicketOrigin);

        moKeyTicketOrigin.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel30.add(moKeyTicketOrigin);

        jPanel2.add(jPanel30);

        jPanel31.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTicketDestination.setText("Destino boleto:");
        jlTicketDestination.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel31.add(jlTicketDestination);

        moKeyTicketDestination.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel31.add(moKeyTicketDestination);

        jPanel2.add(jPanel31);

        jPanel32.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTicketScale.setText("Báscula:");
        jlTicketScale.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel32.add(jlTicketScale);

        moKeyTicketScale.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel32.add(moKeyTicketScale);

        jPanel2.add(jPanel32);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel6.setLayout(new java.awt.GridLayout(1, 1));

        jpDocuments.setBorder(javax.swing.BorderFactory.createTitledBorder("Documentos:"));
        jpDocuments.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbActionDocumentSupply.setIcon(new javax.swing.ImageIcon(getClass().getResource("/som/gui/img/icon_std_mfg_fg_asd.gif"))); // NOI18N
        jbActionDocumentSupply.setToolTipText("Surtir");
        jbActionDocumentSupply.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jbActionDocumentSupply.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbActionDocumentSupply);

        jbActionDocumentClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/som/gui/img/icon_std_doc_close.gif"))); // NOI18N
        jbActionDocumentClose.setToolTipText("Cerrar");
        jbActionDocumentClose.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jbActionDocumentClose.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbActionDocumentClose);

        jpDocuments.add(jPanel7, java.awt.BorderLayout.NORTH);

        jPanel6.add(jpDocuments);

        jPanel1.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbPrevious.setText("Anterior");
        jPanel3.add(jbPrevious);

        jbNext.setText("Siguiente");
        jPanel3.add(jbNext);

        jPanel1.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JButton jbActionDocumentClose;
    private javax.swing.JButton jbActionDocumentSupply;
    private javax.swing.JButton jbNext;
    private javax.swing.JButton jbPrevious;
    private javax.swing.JButton jbSelect;
    private javax.swing.JLabel jlStage1;
    private javax.swing.JLabel jlStage2;
    private javax.swing.JLabel jlStage3;
    private javax.swing.JLabel jlStage4;
    private javax.swing.JLabel jlStage5;
    private javax.swing.JLabel jlTicketDestination;
    private javax.swing.JLabel jlTicketOrigin;
    private javax.swing.JLabel jlTicketScale;
    private javax.swing.JLabel jlUnit;
    private javax.swing.JPanel jpDocuments;
    private javax.swing.JPanel jpStage1;
    private javax.swing.JPanel jpStage2;
    private javax.swing.JPanel jpStage3;
    private javax.swing.JPanel jpStage4;
    private javax.swing.JPanel jpStage5;
    private sa.lib.gui.bean.SBeanFieldKey moKeyTicketDestination;
    private sa.lib.gui.bean.SBeanFieldKey moKeyTicketOrigin;
    private sa.lib.gui.bean.SBeanFieldKey moKeyTicketScale;
    private sa.lib.gui.bean.SBeanFieldKey moKeyUnit;
    // End of variables declaration//GEN-END:variables

    /*
    * Private methods
    */

    private void initComponentsCustom() {
        mnStageSelectedId = 0;
        mtDate = null;
        maStages = new ArrayList<Object[]>();
        moWizardDpsTicketSupply = new SSomWizardDpsTicketSupply();
        moWizardDpsPurchasesSalesSupply = new SSomWizardDpsPurchasesSalesSupply();
        moWizardDpsPurchasesSalesReturn = new SSomWizardDpsPurchasesSalesReturn();

        maStages.add(new Object[] { SModConsts.SX_TIC_SUP_RM, true });
        maStages.add(new Object[] { SModConsts.SX_IOG_SUP_PUR, false });
        maStages.add(new Object[] { SModConsts.SX_IOG_ADJ_PUR, false });
        maStages.add(new Object[] { SModConsts.SX_IOG_SUP_SAL, false });
        maStages.add(new Object[] { SModConsts.SX_IOG_ADJ_SAL, false });

        SGuiUtils.setWindowBounds(this, 1024, 640);
        jbCancel.setVisible(false);
        jbSave.setVisible(false);

        moKeyUnit.setKeySettings(miClient, SGuiUtils.getLabelName(jlUnit), true);
        moKeyTicketOrigin.setKeySettings(miClient, SGuiUtils.getLabelName(jlTicketOrigin), false);
        moKeyTicketDestination.setKeySettings(miClient, SGuiUtils.getLabelName(jlTicketDestination), false);
        moKeyTicketScale.setKeySettings(miClient, SGuiUtils.getLabelName(jlTicketScale), false);

        moFields.addField(moKeyUnit);
        moFields.addField(moKeyTicketOrigin);
        moFields.addField(moKeyTicketDestination);
        moFields.addField(moKeyTicketScale);
        moFields.setFormButton(jbSelect);

        removeAllListeners();
        reloadCatalogues();
        addAllListeners();

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        /* XXX Cell renderers not implemented yet in XML
        mvFormGrids.add(moGridUserRights);
        mvFormGrids.add(moGridUserScales);
        */
    }

    private void turnOnStage(final boolean next) {
        Object[] stage = null;
        Object[] stagePrevious = null;
        Object[] stageNext = null;

        SGuiParams params = null;
        SDbMfgEstimation estimation = null;

        if (moKeyUnit.getSelectedIndex() > 0) {
            for (int i = 0; i < maStages.size(); i++) {
                stage = maStages.get(i);

                // Validate if return to StockDays:

                if (i == 0 && !next && (Boolean) stage[1]) {
                    /*
                    if (miClient.showMsgBoxConfirm("Regresarás a la captura de inventario físico diario. \n" + SGuiConsts.MSG_CNF_CONT) == JOptionPane.YES_OPTION) {

                        if (mtDate == null) {
                            mtDate = miClient.getSession().getWorkingDate();
                        }

                        params = new SGuiParams();
                        params.setKey(new int[] { SLibTimeUtils.digestDate(mtDate)[0], SLibTimeUtils.digestDate(mtDate)[1], SLibTimeUtils.digestDate(mtDate)[2]  });
                        params.getParamsMap().put(SModConsts.SU_UNIT, moKeyUnit.getValue());
                        params.getParamsMap().put(SGuiConsts.PARAM_DATE, mtDate);
                        this.actionCancel();
                        miClient.getSession().getModule(SModConsts.MOD_SOM_OS, SLibConsts.UNDEFINED).showForm(SModConsts.SX_STK_DAYS, SLibConsts.UNDEFINED, params);
                    }
                    else {
                        break;
                    }
                    */
                    break;
                }

                // Validate if is the last stage:

                if (i == (maStages.size() - 1) && next && (Boolean) stage[1]) {
                    if (miClient.showMsgBoxConfirm("Abrirás la opción de la estimación de la producción. \n" + SGuiConsts.MSG_CNF_CONT) == JOptionPane.YES_OPTION) {
                        try {
                            if (mtDate == null) {
                                mtDate = miClient.getSession().getWorkingDate();
                            }

                            params = new SGuiParams();
                            estimation = new SDbMfgEstimation();
                            estimation.obtainProductionEstimateByDate(miClient.getSession(), mtDate, null);

                            params.setKey(estimation.getPkMfgEstimationId() > 0 ? new int[] { estimation.getPkMfgEstimationId() } : null);
                            params.getParamsMap().put(SModConsts.SU_UNIT, moKeyUnit.getValue());
                            params.getParamsMap().put(SGuiConsts.PARAM_DATE, mtDate);
                            miClient.getSession().getModule(SModConsts.MOD_SOM_OS, SLibConsts.UNDEFINED).showForm(SModConsts.S_MFG_EST, SLibConsts.UNDEFINED, params);
                        }
                        catch (Exception e) {
                            SLibUtils.showException(this, e);
                        }
                    }
                    else {
                        break;
                    }
                }

                if (i < maStages.size()-1) {
                    stageNext = maStages.get(i + 1);
                }

                if ((Boolean) stage[1]) {
                    stage[1] = false;
                    maStages.set(i, stage);
                    populateStages((Integer) stage[0], false);

                    if (next) {

                        // Turn on if is next stage:

                        stageNext[1] = true;
                        maStages.set((i + 1) > 4 ? i : i + 1, stageNext);
                        populateStages((Integer) stageNext[0], true);
                    }
                    else {

                        // Turn on if is back stage:

                        stagePrevious[1] = true;
                        maStages.set(i - 1, stagePrevious);
                        populateStages((Integer) stagePrevious[0], true);
                    }

                    break;
                }

                stagePrevious = stage;
            }
        }
        else {
            miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlUnit.getText()) + "'.");
        }
    }

    private void populateStages(int stage, boolean turn) {
        switch (stage) {
            case SModConsts.SX_TIC_SUP_RM:

                if (turn) {
                    mnStageSelectedId = SModConsts.SX_TIC_SUP_RM;
                    jbActionDocumentSupply.setToolTipText("Surtir boleto");
                    jbActionDocumentClose.setToolTipText("Cerrar para surtido");
                    populateStageDpsTicketSupply();
                }

                changeStageBackground(jpStage1, jlStage1, turn);
                break;

            case SModConsts.SX_IOG_SUP_PUR:

                if (turn) {
                    mnStageSelectedId = SModConsts.SX_IOG_SUP_PUR;
                    jbActionDocumentSupply.setToolTipText("Surtir partida");
                    jbActionDocumentClose.setToolTipText("Cerrar para surtido");
                    populateStageDpsPurchaseSalesSupply();
                }

                changeStageBackground(jpStage2, jlStage2, turn);
                break;

            case SModConsts.SX_IOG_ADJ_PUR:

                if (turn) {
                    mnStageSelectedId = SModConsts.SX_IOG_ADJ_PUR;
                    jbActionDocumentSupply.setToolTipText("Devolver partida");
                    jbActionDocumentClose.setToolTipText("Cerrar para devolución");
                    populateStageDpsPurchaseSalesReturn();
                }

                changeStageBackground(jpStage3, jlStage3, turn);
                break;

            case SModConsts.SX_IOG_SUP_SAL:

                if (turn) {
                    mnStageSelectedId = SModConsts.SX_IOG_SUP_SAL;
                    jbActionDocumentSupply.setToolTipText("Surtir partida");
                    jbActionDocumentClose.setToolTipText("Cerrar para surtido");
                    populateStageDpsPurchaseSalesSupply();
                }

                changeStageBackground(jpStage4, jlStage4, turn);
                break;

            case SModConsts.SX_IOG_ADJ_SAL:

                if (turn) {
                    mnStageSelectedId = SModConsts.SX_IOG_ADJ_SAL;
                    jbActionDocumentSupply.setToolTipText("Devolver partida");
                    jbActionDocumentClose.setToolTipText("Cerrar para devolución");
                    populateStageDpsPurchaseSalesReturn();
                }

                changeStageBackground(jpStage5, jlStage5, turn);
                break;

            default:
        }
    }

    private void changeStageBackground(JPanel panel, JLabel label, boolean turn) {
        panel.setBackground(turn ? Color.WHITE : Color.LIGHT_GRAY);
        label.setBackground(turn ? Color.DARK_GRAY : Color.LIGHT_GRAY);
    }

    private void populateStageDpsTicketSupply() {

        moGridPaneForm = new SGridPaneForm(miClient, SModConsts.SX_WIZ_DPS_TIC, SLibConsts.UNDEFINED, "Documentos", null) {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                SGridColumnForm[] columns = new SGridColumnForm[26];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Báscula");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_INT_RAW, "Boleto");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE, SGridConsts.COL_TITLE_DATE + " boleto");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_BPR_S, "Proveedor");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_BPR, "Proveedor código");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Ítem");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ITM, "Ítem código");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Carga origen (" + SSomConsts.KG + ")");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Peso entrada (" + SSomConsts.KG + ")");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Peso salida (" + SSomConsts.KG + ")");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Peso carga destino neto (" + SSomConsts.KG + ")");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Cant pendiente");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Cant surtida");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, "TS Entrada");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, "TS Salida");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Temporada");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Región");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Placas");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Placas caja");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_BPR_S, "Chofer");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, SGridConsts.COL_TITLE_IS_DEL);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, SGridConsts.COL_TITLE_IS_SYS);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, SGridConsts.COL_TITLE_USER_INS_NAME);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, SGridConsts.COL_TITLE_USER_INS_TS);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, SGridConsts.COL_TITLE_USER_UPD_NAME);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, SGridConsts.COL_TITLE_USER_UPD_TS);

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        renderPaneForm();
        populateStageDpsTicketRows();
    }

    private void populateStageDpsPurchaseSalesSupply() {

        moGridPaneForm = new SGridPaneForm(miClient, SModConsts.SX_WIZ_DPS_PUR, SLibConsts.UNDEFINED, "Documentos", null) {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                SGridColumnForm[] columns = new SGridColumnForm[22];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_BPR, "Clave " +
                        (mnStageSelectedId == SModConsts.SX_IOG_SUP_PUR ? "proveedor" : "cliente"));
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_BPR_S, (mnStageSelectedId == SModConsts.SX_IOG_SUP_PUR ? "Proveedor" : "Cliente"));
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_BPR, "Sucursal " +
                        (mnStageSelectedId == SModConsts.SX_IOG_SUP_PUR ? "proveedor" : "cliente"));
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Tipo docto.");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Folio docto.");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Referencia docto.");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha docto.");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_BPR, "Sucursal empresa");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Total moneda $");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CUR, "Moneda docto.");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ITM, "Clave ítem");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Ítem");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Cant. original");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Cant. ajustada");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Cant. neta");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Cant. surtida");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Cant. pendiente");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_M, "Cerrado");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, "Usr. cierre");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE_TIME, "Cierre");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        renderPaneForm();
        populateStageDpsTicketRows();
    }

    private void populateStageDpsPurchaseSalesReturn() {

        moGridPaneForm = new SGridPaneForm(miClient, SModConsts.SX_WIZ_DPS_ADJ, SLibConsts.UNDEFINED, "Documentos", null) {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                SGridColumnForm[] columns = new SGridColumnForm[19];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_BPR, "Clave " +
                        (mnStageSelectedId == SModConsts.SX_IOG_SUP_PUR ? "proveedor" : "cliente"));
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_BPR_S, (mnStageSelectedId == SModConsts.SX_IOG_SUP_PUR ? "Proveedor" : "Cliente"));
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_BPR, "Sucursal " +
                        (mnStageSelectedId == SModConsts.SX_IOG_SUP_PUR ? "proveedor" : "cliente"));
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Tipo docto.");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Folio docto.");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Referencia docto.");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha docto.");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_BPR, "Sucursal empresa");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Total moneda $");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CUR, "Moneda docto.");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ITM, "Clave ítem");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Ítem");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Cant. original");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Cant. devuelte");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Cant. pendiente");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_M, "Cerrado");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, "Usr. cierre");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE_TIME, "Cierre");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        renderPaneForm();
        populateStageDpsTicketRows();
    }

    public void renderPaneForm() {
        Vector<SGridRow> rows = new Vector<>();

        mvFormGrids.add(moGridPaneForm);
        moFormIog = new SFormIog(miClient, "Documentos de inventario");
        moGridPaneForm.setForm(moFormIog);
        moGridPaneForm.setPaneFormOwner(null);
        //moGridPaneForm.clearGridRows();
        mvFormGrids.add(moGridPaneForm);
        moGridPaneForm.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(jPanel7);

        jpDocuments.removeAll();
        jpDocuments.add(moGridPaneForm, BorderLayout.CENTER);
        jpDocuments.validate();
        jpDocuments.repaint();

        //moGridPaneForm.clearGridRows();
        mvFormGrids.add(moGridPaneForm);
        moGridPaneForm.populateGrid(rows);
    }

    private void populateStageDpsTicketRows() {
        Vector<SGridRow> rows = new Vector<>();

        if (moKeyUnit.getSelectedIndex() > 0) {
            try {
                switch (mnStageSelectedId) {
                    case SModConsts.SX_TIC_SUP_RM:
                        moWizardDpsTicketSupply.getWizardDpsSupplyTicket().clear();
                        moWizardDpsTicketSupply.read(miClient.getSession(), "", SModConsts.SX_TIC_MAN_SUP, 
                                moKeyUnit.getValue()[0], 
                                moKeyTicketOrigin.getValue()[0], 
                                moKeyTicketDestination.getValue()[0],
                                moKeyTicketScale.getValue()[0]);

                        for (SSomWizardDpsTicketSupply row : moWizardDpsTicketSupply.getWizardDpsSupplyTicket()) {
                            rows.add(row);
                        }
                        break;

                    case SModConsts.SX_IOG_SUP_PUR:
                        moWizardDpsPurchasesSalesSupply.getWizardDpsPurchaseSalesSupply().clear();
                        moWizardDpsPurchasesSalesSupply.read(miClient.getSession(),
                            "AND d.b_del = 0 ", "",  "AND bc.id_ct_bp = " +
                                (mnStageSelectedId == SModConsts.SX_IOG_SUP_PUR ? SModSysConsts.EXT_BPSS_CT_BP_SUP : SModSysConsts.EXT_BPSS_CT_BP_CUS) + " ",
                            "bp_key, bp, id_bp, f_dt_code, d.num_ser, CAST(d.num AS UNSIGNED INTEGER), d.num, d.dt, item_key, item, fid_item, f_orig_unit, fid_orig_unit, f_orig_qty ",
                            ((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getExtDatabaseCo().getDbName(),
                            miClient.getSession().getDatabase().getDbName(),
                            ((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getExtDatabase().getDbName(),
                            SModConsts.SX_IOG_SUP_PUR,
                            SModConsts.SX_IOG_SUP_ADJ_PEN,
                            moKeyUnit.getValue()[0]);

                        for (SSomWizardDpsPurchasesSalesSupply row : moWizardDpsPurchasesSalesSupply.getWizardDpsPurchaseSalesSupply()) {
                            rows.add(row);
                        }
                        break;

                    case SModConsts.SX_IOG_ADJ_PUR:
                        moWizardDpsPurchasesSalesReturn.getWizardDpsPurchaseSalesReturn().clear();
                        moWizardDpsPurchasesSalesReturn.read(miClient.getSession(),
                            "AND d.b_del = 0 ", "",  "AND bc.id_ct_bp = " +
                                (mnStageSelectedId == SModConsts.SX_IOG_SUP_PUR ? SModSysConsts.EXT_BPSS_CT_BP_SUP : SModSysConsts.EXT_BPSS_CT_BP_CUS) + " ",
                            "bp_key, bp, id_bp, f_dt_code, d.num_ser, CAST(d.num AS UNSIGNED INTEGER), d.num, d.dt, item_key, item, fid_item, f_orig_unit, fid_orig_unit, f_orig_qty ",
                            ((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getExtDatabaseCo().getDbName(),
                            miClient.getSession().getDatabase().getDbName(),
                            ((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getExtDatabase().getDbName(),
                            SModConsts.SX_IOG_SUP_PUR,
                            SModConsts.SX_IOG_SUP_ADJ_PEN,
                            moKeyUnit.getValue()[0]);

                        for (SSomWizardDpsPurchasesSalesReturn row : moWizardDpsPurchasesSalesReturn.getWizardDpsPurchaseSalesReturn()) {
                            rows.add(row);
                        }
                        break;

                    case SModConsts.SX_IOG_SUP_SAL:
                        moWizardDpsPurchasesSalesSupply.getWizardDpsPurchaseSalesSupply().clear();
                        moWizardDpsPurchasesSalesSupply.read(miClient.getSession(),
                            "AND d.b_del = 0 ", "",  "AND bc.id_ct_bp = " +
                                (mnStageSelectedId == SModConsts.SX_IOG_SUP_PUR ? SModSysConsts.EXT_BPSS_CT_BP_SUP : SModSysConsts.EXT_BPSS_CT_BP_CUS) + " ",
                            "bp_key, bp, id_bp, f_dt_code, d.num_ser, CAST(d.num AS UNSIGNED INTEGER), d.num, d.dt, item_key, item, fid_item, f_orig_unit, fid_orig_unit, f_orig_qty ",
                            ((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getExtDatabaseCo().getDbName(),
                            miClient.getSession().getDatabase().getDbName(),
                            ((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getExtDatabase().getDbName(),
                            SModConsts.SX_IOG_SUP_SAL,
                            SModConsts.SX_IOG_SUP_ADJ_PEN,
                            moKeyUnit.getValue()[0]);

                        for (SSomWizardDpsPurchasesSalesSupply row : moWizardDpsPurchasesSalesSupply.getWizardDpsPurchaseSalesSupply()) {
                            rows.add(row);
                        }
                        break;

                    case SModConsts.SX_IOG_ADJ_SAL:
                        moWizardDpsPurchasesSalesReturn.getWizardDpsPurchaseSalesReturn().clear();
                        moWizardDpsPurchasesSalesReturn.read(miClient.getSession(),
                            "AND d.b_del = 0 ", "",  "AND bc.id_ct_bp = " +
                                (mnStageSelectedId == SModConsts.SX_IOG_SUP_PUR ? SModSysConsts.EXT_BPSS_CT_BP_SUP : SModSysConsts.EXT_BPSS_CT_BP_CUS) + " ",
                            "bp_key, bp, id_bp, f_dt_code, d.num_ser, CAST(d.num AS UNSIGNED INTEGER), d.num, d.dt, item_key, item, fid_item, f_orig_unit, fid_orig_unit, f_orig_qty ",
                            ((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getExtDatabaseCo().getDbName(),
                            miClient.getSession().getDatabase().getDbName(),
                            ((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getExtDatabase().getDbName(),
                            SModConsts.SX_IOG_SUP_SAL,
                            SModConsts.SX_IOG_SUP_ADJ_PEN,
                            moKeyUnit.getValue()[0]);

                        for (SSomWizardDpsPurchasesSalesReturn row : moWizardDpsPurchasesSalesReturn.getWizardDpsPurchaseSalesReturn()) {
                            rows.add(row);
                        }
                        break;

                    default:
                }
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
        }

        /* for (int i = 0; i < moGridPaneForm.getTable().getRowCount(); i++) {
            moGridPaneForm.removeGridRow(i);
        } */

        //moGridPaneForm.clearGridRows();
        mvFormGrids.add(moGridPaneForm);
        moGridPaneForm.populateGrid(rows);
    }

    private void actionDocumentSupply() {
        SDbItem item = null;
        SGuiParams params = null;
        SSomWizardDpsTicketSupply wizardDpsTicketSupply = null;
        SSomWizardDpsPurchasesSalesSupply wizardDpsPurchasesSalesSupply = null;
        SSomWizardDpsPurchasesSalesReturn wizardDpsPurchasesSalesReturn = null;

        if (moGridPaneForm.getTable().getSelectedRow() == -1) {
            miClient.showMsgBoxInformation(SGridConsts.MSG_SELECT_ROW);
        }
        else {
            params = new SGuiParams();

            switch (mnStageSelectedId) {
                case SModConsts.SX_TIC_SUP_RM:
                    wizardDpsTicketSupply = (SSomWizardDpsTicketSupply) moGridPaneForm.getSelectedGridRow();

                    params.getParamsMap().clear();
                    params.getParamsMap().put(SModConsts.SX_TIC_SUP_RM, true);
                    params.getParamsMap().put(SModConsts.SS_IOG_TP, SModSysConsts.SS_IOG_TP_IN_PUR_PUR);
                    params.getParamsMap().put(SModConsts.S_TIC, new int[] { wizardDpsTicketSupply.getPkTicketId() });
                    miClient.getSession().getModule(SModConsts.MOD_SOM_OS, SLibConsts.UNDEFINED).showForm(SModConsts.S_IOG, SLibConsts.UNDEFINED, params);

                    populateStageDpsTicketRows();
                    break;

                case SModConsts.SX_IOG_SUP_PUR:
                case SModConsts.SX_IOG_SUP_SAL:
                    wizardDpsPurchasesSalesSupply = (SSomWizardDpsPurchasesSalesSupply) moGridPaneForm.getSelectedGridRow();

                    item = new SDbItem();
                    if (item.validateExternalItem(miClient.getSession(), wizardDpsPurchasesSalesSupply.getFkItemId()) == 0) {
                        miClient.showMsgBoxWarning("El ítem externo no existe en la base de datos.");
                    }
                    else {
                        params.getParamsMap().clear();
                        params.getParamsMap().put(SModConsts.SS_IOG_TP, mnStageSelectedId == SModConsts.SX_IOG_SUP_PUR ?
                                SModSysConsts.SS_IOG_TP_IN_PUR_PUR : SModSysConsts.SS_IOG_TP_OUT_SAL_SAL);
                        params.getParamsMap().put(SModConsts.SX_EXT_DPS,
                                new int[] { wizardDpsPurchasesSalesSupply.getPkYearId(), wizardDpsPurchasesSalesSupply.getPkDocId(), wizardDpsPurchasesSalesSupply.getPkEntryId() });
                        miClient.getSession().getModule(SModConsts.MOD_SOM_OS, SLibConsts.UNDEFINED).showForm(SModConsts.S_IOG, SLibConsts.UNDEFINED, params);

                        populateStageDpsTicketRows();
                    }
                    break;

                case SModConsts.SX_IOG_ADJ_PUR:
                case SModConsts.SX_IOG_ADJ_SAL:
                    wizardDpsPurchasesSalesReturn = (SSomWizardDpsPurchasesSalesReturn) moGridPaneForm.getSelectedGridRow();

                    item = new SDbItem();
                    if (item.validateExternalItem(miClient.getSession(), wizardDpsPurchasesSalesReturn.getFkItemId()) == 0) {
                        miClient.showMsgBoxWarning("El ítem externo no existe en la base de datos.");
                    }
                    else {
                        params.getParamsMap().clear();
                        params.getParamsMap().put(SModConsts.SS_IOG_TP, mnStageSelectedId == SModConsts.SX_IOG_SUP_PUR ?
                                SModSysConsts.SS_IOG_TP_OUT_PUR_PUR : SModSysConsts.SS_IOG_TP_IN_SAL_SAL);
                        params.getParamsMap().put(SModConsts.SX_EXT_DPS,
                                new int[] { wizardDpsPurchasesSalesSupply.getPkYearId(), wizardDpsPurchasesSalesSupply.getPkDocId(), wizardDpsPurchasesSalesSupply.getPkEntryId() });
                        miClient.getSession().getModule(SModConsts.MOD_SOM_OS, SLibConsts.UNDEFINED).showForm(SModConsts.S_IOG, SLibConsts.UNDEFINED, params);

                        populateStageDpsTicketRows();
                    }
                    break;

                default:
            }
        }
    }

    private void actionDocumentClose() {
        SDbTicket ticket = null;
        SDbDpsAssorted oDbDpsAssorted = null;
        SSomWizardDpsTicketSupply wizardDpsTicketSupply = null;
        SSomWizardDpsPurchasesSalesSupply wizardDpsPurchasesSalesSupply = null;
        SSomWizardDpsPurchasesSalesReturn wizardDpsPurchasesSalesReturn = null;

        if (moGridPaneForm.getTable().getSelectedRow() == -1) {
            miClient.showMsgBoxInformation(SGridConsts.MSG_SELECT_ROW);
        }
        else {
            try {
                switch (mnStageSelectedId) {
                    case SModConsts.SX_TIC_SUP_RM:
                        wizardDpsTicketSupply = (SSomWizardDpsTicketSupply) moGridPaneForm.getSelectedGridRow();
                        ticket = new SDbTicket();

                        ticket.read(miClient.getSession(), new int[] { wizardDpsTicketSupply.getPkTicketId() });

                        if (miClient.showMsgBoxConfirm("Se cerrará para surtido el boleto '" + wizardDpsTicketSupply.getTicket() + "'. \n" +
                            SGuiConsts.MSG_CNF_CONT) == JOptionPane.YES_OPTION) {
                            ticket.setFkUserAssortedId(miClient.getSession().getUser().getPkUserId());
                            ticket.saveField(miClient.getSession().getStatement(), new int[] { wizardDpsTicketSupply.getPkTicketId() }, SDbTicket.FIELD_ASSORTED, true);

                            populateStageDpsTicketRows();
                        }
                        break;

                    case SModConsts.SX_IOG_SUP_PUR:
                    case SModConsts.SX_IOG_SUP_SAL:
                        wizardDpsPurchasesSalesSupply = (SSomWizardDpsPurchasesSalesSupply) moGridPaneForm.getSelectedGridRow();

                        oDbDpsAssorted = new SDbDpsAssorted();
                        if (miClient.showMsgBoxConfirm("Se cerrará para surtido la partida del documento. \n " + SGuiConsts.MSG_CNF_CONT) == JOptionPane.YES_OPTION) {
                            oDbDpsAssorted.closeOpenIog(miClient.getSession(), new int[] {
                                wizardDpsPurchasesSalesSupply.getPkYearId(), wizardDpsPurchasesSalesSupply.getPkDocId(), wizardDpsPurchasesSalesSupply.getPkEntryId() },
                                false);

                            populateStageDpsTicketRows();
                        }

                        break;

                    case SModConsts.SX_IOG_ADJ_PUR:
                    case SModConsts.SX_IOG_ADJ_SAL:
                        wizardDpsPurchasesSalesReturn = (SSomWizardDpsPurchasesSalesReturn) moGridPaneForm.getSelectedGridRow();

                        oDbDpsAssorted = new SDbDpsAssorted();

                        if (miClient.showMsgBoxConfirm("Se cerrará para devolución la partida del documento. \n " + SGuiConsts.MSG_CNF_CONT) == JOptionPane.YES_OPTION) {
                             oDbDpsAssorted.closeOpenIog(miClient.getSession(), new int[] {
                                wizardDpsPurchasesSalesReturn.getPkYearId(), wizardDpsPurchasesSalesReturn.getPkDocId(), wizardDpsPurchasesSalesReturn.getPkEntryId() },
                                false);

                            populateStageDpsTicketRows();
                        }

                        break;
                    default:
                }
            }
            catch (SQLException e) {
                SLibUtils.showException(this, e);
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
        }
    }

    private void actionSelectUnit() {
        if (jbSelect.isEnabled()) {

            if (moKeyUnit.getSelectedIndex() > 0 &&
                miClient.showMsgBoxConfirm("Tiene seleccionada la unidad: '" + moKeyUnit.getSelectedItem().getItem() + "'. \n" + SGuiConsts.MSG_CNF_CONT) == JOptionPane.YES_OPTION) {

                moKeyUnit.setEnabled(false);
                jbSelect.setEnabled(false);
            }
        }
    }

    /*
    * Public methods
    */

    @Override
    public void addAllListeners() {
        jbActionDocumentSupply.addActionListener(this);
        jbActionDocumentClose.addActionListener(this);
        jbNext.addActionListener(this);
        jbPrevious.addActionListener(this);
        jbSelect.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbActionDocumentSupply.removeActionListener(this);
        jbActionDocumentClose.removeActionListener(this);
        jbNext.removeActionListener(this);
        jbPrevious.removeActionListener(this);
        jbSelect.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyUnit, SModConsts.SU_UNIT, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyTicketOrigin, SModConsts.SU_TIC_ORIG, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyTicketDestination, SModConsts.SU_TIC_DEST, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyTicketScale, SModConsts.SU_SCA, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setValue(int type, Object value) {
         switch (type) {
            case SModConsts.SU_UNIT:
                moKeyUnit.setValue(value);

                if (moKeyUnit.getSelectedIndex() > 0) {
                    moKeyUnit.setEnabled(false);
                    jbSelect.setEnabled(false);
                }

                populateStages(SModConsts.SX_TIC_SUP_RM, true);
                break;

            case SGuiConsts.PARAM_DATE:
                mtDate = (Date) value;
                break;
            default:
        }
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent evt) {
        if (evt.getSource() instanceof JButton) {
            JButton button = (JButton) evt.getSource();

            if (button == jbNext) {
                turnOnStage(true);
            }
            else if (button == jbPrevious) {
                turnOnStage(false);
            }
            else if (button == jbActionDocumentSupply) {
                actionDocumentSupply();
            }
            else if (button == jbActionDocumentClose) {
                actionDocumentClose();
            }
            else if (button == jbSelect) {
                actionSelectUnit();
            }
        }
    }
}
