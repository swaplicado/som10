/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package som.mod.som.form;

import java.awt.BorderLayout;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.util.Date;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JDialog;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistryUser;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import som.gui.SGuiClientSessionCustom;
import som.mod.SModConsts;
import som.mod.som.db.SRowStockCardex;

/**
 *
 * @author Juan Barajas, Sergio Flores
 * 2018-11-22, Sergio Flores:
 * 1) Adición de referencia y observaciones de movimientos de almacén a vistas y tarjeta auxiliar.
 */
public class SDialogStockCardex extends JDialog implements ActionListener {

    private SGuiClient miClient;
    private SGridPaneForm moGridStockMoves;

    private boolean mbFirstTime;

    private int mnParamYear;
    private int mnItemId;
    private int mnUnitId;
    private Date mtParamDateCutOff;
    private int[] manWarehouseKey;
    private int mnDivisionId;

    /** Creates new form SDialogStockCardex */
    public SDialogStockCardex(SGuiClient client) {
        super(client.getFrame(), true);
        miClient = client;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpParams = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlWarehouse = new javax.swing.JLabel();
        moTextBranchName = new sa.lib.gui.bean.SBeanFieldText();
        moTextBranchCode = new sa.lib.gui.bean.SBeanFieldText();
        moTextWarehouseName = new sa.lib.gui.bean.SBeanFieldText();
        moTextWarehouseCode = new sa.lib.gui.bean.SBeanFieldText();
        jPanel14 = new javax.swing.JPanel();
        jlDivision = new javax.swing.JLabel();
        moTextDivisionName = new sa.lib.gui.bean.SBeanFieldText();
        moTextDivisionCode = new sa.lib.gui.bean.SBeanFieldText();
        jPanel7 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moTextItemName = new sa.lib.gui.bean.SBeanFieldText();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        moTextItemCode = new sa.lib.gui.bean.SBeanFieldText();
        jPanel5 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jlDateCutOff = new javax.swing.JLabel();
        moTextDateCutOff = new sa.lib.gui.bean.SBeanFieldText();
        jPanel9 = new javax.swing.JPanel();
        jlYear = new javax.swing.JLabel();
        moIntYear = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel16 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlIn = new javax.swing.JLabel();
        moDecIn = new sa.lib.gui.bean.SBeanFieldDecimal();
        moTextInUnitSymbol = new sa.lib.gui.bean.SBeanFieldText();
        jPanel12 = new javax.swing.JPanel();
        jlOut = new javax.swing.JLabel();
        moDecOut = new sa.lib.gui.bean.SBeanFieldDecimal();
        moTextOutUnitSymbol = new sa.lib.gui.bean.SBeanFieldText();
        jPanel13 = new javax.swing.JPanel();
        jlStock = new javax.swing.JLabel();
        moDecStock = new sa.lib.gui.bean.SBeanFieldDecimal();
        moTextStockUnitSymbol = new sa.lib.gui.bean.SBeanFieldText();
        jpStockMoves = new javax.swing.JPanel();
        jpControls = new javax.swing.JPanel();
        jbClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tarjeta auxiliar de almacén");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpParams.setLayout(new java.awt.BorderLayout(5, 0));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Almacén e ítem:"));
        jPanel4.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel8.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlWarehouse.setText("Almacén:");
        jlWarehouse.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel8.add(jlWarehouse);

        moTextBranchName.setEditable(false);
        moTextBranchName.setText("sBeanFieldText3");
        jPanel8.add(moTextBranchName);

        moTextBranchCode.setEditable(false);
        moTextBranchCode.setText("sBeanFieldText4");
        moTextBranchCode.setPreferredSize(new java.awt.Dimension(55, 23));
        jPanel8.add(moTextBranchCode);

        moTextWarehouseName.setEditable(false);
        moTextWarehouseName.setText("sBeanFieldText5");
        moTextWarehouseName.setPreferredSize(new java.awt.Dimension(155, 23));
        jPanel8.add(moTextWarehouseName);

        moTextWarehouseCode.setEditable(false);
        moTextWarehouseCode.setText("sBeanFieldText6");
        moTextWarehouseCode.setPreferredSize(new java.awt.Dimension(55, 23));
        jPanel8.add(moTextWarehouseCode);

        jPanel4.add(jPanel8);

        jPanel14.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlDivision.setText("División:");
        jlDivision.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel14.add(jlDivision);

        moTextDivisionName.setEditable(false);
        moTextDivisionName.setText("sBeanFieldText5");
        moTextDivisionName.setPreferredSize(new java.awt.Dimension(160, 23));
        jPanel14.add(moTextDivisionName);

        moTextDivisionCode.setEditable(false);
        moTextDivisionCode.setText("sBeanFieldText6");
        moTextDivisionCode.setPreferredSize(new java.awt.Dimension(55, 23));
        jPanel14.add(moTextDivisionCode);

        jPanel4.add(jPanel14);

        jPanel7.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlItem.setText("Ítem:");
        jlItem.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jlItem);

        moTextItemName.setEditable(false);
        moTextItemName.setText("sBeanFieldText2");
        moTextItemName.setPreferredSize(new java.awt.Dimension(380, 23));
        jPanel7.add(moTextItemName);

        jPanel4.add(jPanel7);

        jPanel1.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jLabel1.setText("Ítem código:");
        jLabel1.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jLabel1);

        moTextItemCode.setEditable(false);
        moTextItemCode.setText("sBeanFieldText1");
        jPanel1.add(moTextItemCode);

        jPanel4.add(jPanel1);

        jpParams.add(jPanel4, java.awt.BorderLayout.WEST);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Fecha de corte:"));
        jPanel5.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel10.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlDateCutOff.setText("Fecha corte:");
        jlDateCutOff.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(jlDateCutOff);

        moTextDateCutOff.setEditable(false);
        moTextDateCutOff.setText("sBeanFieldText7");
        moTextDateCutOff.setPreferredSize(new java.awt.Dimension(65, 23));
        jPanel10.add(moTextDateCutOff);

        jPanel5.add(jPanel10);

        jPanel9.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlYear.setText("Ejercicio:");
        jlYear.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jlYear);

        moIntYear.setEditable(false);
        moIntYear.setBackground(new java.awt.Color(153, 204, 255));
        moIntYear.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel9.add(moIntYear);

        jPanel5.add(jPanel9);

        jPanel16.setLayout(new java.awt.FlowLayout(0, 5, 0));
        jPanel5.add(jPanel16);

        jpParams.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Existencias:"));
        jPanel6.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel11.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlIn.setText("Entradas:");
        jlIn.setPreferredSize(new java.awt.Dimension(75, 23));
        jlIn.setRequestFocusEnabled(false);
        jPanel11.add(jlIn);

        moDecIn.setEditable(false);
        jPanel11.add(moDecIn);

        moTextInUnitSymbol.setEditable(false);
        moTextInUnitSymbol.setText("sBeanFieldText1");
        moTextInUnitSymbol.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel11.add(moTextInUnitSymbol);

        jPanel6.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlOut.setText("Salidas:");
        jlOut.setPreferredSize(new java.awt.Dimension(75, 23));
        jlOut.setRequestFocusEnabled(false);
        jPanel12.add(jlOut);

        moDecOut.setEditable(false);
        jPanel12.add(moDecOut);

        moTextOutUnitSymbol.setEditable(false);
        moTextOutUnitSymbol.setText("sBeanFieldText2");
        moTextOutUnitSymbol.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel12.add(moTextOutUnitSymbol);

        jPanel6.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlStock.setText("Existencias:");
        jlStock.setPreferredSize(new java.awt.Dimension(75, 23));
        jlStock.setRequestFocusEnabled(false);
        jPanel13.add(jlStock);

        moDecStock.setEditable(false);
        moDecStock.setBackground(new java.awt.Color(153, 204, 255));
        jPanel13.add(moDecStock);

        moTextStockUnitSymbol.setEditable(false);
        moTextStockUnitSymbol.setBackground(new java.awt.Color(153, 204, 255));
        moTextStockUnitSymbol.setText("sBeanFieldText2");
        moTextStockUnitSymbol.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel13.add(moTextStockUnitSymbol);

        jPanel6.add(jPanel13);

        jpParams.add(jPanel6, java.awt.BorderLayout.EAST);

        getContentPane().add(jpParams, java.awt.BorderLayout.NORTH);

        jpStockMoves.setBorder(javax.swing.BorderFactory.createTitledBorder("Movimientos de inventarios:"));
        jpStockMoves.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jpStockMoves, java.awt.BorderLayout.CENTER);

        jpControls.setLayout(new java.awt.FlowLayout(2));

        jbClose.setText("Cerrar");
        jbClose.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbClose);

        getContentPane().add(jpControls, java.awt.BorderLayout.SOUTH);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-976)/2, (screenSize.height-588)/2, 976, 588);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        SGuiUtils.setWindowBounds(this, 960, 600);

        moTextBranchName.setTextSettings(SGuiUtils.getLabelName(jlWarehouse.getText()), 50);
        moTextBranchCode.setTextSettings(SGuiUtils.getLabelName(jlWarehouse.getText()), 25);
        moTextWarehouseName.setTextSettings(SGuiUtils.getLabelName(jlWarehouse.getText()), 50);
        moTextWarehouseCode.setTextSettings(SGuiUtils.getLabelName(jlWarehouse.getText()), 25);
        moTextDivisionName.setTextSettings(SGuiUtils.getLabelName(jlDivision.getText()), 50);
        moTextDivisionCode.setTextSettings(SGuiUtils.getLabelName(jlDivision.getText()), 25);
        moTextDateCutOff.setTextSettings(SGuiUtils.getLabelName(jlDateCutOff.getText()), 25);
        moIntYear.setIntegerSettings(SGuiUtils.getLabelName(jlYear.getText()), SGuiConsts.GUI_TYPE_INT_CAL_YEAR, true);
        moDecIn.setDecimalSettings(SGuiUtils.getLabelName(jlIn.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moDecOut.setDecimalSettings(SGuiUtils.getLabelName(jlOut.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moDecStock.setDecimalSettings(SGuiUtils.getLabelName(jlStock.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moTextInUnitSymbol.setTextSettings(SGuiUtils.getLabelName(jlIn.getText()), 15);
        moTextOutUnitSymbol.setTextSettings(SGuiUtils.getLabelName(jlOut.getText()), 15);
        moTextStockUnitSymbol.setTextSettings(SGuiUtils.getLabelName(jlStock.getText()), 15);

        moGridStockMoves = new SGridPaneForm(miClient, SModConsts.S_STK, SLibConsts.UNDEFINED, "Movimientos inventarios") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                SGridColumnForm[] columns = new SGridColumnForm[25];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CO, "Sucursal");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CO, "Almacén");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CO, "División");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_INT_1B, "# movimiento");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Tipo movimiento");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Tipo ajuste");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Entradas");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Salidas");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Existencias");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Referencia");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Observaciones");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_REG_NUM, "Folio docto inv");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha docto inv");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Tipo docto CV");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_REG_NUM, "Folio docto CV");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha docto CV");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Tipo docto CV ajuste");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_REG_NUM, "Folio docto CV ajuste");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha docto CV ajuste");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, "Usr. creación");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, "Creación");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, "Usr. modificación");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, "Modificación");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        jpStockMoves.add(moGridStockMoves, BorderLayout.CENTER);

        jbClose.addActionListener(this);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jbClose.requestFocus();
        }
    }

    @SuppressWarnings("unchecked")
    private void showStockMoves() {
        double in = 0;
        double inSum = 0;
        double out = 0;
        double outSum = 0;
        double stock = 0;
        Vector<SGridRow> rows = new Vector<>();
        String sDatabaseCoExtName = ((SGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getExtDatabaseCo().getDbName();
        String sql = "";

        try {
            sql = "SELECT s.id_year, s.id_item, s.id_unit, s.id_co, s.id_cob, s.id_wah, s.id_mov, " + // 7
                    "s.dt, st.name, ad.code AS f_adj, cob.code, ent.code, s.mov_in, s.mov_out, u.code, " + // 15
                    "iog.dt, iogt.code, CONCAT(iogt.code, '-', iog.num) AS f_iog_num, iog_cob.code, iog_ent.code, un.name, iog.ts_usr_ins, ue.name, iog.ts_usr_upd, " + // 24
                    "dpst.code, CONCAT(dps.num_ser, IF(length(dps.num_ser) = 0, '', '-'), dps.num) AS f_dps_num, dps.dt, dps_cob.code, " + // 28
                    "adjt.code, CONCAT(adj.num_ser, IF(length(adj.num_ser) = 0, '', '-'), adj.num) AS f_adj_num, adj.dt, adj_cob.code, d.code, " + // 32
                    "iog.ref, COALESCE(note.note, '') AS _note " + // 34
                    "FROM " + SModConsts.TablesMap.get(SModConsts.S_STK) + " AS s " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.SU_UNIT) + " AS u ON s.id_unit = u.id_unit " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.CU_COB) + " AS cob ON s.id_co = cob.id_co AND s.id_cob = cob.id_cob " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.CU_WAH) + " AS ent ON s.id_co = ent.id_co AND s.id_cob = ent.id_cob AND s.id_wah = ent.id_wah " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.SS_IOG_TP) + " AS st ON s.fk_iog_ct = st.id_iog_ct AND s.fk_iog_cl = st.id_iog_cl AND s.fk_iog_tp = st.id_iog_tp " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.S_IOG) + " AS iog ON s.fk_iog = iog.id_iog " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.SS_IOG_TP) + " AS iogt ON iog.fk_iog_ct = iogt.id_iog_ct AND iog.fk_iog_cl = iogt.id_iog_cl AND iog.fk_iog_tp = iogt.id_iog_tp " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.SU_IOG_ADJ_TP) + " AS ad ON iog.fk_iog_adj_tp = ad.id_iog_adj_tp " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.CU_COB) + " AS iog_cob ON iog.fk_wah_co = iog_cob.id_co AND iog.fk_wah_cob = iog_cob.id_cob " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.CU_WAH) + " AS iog_ent ON iog.fk_wah_co = iog_cob.id_co AND iog.fk_wah_cob = iog_cob.id_cob AND iog.fk_wah_wah = iog_ent.id_wah " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.CU_DIV) + " AS d ON iog.fk_div = d.id_div " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.CU_USR) + " AS un ON iog.fk_usr_ins = un.id_usr " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.CU_USR) + " AS ue ON iog.fk_usr_upd = ue.id_usr " +
                    "LEFT OUTER JOIN " + SModConsts.TablesMap.get(SModConsts.S_IOG_NOTE) + " AS note ON iog.id_iog = note.id_iog AND note.id_note = 1 " +
                    "LEFT OUTER JOIN " + sDatabaseCoExtName + ".trn_dps AS dps ON iog.fk_ext_dps_year_n = dps.id_year AND iog.fk_ext_dps_doc_n = dps.id_doc " +
                    "LEFT OUTER JOIN erp.trnu_tp_dps AS dpst ON dps.fid_ct_dps = dpst.id_ct_dps AND dps.fid_cl_dps = dpst.id_cl_dps AND dps.fid_tp_dps = dpst.id_tp_dps " +
                    "LEFT OUTER JOIN erp.bpsu_bpb AS dps_cob ON dps.fid_cob = dps_cob.id_bpb " +
                    "LEFT OUTER JOIN " + sDatabaseCoExtName + ".trn_dps AS adj ON iog.fk_ext_adj_year_n = adj.id_year AND iog.fk_ext_adj_doc_n = adj.id_doc " +
                    "LEFT OUTER JOIN erp.trnu_tp_dps AS adjt ON adj.fid_ct_dps = adjt.id_ct_dps AND adj.fid_cl_dps = adjt.id_cl_dps AND adj.fid_tp_dps = adjt.id_tp_dps " +
                    "LEFT OUTER JOIN erp.bpsu_bpb AS adj_cob ON adj.fid_cob = adj_cob.id_bpb " +
                    "WHERE s.id_year = " + mnParamYear + " AND s.id_item = " + mnItemId + " AND s.id_unit = " + mnUnitId + " " +
                    (manWarehouseKey[0] == SLibConsts.UNDEFINED ? "" : "AND s.id_co = " + manWarehouseKey[0] + " ") +
                    (manWarehouseKey[1] == SLibConsts.UNDEFINED ? "" : "AND s.id_cob = " + manWarehouseKey[1] + " ") +
                    (manWarehouseKey[2] == SLibConsts.UNDEFINED ? "" : "AND s.id_wah = " + manWarehouseKey[2] + " ") +
                    (mnDivisionId == SLibConsts.UNDEFINED ? "" : "AND s.id_div = " + mnDivisionId + " ") +
                    "AND s.b_del = 0 AND s.dt <= '" + SLibUtils.DbmsDateFormatDate.format(mtParamDateCutOff) + "' " +
                    "ORDER BY s.dt, s.id_year, s.id_item, s.id_unit, s.id_cob, s.id_wah, s.id_mov, st.name, iog.num ";

            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);

            while (resultSet.next()) {
                SRowStockCardex row = new SRowStockCardex();
                row.setNumber(resultSet.getInt(7));
                row.setDate(resultSet.getDate(8));
                row.setMoveType(resultSet.getString(9));
                row.setIogAdjType(resultSet.getString(10));
                row.setBranch(resultSet.getString(11));
                row.setWarehouse(resultSet.getString(12));
                row.setDivision(resultSet.getString(33));

                inSum += in = resultSet.getDouble(13);
                outSum += out = resultSet.getDouble(14);
                stock += (in - out);

                row.setIn(in);
                row.setOut(out);
                row.setStock(stock);
                row.setUnit(resultSet.getString(15));
                row.setReference(resultSet.getString("iog.ref"));
                row.setNote(resultSet.getString("_note"));
                row.setIogNumber(resultSet.getString(18));
                row.setIogDate(resultSet.getDate(16));
                row.setDpsType(resultSet.getString(25));
                row.setDpsNumber(resultSet.getString(26));
                row.setDpsDate(resultSet.getDate(27));
                row.setAdjType(resultSet.getString(29));
                row.setAdjNumber(resultSet.getString(30));
                row.setAdjDate(resultSet.getDate(31));
                row.setUserInsert(resultSet.getString(21));
                row.setDateUserInsert(resultSet.getTimestamp(22));
                row.setUserUpdate(resultSet.getString(23));
                row.setDateUserUpdate(resultSet.getTimestamp(24));

                rows.add(row);
            }

            moGridStockMoves.populateGrid(rows);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }

        moDecIn.setValue(inSum);
        moDecOut.setValue(outSum);
        moDecStock.setValue(stock);
    }

    public void actionClose() {
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbClose;
    private javax.swing.JLabel jlDateCutOff;
    private javax.swing.JLabel jlDivision;
    private javax.swing.JLabel jlIn;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlOut;
    private javax.swing.JLabel jlStock;
    private javax.swing.JLabel jlWarehouse;
    private javax.swing.JLabel jlYear;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpParams;
    private javax.swing.JPanel jpStockMoves;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecIn;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecOut;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecStock;
    private sa.lib.gui.bean.SBeanFieldInteger moIntYear;
    private sa.lib.gui.bean.SBeanFieldText moTextBranchCode;
    private sa.lib.gui.bean.SBeanFieldText moTextBranchName;
    private sa.lib.gui.bean.SBeanFieldText moTextDateCutOff;
    private sa.lib.gui.bean.SBeanFieldText moTextDivisionCode;
    private sa.lib.gui.bean.SBeanFieldText moTextDivisionName;
    private sa.lib.gui.bean.SBeanFieldText moTextInUnitSymbol;
    private sa.lib.gui.bean.SBeanFieldText moTextItemCode;
    private sa.lib.gui.bean.SBeanFieldText moTextItemName;
    private sa.lib.gui.bean.SBeanFieldText moTextOutUnitSymbol;
    private sa.lib.gui.bean.SBeanFieldText moTextStockUnitSymbol;
    private sa.lib.gui.bean.SBeanFieldText moTextWarehouseCode;
    private sa.lib.gui.bean.SBeanFieldText moTextWarehouseName;
    // End of variables declaration//GEN-END:variables

    public void setFormParams(final Date dateCutOff, final int itemId, final int unitId, final int[] warehouseKey, final int divisionId) {
        mnParamYear = SLibTimeUtils.digestYear(dateCutOff)[0];
        mnItemId = itemId;
        mnUnitId = unitId;
        mtParamDateCutOff = dateCutOff;
        manWarehouseKey = warehouseKey;
        mnDivisionId = divisionId;

        if (itemId == SLibConsts.UNDEFINED) {
            moTextBranchName.setValue("");
            moTextBranchCode.setValue("");
            moTextWarehouseName.setValue("");
            moTextWarehouseCode.setValue("");
            moTextDivisionName.setValue("");
            moTextDivisionCode.setValue("");
            moTextItemName.setValue("");
            moTextItemCode.setValue("");

            moTextInUnitSymbol.setValue("");
            moTextOutUnitSymbol.setValue("");
            moTextStockUnitSymbol.setValue("");
        }
        else {

            moTextBranchName.setValue(miClient.getSession().readField(SModConsts.CU_COB, new int[] { manWarehouseKey[0], manWarehouseKey[1] }, SDbRegistryUser.FIELD_NAME));
            moTextBranchCode.setValue(miClient.getSession().readField(SModConsts.CU_COB, new int[] { manWarehouseKey[0], manWarehouseKey[1] }, SDbRegistryUser.FIELD_CODE));

            if (manWarehouseKey[2] != SLibConsts.UNDEFINED) {
                moTextWarehouseName.setValue(miClient.getSession().readField(SModConsts.CU_WAH, manWarehouseKey, SDbRegistryUser.FIELD_NAME));
                moTextWarehouseCode.setValue(miClient.getSession().readField(SModConsts.CU_WAH, manWarehouseKey, SDbRegistryUser.FIELD_CODE));
            }
            
            if (mnDivisionId != SLibConsts.UNDEFINED) {
                moTextDivisionName.setValue(miClient.getSession().readField(SModConsts.CU_DIV, new int[] { mnDivisionId }, SDbRegistryUser.FIELD_NAME));
                moTextDivisionCode.setValue(miClient.getSession().readField(SModConsts.CU_DIV, new int[] { mnDivisionId }, SDbRegistryUser.FIELD_CODE));
            }
            
            moTextItemName.setValue(miClient.getSession().readField(SModConsts.SU_ITEM, new int[] { itemId }, SDbRegistryUser.FIELD_NAME));
            moTextItemCode.setValue(miClient.getSession().readField(SModConsts.SU_ITEM, new int[] { itemId }, SDbRegistryUser.FIELD_CODE));
            moTextInUnitSymbol.setValue(miClient.getSession().readField(SModConsts.SU_UNIT, new int[] { unitId }, SDbRegistryUser.FIELD_CODE));
            moTextOutUnitSymbol.setValue(moTextInUnitSymbol.getValue());
            moTextStockUnitSymbol.setValue(moTextInUnitSymbol.getValue());

            moIntYear.setValue(mnParamYear);
            moTextDateCutOff.setValue(SLibUtils.DateFormatDate.format(mtParamDateCutOff));
        }
        showStockMoves();
    }

    public void formReset() {
        mbFirstTime = true;

        moTextBranchName.setValue("");
        moTextBranchCode.setValue("");
        moTextWarehouseName.setValue("");
        moTextWarehouseCode.setValue("");
        moTextDivisionName.setValue("");
        moTextDivisionCode.setValue("");
        moTextItemName.setValue("");
        moTextItemCode.setValue("");

        moTextInUnitSymbol.setValue("");
        moTextOutUnitSymbol.setValue("");
        moTextStockUnitSymbol.setValue("");
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbClose) {
                actionClose();
            }
        }
    }
}
