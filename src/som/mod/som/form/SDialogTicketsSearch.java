/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import sa.gui.util.SUtilConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldInteger;
import sa.lib.gui.bean.SBeanFormDialog;
import som.mod.SModConsts;
import som.mod.SModSysConsts;
import som.mod.cfg.db.SDbUser;
import som.mod.som.db.SDbTicket;
import som.mod.som.db.SSomConsts;

/**
 *
 * @author Sergio Flores, Isabel Servín
 */
public final class SDialogTicketsSearch extends SBeanFormDialog implements ActionListener {

    private int mnCurrentTicketIndex;
    private ArrayList<SDbTicket> maTickets;
    private HashMap<Integer, String> moTicketStatuses;
    boolean mbIsUserScaleSupervisor;
    
    /**
     * Creates new form SDialogTicketsSearch.
     * This is a one-time-use dialog.
     * @param client GUI client.
     */
    public SDialogTicketsSearch(SGuiClient client) {
        setFormSettings(client, 0, 0, 0, "Búsqueda de boletos");
        initComponents();
        initComponentsCustom();
        initForm();
        resetForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel16 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jlNumberToSearch = new javax.swing.JLabel();
        moIntNumberToSearch = new sa.lib.gui.bean.SBeanFieldInteger();
        jbSearch = new javax.swing.JButton();
        jbReset = new javax.swing.JButton();
        jPanel18 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        jtfNumber = new javax.swing.JTextField();
        jlTicketStatus = new javax.swing.JLabel();
        jtfTicketStatus = new javax.swing.JTextField();
        jlAccessWarning = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jlScale = new javax.swing.JLabel();
        jtfScale = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jlProducer = new javax.swing.JLabel();
        jtfProducer = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        jtfItem = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jlInputSource = new javax.swing.JLabel();
        jtfInputSource = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jlPlate = new javax.swing.JLabel();
        jtfPlate = new javax.swing.JTextField();
        jlPlateCage = new javax.swing.JLabel();
        jtfPlateCage = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jlDriver = new javax.swing.JLabel();
        jtfDriver = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jlWeightSource = new javax.swing.JLabel();
        jtfWeightSource = new javax.swing.JTextField();
        jtfWeightSourceUnit = new javax.swing.JTextField();
        jchkWeightSourceAvailable = new javax.swing.JCheckBox();
        jPanel10 = new javax.swing.JPanel();
        jlWeightDestinyArrival = new javax.swing.JLabel();
        jtfWeightDestinyArrival = new javax.swing.JTextField();
        jtfWeightDestinyArrivalUnit = new javax.swing.JTextField();
        jlPackingWeightArrival = new javax.swing.JLabel();
        jtfPackingWeightArrival = new javax.swing.JTextField();
        jtfPackingWeightArrivalUnit = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jlWeightDestinyDeparture = new javax.swing.JLabel();
        jtfWeightDestinyDeparture = new javax.swing.JTextField();
        jtfWeightDestinyDepartureUnit = new javax.swing.JTextField();
        jlPackingWeightDeparture = new javax.swing.JLabel();
        jtfPackingWeightDeparture = new javax.swing.JTextField();
        jtfPackingWeightDepartureUnit = new javax.swing.JTextField();
        jPanel17 = new javax.swing.JPanel();
        jlWeightDestinyGross = new javax.swing.JLabel();
        jtfWeightDestinyGross = new javax.swing.JTextField();
        jtfWeightDestinyGrossUnit = new javax.swing.JTextField();
        jlWeightDestinyNet = new javax.swing.JLabel();
        jtfWeightDestinyNet = new javax.swing.JTextField();
        jtfWeightDestinyNetUnit = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jlDatetimeArrival = new javax.swing.JLabel();
        jtfDatetimeArrival = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jlDatetimeDeparture = new javax.swing.JLabel();
        jtfDatetimeDeparture = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jlNote = new javax.swing.JLabel();
        jtfNote = new javax.swing.JTextField();
        jPanel15 = new javax.swing.JPanel();
        jlDbInsert = new javax.swing.JLabel();
        jtfDbInsert = new javax.swing.JTextField();
        jlDbUpdate = new javax.swing.JLabel();
        jtfDbUpdate = new javax.swing.JTextField();
        jchkDeleted = new javax.swing.JCheckBox();
        jPanel19 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jbGoFirst = new javax.swing.JButton();
        jbGoPrev = new javax.swing.JButton();
        jlCurrentTicket = new javax.swing.JLabel();
        jbGoNext = new javax.swing.JButton();
        jbGoLast = new javax.swing.JButton();

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del boleto:"));
        jPanel16.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel1.setLayout(new java.awt.GridLayout(16, 1, 0, 5));

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumberToSearch.setText("Boleto a buscar:");
        jlNumberToSearch.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel2.add(jlNumberToSearch);
        jPanel2.add(moIntNumberToSearch);

        jbSearch.setText("Buscar");
        jbSearch.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbSearch);

        jbReset.setText("Limpiar");
        jbReset.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbReset);

        jPanel1.add(jPanel2);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumber.setText("Boleto:");
        jlNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel18.add(jlNumber);

        jtfNumber.setEditable(false);
        jtfNumber.setText("TEXT");
        jtfNumber.setFocusable(false);
        jtfNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel18.add(jtfNumber);

        jlTicketStatus.setText(" Estatus:");
        jlTicketStatus.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel18.add(jlTicketStatus);

        jtfTicketStatus.setEditable(false);
        jtfTicketStatus.setText("TEXT");
        jtfTicketStatus.setFocusable(false);
        jtfTicketStatus.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel18.add(jtfTicketStatus);

        jlAccessWarning.setForeground(java.awt.Color.red);
        jlAccessWarning.setText("¡La información del boleto está restringida!");
        jlAccessWarning.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel18.add(jlAccessWarning);

        jPanel1.add(jPanel18);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlScale.setText("Báscula:");
        jlScale.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlScale);

        jtfScale.setEditable(false);
        jtfScale.setText("TEXT");
        jtfScale.setFocusable(false);
        jtfScale.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel3.add(jtfScale);

        jPanel1.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProducer.setText("Proveedor:");
        jlProducer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlProducer);

        jtfProducer.setEditable(false);
        jtfProducer.setText("TEXT");
        jtfProducer.setFocusable(false);
        jtfProducer.setPreferredSize(new java.awt.Dimension(600, 23));
        jPanel4.add(jtfProducer);

        jPanel1.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Ítem:");
        jlItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlItem);

        jtfItem.setEditable(false);
        jtfItem.setText("TEXT");
        jtfItem.setFocusable(false);
        jtfItem.setPreferredSize(new java.awt.Dimension(600, 23));
        jPanel5.add(jtfItem);

        jPanel1.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlInputSource.setText("Origen insumo:");
        jlInputSource.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlInputSource);

        jtfInputSource.setEditable(false);
        jtfInputSource.setText("TEXT");
        jtfInputSource.setFocusable(false);
        jtfInputSource.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel6.add(jtfInputSource);

        jPanel1.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPlate.setText("Placas vehículo:");
        jlPlate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlPlate);

        jtfPlate.setEditable(false);
        jtfPlate.setText("TEXT");
        jtfPlate.setFocusable(false);
        jtfPlate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jtfPlate);

        jlPlateCage.setText(" Placas caja:");
        jlPlateCage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlPlateCage);

        jtfPlateCage.setEditable(false);
        jtfPlateCage.setText("TEXT");
        jtfPlateCage.setFocusable(false);
        jtfPlateCage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jtfPlateCage);

        jPanel1.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDriver.setText("Chofer vehículo:");
        jlDriver.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlDriver);

        jtfDriver.setEditable(false);
        jtfDriver.setText("TEXT");
        jtfDriver.setFocusable(false);
        jtfDriver.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel8.add(jtfDriver);

        jPanel1.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeightSource.setText("Peso origen:");
        jlWeightSource.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlWeightSource);

        jtfWeightSource.setEditable(false);
        jtfWeightSource.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfWeightSource.setText("0.00");
        jtfWeightSource.setFocusable(false);
        jtfWeightSource.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jtfWeightSource);

        jtfWeightSourceUnit.setEditable(false);
        jtfWeightSourceUnit.setText("TEXT");
        jtfWeightSourceUnit.setFocusable(false);
        jtfWeightSourceUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel9.add(jtfWeightSourceUnit);

        jchkWeightSourceAvailable.setText("Peso origen disponible");
        jchkWeightSourceAvailable.setEnabled(false);
        jPanel9.add(jchkWeightSourceAvailable);

        jPanel1.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeightDestinyArrival.setText("Peso entrada:");
        jlWeightDestinyArrival.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlWeightDestinyArrival);

        jtfWeightDestinyArrival.setEditable(false);
        jtfWeightDestinyArrival.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfWeightDestinyArrival.setText("0.00");
        jtfWeightDestinyArrival.setFocusable(false);
        jtfWeightDestinyArrival.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jtfWeightDestinyArrival);

        jtfWeightDestinyArrivalUnit.setEditable(false);
        jtfWeightDestinyArrivalUnit.setText("TEXT");
        jtfWeightDestinyArrivalUnit.setFocusable(false);
        jtfWeightDestinyArrivalUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel10.add(jtfWeightDestinyArrivalUnit);

        jlPackingWeightArrival.setText(" Empaque entrada:");
        jlPackingWeightArrival.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlPackingWeightArrival);

        jtfPackingWeightArrival.setEditable(false);
        jtfPackingWeightArrival.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfPackingWeightArrival.setText("0.00");
        jtfPackingWeightArrival.setFocusable(false);
        jtfPackingWeightArrival.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jtfPackingWeightArrival);

        jtfPackingWeightArrivalUnit.setEditable(false);
        jtfPackingWeightArrivalUnit.setText("TEXT");
        jtfPackingWeightArrivalUnit.setFocusable(false);
        jtfPackingWeightArrivalUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel10.add(jtfPackingWeightArrivalUnit);

        jPanel1.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeightDestinyDeparture.setText("Peso salida:");
        jlWeightDestinyDeparture.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlWeightDestinyDeparture);

        jtfWeightDestinyDeparture.setEditable(false);
        jtfWeightDestinyDeparture.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfWeightDestinyDeparture.setText("0.00");
        jtfWeightDestinyDeparture.setFocusable(false);
        jtfWeightDestinyDeparture.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jtfWeightDestinyDeparture);

        jtfWeightDestinyDepartureUnit.setEditable(false);
        jtfWeightDestinyDepartureUnit.setText("TEXT");
        jtfWeightDestinyDepartureUnit.setFocusable(false);
        jtfWeightDestinyDepartureUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel11.add(jtfWeightDestinyDepartureUnit);

        jlPackingWeightDeparture.setText(" Empaque salida:");
        jlPackingWeightDeparture.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlPackingWeightDeparture);

        jtfPackingWeightDeparture.setEditable(false);
        jtfPackingWeightDeparture.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfPackingWeightDeparture.setText("0.00");
        jtfPackingWeightDeparture.setFocusable(false);
        jtfPackingWeightDeparture.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jtfPackingWeightDeparture);

        jtfPackingWeightDepartureUnit.setEditable(false);
        jtfPackingWeightDepartureUnit.setText("TEXT");
        jtfPackingWeightDepartureUnit.setFocusable(false);
        jtfPackingWeightDepartureUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel11.add(jtfPackingWeightDepartureUnit);

        jPanel1.add(jPanel11);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeightDestinyGross.setText("Carga bruta:");
        jlWeightDestinyGross.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jlWeightDestinyGross);

        jtfWeightDestinyGross.setEditable(false);
        jtfWeightDestinyGross.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfWeightDestinyGross.setText("0.00");
        jtfWeightDestinyGross.setFocusable(false);
        jtfWeightDestinyGross.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jtfWeightDestinyGross);

        jtfWeightDestinyGrossUnit.setEditable(false);
        jtfWeightDestinyGrossUnit.setText("TEXT");
        jtfWeightDestinyGrossUnit.setFocusable(false);
        jtfWeightDestinyGrossUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel17.add(jtfWeightDestinyGrossUnit);

        jlWeightDestinyNet.setText(" Carga neta:");
        jlWeightDestinyNet.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jlWeightDestinyNet);

        jtfWeightDestinyNet.setEditable(false);
        jtfWeightDestinyNet.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfWeightDestinyNet.setText("0.00");
        jtfWeightDestinyNet.setFocusable(false);
        jtfWeightDestinyNet.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jtfWeightDestinyNet);

        jtfWeightDestinyNetUnit.setEditable(false);
        jtfWeightDestinyNetUnit.setText("TEXT");
        jtfWeightDestinyNetUnit.setFocusable(false);
        jtfWeightDestinyNetUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel17.add(jtfWeightDestinyNetUnit);

        jPanel1.add(jPanel17);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDatetimeArrival.setText("Fecha-hr entrada:");
        jlDatetimeArrival.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlDatetimeArrival);

        jtfDatetimeArrival.setEditable(false);
        jtfDatetimeArrival.setText("TEXT");
        jtfDatetimeArrival.setFocusable(false);
        jtfDatetimeArrival.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel12.add(jtfDatetimeArrival);

        jPanel1.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDatetimeDeparture.setText("Fecha-hr salida:");
        jlDatetimeDeparture.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlDatetimeDeparture);

        jtfDatetimeDeparture.setEditable(false);
        jtfDatetimeDeparture.setText("TEXT");
        jtfDatetimeDeparture.setFocusable(false);
        jtfDatetimeDeparture.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel13.add(jtfDatetimeDeparture);

        jPanel1.add(jPanel13);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNote.setText("Observaciones:");
        jlNote.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlNote);

        jtfNote.setEditable(false);
        jtfNote.setText("TEXT");
        jtfNote.setFocusable(false);
        jtfNote.setPreferredSize(new java.awt.Dimension(600, 23));
        jPanel14.add(jtfNote);

        jPanel1.add(jPanel14);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDbInsert.setText("Creación:");
        jlDbInsert.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlDbInsert);

        jtfDbInsert.setEditable(false);
        jtfDbInsert.setText("TEXT");
        jtfDbInsert.setFocusable(false);
        jtfDbInsert.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel15.add(jtfDbInsert);

        jlDbUpdate.setText(" Modificación:");
        jlDbUpdate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlDbUpdate);

        jtfDbUpdate.setEditable(false);
        jtfDbUpdate.setText("TEXT");
        jtfDbUpdate.setFocusable(false);
        jtfDbUpdate.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel15.add(jtfDbUpdate);

        jchkDeleted.setText("Eliminado");
        jchkDeleted.setEnabled(false);
        jchkDeleted.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jchkDeleted);

        jPanel1.add(jPanel15);

        jPanel16.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel19.setLayout(new java.awt.BorderLayout());

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbGoFirst.setText("|<<");
        jbGoFirst.setToolTipText("Primero");
        jbGoFirst.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbGoFirst.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel20.add(jbGoFirst);

        jbGoPrev.setText("<");
        jbGoPrev.setToolTipText("Anterior");
        jbGoPrev.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbGoPrev.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel20.add(jbGoPrev);

        jlCurrentTicket.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlCurrentTicket.setText("100/100");
        jlCurrentTicket.setToolTipText("Boleto actual");
        jlCurrentTicket.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel20.add(jlCurrentTicket);

        jbGoNext.setText(">");
        jbGoNext.setToolTipText("Siguiente");
        jbGoNext.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbGoNext.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel20.add(jbGoNext);

        jbGoLast.setText(">>|");
        jbGoLast.setToolTipText("Último");
        jbGoLast.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbGoLast.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel20.add(jbGoLast);

        jPanel19.add(jPanel20, java.awt.BorderLayout.NORTH);

        jPanel16.add(jPanel19, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel16, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbGoFirst;
    private javax.swing.JButton jbGoLast;
    private javax.swing.JButton jbGoNext;
    private javax.swing.JButton jbGoPrev;
    private javax.swing.JButton jbReset;
    private javax.swing.JButton jbSearch;
    private javax.swing.JCheckBox jchkDeleted;
    private javax.swing.JCheckBox jchkWeightSourceAvailable;
    private javax.swing.JLabel jlAccessWarning;
    private javax.swing.JLabel jlCurrentTicket;
    private javax.swing.JLabel jlDatetimeArrival;
    private javax.swing.JLabel jlDatetimeDeparture;
    private javax.swing.JLabel jlDbInsert;
    private javax.swing.JLabel jlDbUpdate;
    private javax.swing.JLabel jlDriver;
    private javax.swing.JLabel jlInputSource;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlNote;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JLabel jlNumberToSearch;
    private javax.swing.JLabel jlPackingWeightArrival;
    private javax.swing.JLabel jlPackingWeightDeparture;
    private javax.swing.JLabel jlPlate;
    private javax.swing.JLabel jlPlateCage;
    private javax.swing.JLabel jlProducer;
    private javax.swing.JLabel jlScale;
    private javax.swing.JLabel jlTicketStatus;
    private javax.swing.JLabel jlWeightDestinyArrival;
    private javax.swing.JLabel jlWeightDestinyDeparture;
    private javax.swing.JLabel jlWeightDestinyGross;
    private javax.swing.JLabel jlWeightDestinyNet;
    private javax.swing.JLabel jlWeightSource;
    private javax.swing.JTextField jtfDatetimeArrival;
    private javax.swing.JTextField jtfDatetimeDeparture;
    private javax.swing.JTextField jtfDbInsert;
    private javax.swing.JTextField jtfDbUpdate;
    private javax.swing.JTextField jtfDriver;
    private javax.swing.JTextField jtfInputSource;
    private javax.swing.JTextField jtfItem;
    private javax.swing.JTextField jtfNote;
    private javax.swing.JTextField jtfNumber;
    private javax.swing.JTextField jtfPackingWeightArrival;
    private javax.swing.JTextField jtfPackingWeightArrivalUnit;
    private javax.swing.JTextField jtfPackingWeightDeparture;
    private javax.swing.JTextField jtfPackingWeightDepartureUnit;
    private javax.swing.JTextField jtfPlate;
    private javax.swing.JTextField jtfPlateCage;
    private javax.swing.JTextField jtfProducer;
    private javax.swing.JTextField jtfScale;
    private javax.swing.JTextField jtfTicketStatus;
    private javax.swing.JTextField jtfWeightDestinyArrival;
    private javax.swing.JTextField jtfWeightDestinyArrivalUnit;
    private javax.swing.JTextField jtfWeightDestinyDeparture;
    private javax.swing.JTextField jtfWeightDestinyDepartureUnit;
    private javax.swing.JTextField jtfWeightDestinyGross;
    private javax.swing.JTextField jtfWeightDestinyGrossUnit;
    private javax.swing.JTextField jtfWeightDestinyNet;
    private javax.swing.JTextField jtfWeightDestinyNetUnit;
    private javax.swing.JTextField jtfWeightSource;
    private javax.swing.JTextField jtfWeightSourceUnit;
    private sa.lib.gui.bean.SBeanFieldInteger moIntNumberToSearch;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 880, 565);
        
        moIntNumberToSearch.setIntegerSettings(SGuiUtils.getLabelName(jlNumberToSearch), SGuiConsts.GUI_TYPE_INT_RAW, false);
        
        moFields.addField(moIntNumberToSearch);
        
        moFields.setFormButton(jbSearch);
        
        jbSave.setEnabled(false);
        jbCancel.setText(SUtilConsts.TXT_CLOSE);
        
        moTicketStatuses = new HashMap<>();
        moTicketStatuses.put(SModSysConsts.SS_TIC_ST_SCA, (String) miClient.getSession().readField(SModConsts.SS_TIC_ST, new int[] { SModSysConsts.SS_TIC_ST_SCA }, SDbRegistry.FIELD_NAME));
        moTicketStatuses.put(SModSysConsts.SS_TIC_ST_LAB, (String) miClient.getSession().readField(SModConsts.SS_TIC_ST, new int[] { SModSysConsts.SS_TIC_ST_LAB }, SDbRegistry.FIELD_NAME));
        moTicketStatuses.put(SModSysConsts.SS_TIC_ST_ADM, (String) miClient.getSession().readField(SModConsts.SS_TIC_ST, new int[] { SModSysConsts.SS_TIC_ST_ADM }, SDbRegistry.FIELD_NAME));
        
        jtfWeightSourceUnit.setText(SSomConsts.KG);
        jtfWeightDestinyArrivalUnit.setText(SSomConsts.KG);
        jtfPackingWeightArrivalUnit.setText(SSomConsts.KG);
        jtfWeightDestinyDepartureUnit.setText(SSomConsts.KG);
        jtfPackingWeightDepartureUnit.setText(SSomConsts.KG);
        jtfWeightDestinyGrossUnit.setText(SSomConsts.KG);
        jtfWeightDestinyNetUnit.setText(SSomConsts.KG);
        jlAccessWarning.setVisible(false);
        
        mbIsUserScaleSupervisor = ((SDbUser) miClient.getSession().getUser()).hasPrivilege(SModSysConsts.CS_RIG_SUP_SCA);
    }
    
    private void showCurrentTicket() {
        if (mnCurrentTicketIndex == -1) {
            jtfNumber.setText("");
            jtfTicketStatus.setText("");
            jtfScale.setText("");
            jtfProducer.setText("");
            jtfItem.setText("");
            jtfInputSource.setText("");
            jtfPlate.setText("");
            jtfPlateCage.setText("");
            jtfDriver.setText("");
            jtfWeightSource.setText("");
            jchkWeightSourceAvailable.setSelected(false);
            jtfWeightDestinyArrival.setText("");
            jtfPackingWeightArrival.setText("");
            jtfWeightDestinyDeparture.setText("");
            jtfPackingWeightDeparture.setText("");
            jtfWeightDestinyGross.setText("");
            jtfWeightDestinyNet.setText("");
            jtfDatetimeArrival.setText("");
            jtfDatetimeDeparture.setText("");
            jtfNote.setText("");
            jtfDbInsert.setText("");
            jtfDbUpdate.setText("");
            jchkDeleted.setSelected(false);
            jlCurrentTicket.setText("0/0");
        }
        else {
            SDbTicket ticket = maTickets.get(mnCurrentTicketIndex);
            
            jtfNumber.setText("" + ticket.getNumber());
            jtfTicketStatus.setText(moTicketStatuses.get(ticket.getFkTicketStatusId()));
            jtfScale.setText(ticket.getXtaScaleName());
            jtfProducer.setText(ticket.getXtaProducer());
            jtfItem.setText(ticket.getXtaItem());
            if (mbIsUserScaleSupervisor || ((SDbUser) miClient.getSession().getUser()).hasInputCategoryAccess(SModConsts.S_TIC, ticket.getXtaInputCategoryId())) {
                jlAccessWarning.setVisible(false);
                jtfInputSource.setText(ticket.getXtaInputSource());
                jtfPlate.setText(ticket.getPlate());
                jtfPlateCage.setText(ticket.getPlateCage());
                jtfDriver.setText(ticket.getDriver());
                jtfWeightSource.setText(SLibUtils.getDecimalFormatQuantity().format(ticket.getWeightSource()));
                jchkWeightSourceAvailable.setSelected(false);
                jtfWeightDestinyArrival.setText(SLibUtils.getDecimalFormatQuantity().format(ticket.getWeightDestinyArrival()));
                jtfPackingWeightArrival.setText(SLibUtils.getDecimalFormatQuantity().format(ticket.getPackingWeightArrival()));
                jtfWeightDestinyDeparture.setText(SLibUtils.getDecimalFormatQuantity().format(ticket.getWeightDestinyDeparture()));
                jtfPackingWeightDeparture.setText(SLibUtils.getDecimalFormatQuantity().format(ticket.getPackingWeightDeparture()));
                jtfWeightDestinyGross.setText(SLibUtils.getDecimalFormatQuantity().format(ticket.getWeightDestinyGross_r()));
                jtfWeightDestinyNet.setText(SLibUtils.getDecimalFormatQuantity().format(ticket.getWeightDestinyNet_r()));
                jtfDatetimeArrival.setText(SLibUtils.DateFormatDatetime.format(ticket.getDatetimeArrival()));
                jtfDatetimeDeparture.setText(SLibUtils.DateFormatDatetime.format(ticket.getDatetimeDeparture()));
                jtfNote.setText(ticket.getChildTicketNotes().isEmpty() ? "" : ticket.getChildTicketNotes().get(0).getNote());
                jtfDbInsert.setText(SLibUtils.DateFormatDatetime.format(ticket.getTsUserInsert()));
                jtfDbUpdate.setText(SLibUtils.DateFormatDatetime.format(ticket.getTsUserUpdate()));
                jchkDeleted.setSelected(ticket.isDeleted());
            }
            else {
                jlAccessWarning.setVisible(true);
                jtfInputSource.setText("");
                jtfPlate.setText("");
                jtfPlateCage.setText("");
                jtfDriver.setText("");
                jtfWeightSource.setText("");
                jchkWeightSourceAvailable.setSelected(false);
                jtfWeightDestinyArrival.setText("");
                jtfPackingWeightArrival.setText("");
                jtfWeightDestinyDeparture.setText("");
                jtfPackingWeightDeparture.setText("");
                jtfWeightDestinyGross.setText("");
                jtfWeightDestinyNet.setText("");
                jtfDatetimeArrival.setText("");
                jtfDatetimeDeparture.setText("");
                jtfNote.setText("");
                jtfDbInsert.setText("");
                jtfDbUpdate.setText("");
                jchkDeleted.setSelected(false);
            }
            
            jlCurrentTicket.setText((mnCurrentTicketIndex + 1) + "/" + maTickets.size());
            
            jtfNumber.setCaretPosition(0);
            jtfTicketStatus.setCaretPosition(0);
            jtfScale.setCaretPosition(0);
            jtfProducer.setCaretPosition(0);
            jtfItem.setCaretPosition(0);
            jtfInputSource.setCaretPosition(0);
            jtfPlate.setCaretPosition(0);
            jtfPlateCage.setCaretPosition(0);
            jtfDriver.setCaretPosition(0);
            jtfWeightSource.setCaretPosition(0);
            jtfWeightDestinyArrival.setCaretPosition(0);
            jtfPackingWeightArrival.setCaretPosition(0);
            jtfWeightDestinyDeparture.setCaretPosition(0);
            jtfPackingWeightDeparture.setCaretPosition(0);
            jtfWeightDestinyGross.setCaretPosition(0);
            jtfWeightDestinyNet.setCaretPosition(0);
            jtfDatetimeArrival.setCaretPosition(0);
            jtfDatetimeDeparture.setCaretPosition(0);
            jtfNote.setCaretPosition(0);
            jtfDbInsert.setCaretPosition(0);
            jtfDbUpdate.setCaretPosition(0);
        }
    }
    
    private void actionPerformedSearch() {
        try {
            if (moIntNumberToSearch.getValue() != 0 || 
                    (moIntNumberToSearch.getValue() == 0 && miClient.showMsgBoxConfirm("¿Está seguro que desea buscar boletos con el número 0?") == JOptionPane.YES_OPTION)) {
                miClient.getFrame().setCursor(new Cursor(Cursor.WAIT_CURSOR));
                
                maTickets = SDbTicket.getTicketsByNumber(miClient.getSession(), moIntNumberToSearch.getValue());
                
                if (maTickets.isEmpty()) {
                    mnCurrentTicketIndex = -1;
                    miClient.showMsgBoxWarning("No se encontraron boletos con el número " + moIntNumberToSearch.getValue() + ".");
                    moIntNumberToSearch.requestFocusInWindow();
                }
                else {
                    mnCurrentTicketIndex = 0;
                    
                    showCurrentTicket();

                    moIntNumberToSearch.setEditable(false);
                    jbSearch.setEnabled(false);
                    jbReset.setEnabled(true);
                    jbGoFirst.setEnabled(maTickets.size() > 1);
                    jbGoPrev.setEnabled(maTickets.size() > 1);
                    jbGoNext.setEnabled(maTickets.size() > 1);
                    jbGoLast.setEnabled(maTickets.size() > 1);

                    jbReset.requestFocusInWindow();
                }
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
        finally {
            miClient.getFrame().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }
    
    private void actionPerformedReset() {
        maTickets = null;
        mnCurrentTicketIndex = -1;
        
        showCurrentTicket();
        
        moIntNumberToSearch.setEditable(true);
        jbSearch.setEnabled(true);
        jbReset.setEnabled(false);
        jbGoFirst.setEnabled(false);
        jbGoPrev.setEnabled(false);
        jbGoNext.setEnabled(false);
        jbGoLast.setEnabled(false);
        
        moIntNumberToSearch.requestFocusInWindow();
    }

    private void actionPerformedGoFirst() {
        if (maTickets != null && !maTickets.isEmpty()) {
            mnCurrentTicketIndex = 0;
            showCurrentTicket();
        }
    }

    private void actionPerformedGoPrev() {
        if (maTickets != null && !maTickets.isEmpty()) {
            if (mnCurrentTicketIndex - 1 > 0) {
                mnCurrentTicketIndex--;
                showCurrentTicket();
            }
        }
    }

    private void actionPerformedGoNext() {
        if (maTickets != null && !maTickets.isEmpty()) {
            if (mnCurrentTicketIndex + 1 < maTickets.size()) {
                mnCurrentTicketIndex++;
                showCurrentTicket();
            }
        }
    }

    private void actionPerformedGoLast() {
        if (maTickets != null && !maTickets.isEmpty()) {
            mnCurrentTicketIndex = maTickets.size() - 1;
            showCurrentTicket();
        }
    }
    
    @Override
    public void initForm() {
        addAllListeners();
    }

    @Override
    public void resetForm() {
        actionPerformedReset();
    }
    
    @Override
    public void addAllListeners() {
        moIntNumberToSearch.addActionListener(this);
        jbSearch.addActionListener(this);
        jbReset.addActionListener(this);
        jbGoFirst.addActionListener(this);
        jbGoPrev.addActionListener(this);
        jbGoNext.addActionListener(this);
        jbGoLast.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        moIntNumberToSearch.removeActionListener(this);
        jbSearch.removeActionListener(this);
        jbReset.removeActionListener(this);
        jbGoFirst.removeActionListener(this);
        jbGoPrev.removeActionListener(this);
        jbGoNext.removeActionListener(this);
        jbGoLast.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SGuiValidation validateForm() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof SBeanFieldInteger) {
            SBeanFieldInteger field = (SBeanFieldInteger) e.getSource();
            
            if (field == moIntNumberToSearch) {
                actionPerformedSearch();
            }
        }
        else if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbSearch) {
                actionPerformedSearch();
            }
            else if (button == jbReset) {
                actionPerformedReset();
            }
            else if (button == jbGoFirst) {
                actionPerformedGoFirst();
            }
            else if (button == jbGoPrev) {
                actionPerformedGoPrev();
            }
            else if (button == jbGoNext) {
                actionPerformedGoNext();
            }
            else if (button == jbGoLast) {
                actionPerformedGoLast();
            }
        }
    }
}
