/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JButton;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbConsts;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiItem;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanDialogReport;
import som.gui.prt.SPrtUtils;
import som.mod.SModConsts;

/**
 *
 * @author Juan Barajas
 */
public class SDialogRepFreightTime extends SBeanDialogReport implements ActionListener {

    private ArrayList<String> maDriversAvailable;
    private ArrayList<String> maDriversSelected;

    /**
     * Creates new form SDialogRepFreightTime
     * @param client
     * @param title
     */
    public SDialogRepFreightTime(SGuiClient client, String title) {
        setFormSettings(client, SModConsts.SR_FRE_TIME, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        moDateDateStart = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel12 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        moDateDateEnd = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel9 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moKeyItem = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel5 = new javax.swing.JPanel();
        jlTicketOrigin = new javax.swing.JLabel();
        moKeyTicketOrigin = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel10 = new javax.swing.JPanel();
        jlTicketDestination = new javax.swing.JLabel();
        moKeyTicketDestination = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel13 = new javax.swing.JPanel();
        jlTicketScale = new javax.swing.JLabel();
        moKeyTicketScale = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel14 = new javax.swing.JPanel();
        jbShow = new javax.swing.JButton();
        jbClear = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jspDriverAvailable = new javax.swing.JScrollPane();
        jlstDriverAvailable = new javax.swing.JList<String>();
        jLabel1 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jbAdd = new javax.swing.JButton();
        jbAddAll = new javax.swing.JButton();
        jbRemove = new javax.swing.JButton();
        jbRemoveAll = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jspDriverSelected = new javax.swing.JScrollPane();
        jlstDriverSelected = new javax.swing.JList<String>();
        jLabel2 = new javax.swing.JLabel();

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros del reporte:"));
        jPanel2.setLayout(new java.awt.GridLayout(7, 1, 0, 5));

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateStart.setText("Fecha inicial:*");
        jlDateStart.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel11.add(jlDateStart);
        jPanel11.add(moDateDateStart);

        jPanel2.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEnd.setText("Fecha final:*");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel12.add(jlDateEnd);
        jPanel12.add(moDateDateEnd);

        jPanel2.add(jPanel12);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Ítem:*");
        jlItem.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel9.add(jlItem);

        moKeyItem.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel9.add(moKeyItem);

        jPanel2.add(jPanel9);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlTicketOrigin.setText("Procedencia boleto:");
        jlTicketOrigin.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel5.add(jlTicketOrigin);

        moKeyTicketOrigin.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel5.add(moKeyTicketOrigin);

        jPanel2.add(jPanel5);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTicketDestination.setText("Destino boleto:");
        jlTicketDestination.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel10.add(jlTicketDestination);

        moKeyTicketDestination.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel10.add(moKeyTicketDestination);

        jPanel2.add(jPanel10);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTicketScale.setText("Báscula:");
        jlTicketScale.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel13.add(jlTicketScale);

        moKeyTicketScale.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel13.add(moKeyTicketScale);

        jPanel2.add(jPanel13);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbShow.setText("Mostrar");
        jbShow.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jbShow);

        jbClear.setText("Limpiar");
        jbClear.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jbClear);

        jPanel2.add(jPanel14);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Choferes:"));
        jPanel4.setLayout(new java.awt.BorderLayout(5, 0));

        jPanel3.setLayout(new java.awt.BorderLayout());

        jspDriverAvailable.setPreferredSize(new java.awt.Dimension(275, 130));

        jlstDriverAvailable.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jlstDriverAvailable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlstDriverAvailable.setToolTipText(SGuiConsts.MSG_OPTION_DBL_CLICK);
        jlstDriverAvailable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlstDriverAvailableMouseClicked(evt);
            }
        });
        jspDriverAvailable.setViewportView(jlstDriverAvailable);

        jPanel3.add(jspDriverAvailable, java.awt.BorderLayout.CENTER);

        jLabel1.setText("Disponibles:");
        jLabel1.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel3.add(jLabel1, java.awt.BorderLayout.NORTH);

        jPanel4.add(jPanel3, java.awt.BorderLayout.WEST);

        jPanel6.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.GridLayout(5, 1, 0, 5));
        jPanel7.add(jLabel3);

        jbAdd.setText(">");
        jbAdd.setToolTipText("Agregar");
        jPanel7.add(jbAdd);

        jbAddAll.setText(">>");
        jbAddAll.setToolTipText("Agregar todos");
        jPanel7.add(jbAddAll);

        jbRemove.setText("<");
        jbRemove.setToolTipText("Remover");
        jPanel7.add(jbRemove);

        jbRemoveAll.setText("<<");
        jbRemoveAll.setToolTipText("Remover todos");
        jPanel7.add(jbRemoveAll);

        jPanel6.add(jPanel7, java.awt.BorderLayout.PAGE_START);

        jPanel4.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel8.setLayout(new java.awt.BorderLayout());

        jspDriverSelected.setPreferredSize(new java.awt.Dimension(275, 130));

        jlstDriverSelected.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jlstDriverSelected.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlstDriverSelected.setToolTipText(SGuiConsts.MSG_OPTION_DBL_CLICK);
        jlstDriverSelected.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlstDriverSelectedMouseClicked(evt);
            }
        });
        jspDriverSelected.setViewportView(jlstDriverSelected);

        jPanel8.add(jspDriverSelected, java.awt.BorderLayout.CENTER);

        jLabel2.setText("Seleccionados:");
        jLabel2.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel8.add(jLabel2, java.awt.BorderLayout.NORTH);

        jPanel4.add(jPanel8, java.awt.BorderLayout.EAST);

        jPanel1.add(jPanel4, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jlstDriverAvailableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlstDriverAvailableMouseClicked
        if (evt.getClickCount() == 2) {
            actionAdd();
        }
    }//GEN-LAST:event_jlstDriverAvailableMouseClicked

    private void jlstDriverSelectedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlstDriverSelectedMouseClicked
        if (evt.getClickCount() == 2) {
            actionRemove();
        }
    }//GEN-LAST:event_jlstDriverSelectedMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbAdd;
    private javax.swing.JButton jbAddAll;
    private javax.swing.JButton jbClear;
    private javax.swing.JButton jbRemove;
    private javax.swing.JButton jbRemoveAll;
    private javax.swing.JButton jbShow;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlTicketDestination;
    private javax.swing.JLabel jlTicketOrigin;
    private javax.swing.JLabel jlTicketScale;
    private javax.swing.JList<String> jlstDriverAvailable;
    private javax.swing.JList<String> jlstDriverSelected;
    private javax.swing.JScrollPane jspDriverAvailable;
    private javax.swing.JScrollPane jspDriverSelected;
    private sa.lib.gui.bean.SBeanFieldDate moDateDateEnd;
    private sa.lib.gui.bean.SBeanFieldDate moDateDateStart;
    private sa.lib.gui.bean.SBeanFieldKey moKeyItem;
    private sa.lib.gui.bean.SBeanFieldKey moKeyTicketDestination;
    private sa.lib.gui.bean.SBeanFieldKey moKeyTicketOrigin;
    private sa.lib.gui.bean.SBeanFieldKey moKeyTicketScale;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 800, 500);

        maDriversAvailable = new ArrayList<>();
        maDriversSelected = new ArrayList<>();

        moDateDateStart.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateStart.getText()), true);
        moDateDateEnd.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateEnd.getText()), true);
        moKeyItem.setKeySettings(miClient, SGuiUtils.getLabelName(jlItem), true);
        moKeyTicketOrigin.setKeySettings(miClient, SGuiUtils.getLabelName(jlTicketOrigin), false);
        moKeyTicketDestination.setKeySettings(miClient, SGuiUtils.getLabelName(jlTicketDestination), false);
        moKeyTicketScale.setKeySettings(miClient, SGuiUtils.getLabelName(jlTicketScale), false);
        
        moFields.addField(moDateDateStart);
        moFields.addField(moDateDateEnd);
        moFields.addField(moKeyItem);
        moFields.addField(moKeyTicketOrigin);
        moFields.addField(moKeyTicketDestination);
        moFields.addField(moKeyTicketScale);

        moFields.setFormButton(jbPrint);

        moDateDateStart.setValue(SLibTimeUtils.getBeginOfMonth(miClient.getSession().getWorkingDate()));
        moDateDateEnd.setValue(SLibTimeUtils.getEndOfMonth(miClient.getSession().getWorkingDate()));
        miClient.getSession().populateCatalogue(moKeyItem, SModConsts.SU_ITEM, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyTicketOrigin, SModConsts.SU_TIC_ORIG, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyTicketDestination, SModConsts.SU_TIC_DEST, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyTicketScale, SModConsts.SU_SCA, SLibConsts.UNDEFINED, null);
        
        jbShow.addActionListener(this);
        jbClear.addActionListener(this);
        jbAdd.addActionListener(this);
        jbAddAll.addActionListener(this);
        jbRemove.addActionListener(this);
        jbRemoveAll.addActionListener(this);

        actionClear();
    }

    private void updateControls(boolean showMode) {
        moDateDateStart.setEnabled(showMode);
        moDateDateEnd.setEnabled(showMode);

        jbShow.setEnabled(showMode);
        jbClear.setEnabled(!showMode);

        jbAdd.setEnabled(!showMode);
        jbAddAll.setEnabled(!showMode);
        jbRemove.setEnabled(!showMode);
        jbRemoveAll.setEnabled(!showMode);

        jlstDriverAvailable.setEnabled(!showMode);
        jlstDriverSelected.setEnabled(!showMode);

        if (showMode) {
            moDateDateStart.requestFocus();
        }
    }

    private void actionShow() {
        String sql = "";
        ResultSet resultSet = null;
        SGuiValidation validation = null;

        validation = SGuiUtils.validateDateRange(moDateDateStart, moDateDateEnd);

        if (validation.isValid()) {
            if (moKeyItem.getSelectedIndex() <= 0) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlItem) + "'.");
                validation.setComponent(moKeyItem);
            }
        }

        if (SGuiUtils.computeValidation(miClient, validation)) {
            try {
                sql = "SELECT DISTINCT drv "
                        + "FROM s_tic "
                        + "WHERE fk_item = " + moKeyItem.getValue()[0] + " AND b_del = 0 AND "
                        + "dt BETWEEN '" + SLibUtils.DbmsDateFormatDate.format(moDateDateStart.getValue()) + "' AND '" + SLibUtils.DbmsDateFormatDate.format(moDateDateEnd.getValue()) + "' "
                        + (moKeyTicketOrigin.getSelectedIndex() <= 0 ? "" : "AND fk_tic_orig = " + moKeyTicketOrigin.getValue()[0] + " ")
                        + (moKeyTicketDestination.getSelectedIndex() <= 0 ? "" : "AND t.fk_tic_dest = " + moKeyTicketDestination.getValue()[0] + " ")
                        + "ORDER BY drv;";
                resultSet = miClient.getSession().getStatement().executeQuery(sql);
                while (resultSet.next()) {
                    maDriversAvailable.add(resultSet.getString(1));
                }

                if (maDriversAvailable.isEmpty()) {
                    miClient.showMsgBoxWarning(SDbConsts.ERR_MSG_REG_NOT_FOUND);
                }
                else {
                    jlstDriverAvailable.setListData(new Vector<String>(maDriversAvailable));
                    jlstDriverAvailable.setSelectedIndex(0);

                    updateControls(false);
                }
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
        }
    }

    private void actionClear() {
        maDriversAvailable.clear();
        maDriversSelected.clear();

        jlstDriverAvailable.setListData(new Vector<String>(maDriversAvailable));
        jlstDriverSelected.setListData(new Vector<String>(maDriversSelected));

        updateControls(true);
    }

    private void actionAdd() {
        int index = jlstDriverAvailable.getSelectedIndex();

        if (index != -1) {
            maDriversSelected.add(maDriversAvailable.remove(index));

            jlstDriverAvailable.setListData(new Vector<String>(maDriversAvailable));
            jlstDriverSelected.setListData(new Vector<String>(maDriversSelected));

            if (jlstDriverAvailable.getModel().getSize() > 0) {
                jlstDriverAvailable.setSelectedIndex(index < jlstDriverAvailable.getModel().getSize() ? index : index - 1);
            }

            jlstDriverSelected.setSelectedIndex(jlstDriverSelected.getModel().getSize() - 1);
            if (jlstDriverSelected.getLastVisibleIndex() < jlstDriverSelected.getSelectedIndex()) {
                jspDriverSelected.getVerticalScrollBar().setValue(jspDriverSelected.getVerticalScrollBar().getMaximum());
            }
        }
    }

    private void actionAddAll() {
        if (jlstDriverAvailable.getModel().getSize() > 0) {
            jlstDriverAvailable.setSelectedIndex(0);
            while ((jlstDriverAvailable.getModel().getSize() > 0)) {
                actionAdd();
            }
        }
    }

    private void actionRemove() {
        int index = jlstDriverSelected.getSelectedIndex();

        if (index != -1) {
            maDriversAvailable.add(maDriversSelected.remove(index));

            jlstDriverAvailable.setListData(new Vector<String>(maDriversAvailable));
            jlstDriverSelected.setListData(new Vector<String>(maDriversSelected));

            if (jlstDriverSelected.getModel().getSize() > 0) {
                jlstDriverSelected.setSelectedIndex(index < jlstDriverSelected.getModel().getSize() ? index : index - 1);
            }

            jlstDriverAvailable.setSelectedIndex(jlstDriverAvailable.getModel().getSize() - 1);
            if (jlstDriverAvailable.getLastVisibleIndex() < jlstDriverAvailable.getSelectedIndex()) {
                jspDriverAvailable.repaint();
                jspDriverAvailable.getVerticalScrollBar().setValue(jspDriverAvailable.getVerticalScrollBar().getMaximum());
            }
        }
    }

    private void actionRemoveAll() {
        if (jlstDriverSelected.getModel().getSize() > 0) {
            jlstDriverSelected.setSelectedIndex(0);
            while ((jlstDriverSelected.getModel().getSize() > 0)) {
                actionRemove();
            }
        }
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (maDriversSelected.isEmpty()) {
                validation.setMessage("No hay choferes seleccionados.");
            }
        }

        return validation;
    }

    @Override
    public void createParamsMap() {
        String[] driversQry = null;
        String driversTxt = "";
        String driversSql = "";
        String sqlWhere = "";

        moParamsMap = SPrtUtils.createReportParamsMap(miClient.getSession());
        sqlWhere += (moKeyTicketOrigin.getSelectedIndex() <= 0 ? "" : "AND t.fk_tic_orig = " + moKeyTicketOrigin.getValue()[0] + " ");
        sqlWhere += (moKeyTicketDestination.getSelectedIndex() <= 0 ? "" : "AND t.fk_tic_dest = " + moKeyTicketDestination.getValue()[0] + " ");
        sqlWhere += (moKeyTicketScale.getSelectedIndex() <= 0 ? "" : "AND t.fk_sca = " + moKeyTicketScale.getValue()[0] + " ");
        
        moParamsMap.put("sTitle", getTitle().toUpperCase());
        moParamsMap.put("tDateStart", moDateDateStart.getValue());
        moParamsMap.put("tDateEnd", moDateDateEnd.getValue());
        moParamsMap.put("nItemId", moKeyItem.getValue()[0]);
        moParamsMap.put("sItem", ((SGuiItem) moKeyItem.getComponent().getSelectedItem()).getItem());
        moParamsMap.put("sSqlWhere", sqlWhere);
        moParamsMap.put("sTicOrig", moKeyTicketOrigin.getSelectedIndex() > 0 ? moKeyTicketOrigin.getSelectedItem() : "TODOS");
        moParamsMap.put("sTicDest", moKeyTicketDestination.getSelectedIndex() > 0 ? moKeyTicketDestination.getSelectedItem() : "TODOS");
        moParamsMap.put("sTicSca", moKeyTicketScale.getSelectedIndex() > 0 ? moKeyTicketScale.getSelectedItem() : "TODAS");
        
        if (maDriversAvailable.isEmpty()) {
            moParamsMap.put("bAllDrivers", true);
        }
        else {
            driversQry = new String[maDriversSelected.size()];

            for (int i = 0; i < driversQry.length; i++) {
                driversQry[i] = "'" + maDriversSelected.get(i) + "'";
            }

            driversTxt = SLibUtils.textImplode(maDriversSelected.toArray(new String[maDriversSelected.size()]), ", ");
            driversSql = SLibUtils.textImplode(driversQry, ", ");

            moParamsMap.put("bAllDrivers", false);
            moParamsMap.put("sSqlDrivers", driversTxt);
            moParamsMap.put("sSqlDriversQry", "AND t.drv IN (" + driversSql + ") ");
            moParamsMap.put("sSqlDriversSubQry", "AND t1.drv IN (" + driversSql + ") ");
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbShow) {
                actionShow();
            }
            else if (button == jbClear) {
                actionClear();
            }
            else if (button == jbAdd) {
                actionAdd();
            }
            else if (button == jbAddAll) {
                actionAddAll();
            }
            else if (button == jbRemove) {
                actionRemove();
            }
            else if (button == jbRemoveAll) {
                actionRemoveAll();
            }
        }
    }
}
