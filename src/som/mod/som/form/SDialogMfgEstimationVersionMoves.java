/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.JButton;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;
import som.mod.SModConsts;
import som.mod.som.db.SSomProductionEstimateMovesVersion;

/**
 *
 * @author Néstor Ávalos, Sergio Flores
 */
public class SDialogMfgEstimationVersionMoves extends SBeanFormDialog implements ActionListener {

    private SSomProductionEstimateMovesVersion movesVersion;
    private SGridPaneForm moGridInventoryMoves;

    private Vector<SSomProductionEstimateMovesVersion> mvProductionEstimateMovesVersion;

    /**
     * Creates new form SDialogProductionEstimateFG
     */
    public SDialogMfgEstimationVersionMoves(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.SX_STK_PROD_VER, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlQuantity = new javax.swing.JLabel();
        moDecQuantity = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel9 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDateDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel29 = new javax.swing.JPanel();
        jlUnit = new javax.swing.JLabel();
        moKeyUnit = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel6 = new javax.swing.JPanel();
        jpWarehouses = new javax.swing.JPanel();

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQuantity.setText("Cantidad estimada producida:*");
        jlQuantity.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel3.add(jlQuantity);
        jPanel3.add(moDecQuantity);

        jPanel2.add(jPanel3);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha:");
        jlDate.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel9.add(jlDate);

        moDateDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(moDateDate);

        jPanel2.add(jPanel9);

        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUnit.setText("Unidad:");
        jlUnit.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel29.add(jlUnit);

        moKeyUnit.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel29.add(moKeyUnit);

        jPanel2.add(jPanel29);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel6.setLayout(new java.awt.GridLayout(1, 2));

        jpWarehouses.setBorder(javax.swing.BorderFactory.createTitledBorder("Movimientos de inventario:"));
        jpWarehouses.setLayout(new java.awt.BorderLayout());
        jPanel6.add(jpWarehouses);

        jPanel1.add(jPanel6, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlQuantity;
    private javax.swing.JLabel jlUnit;
    private javax.swing.JPanel jpWarehouses;
    private sa.lib.gui.bean.SBeanFieldDate moDateDate;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecQuantity;
    private sa.lib.gui.bean.SBeanFieldKey moKeyUnit;
    // End of variables declaration//GEN-END:variables

    /*
    * Private methods
    */

    private void initComponentsCustom() {
        mvProductionEstimateMovesVersion = new Vector<SSomProductionEstimateMovesVersion>();

        jbCancel.setText("Cerrar");
        jbSave.setEnabled(false);

        SGuiUtils.setWindowBounds(this, 800, 500);

        moDecQuantity.setDecimalSettings(SGuiUtils.getLabelName(jlQuantity.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDateDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate.getText()), true);
        moKeyUnit.setKeySettings(miClient, SGuiUtils.getLabelName(jlUnit), true);

        moFields.addField(moDecQuantity);
        moFields.addField(moDateDate);
        moFields.addField(moKeyUnit);

        moGridInventoryMoves = new SGridPaneForm(miClient, SModConsts.S_IOG, SLibConsts.UNDEFINED, "Movimientos inventario", null) {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
                jbRowDelete.setEnabled(true);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                SGridColumnForm[] columns = new SGridColumnForm[12];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_INT_RAW, "Est. prod.");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_INT_RAW, "Versión");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_REG_NUM, "Folio");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE, SGridConsts.COL_TITLE_DATE);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Tipo movimiento");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CO, "Almacén");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_L, "Ítem");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ITM, "Ítem código");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Cantidad");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, SGridConsts.COL_TITLE_IS_DEL);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, SGridConsts.COL_TITLE_IS_SYS);

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }

            @Override
            public void actionRowDelete() {

                if (jtTable.getSelectedRowCount() != 1) {
                    miClient.showMsgBoxInformation(SGridConsts.MSG_SELECT_ROW);
                }
                else {
                    SGridRow gridRow = moGridInventoryMoves.getSelectedGridRow(); //getGridRows().get(moGridStockDays.getTable().getSelectedRow());

                    if (!gridRow.isRowDeletable()) {
                        miClient.showMsgBoxWarning(SDbConsts.MSG_REG_ + gridRow.getRowName() + SDbConsts.MSG_REG_NON_DELETABLE);
                    }
                    else {
                        super.actionRowDelete();
                    }
                }
            }
        };

        mvFormGrids.add(moGridInventoryMoves);
        moGridInventoryMoves.setPaneFormOwner(null);
        jpWarehouses.add(moGridInventoryMoves, BorderLayout.CENTER);

        removeAllListeners();
        reloadCatalogues();

        moDateDate.setEditable(false);
        moDecQuantity.setEditable(false);
        moKeyUnit.setEnabled(false);

        addAllListeners();

        /* XXX Cell renderers not implemented yet in XML
        mvFormGrids.add(moGridUserRights);
        mvFormGrids.add(moGridUserScales);
        */
    }

    private void populatePaneGrid() throws SQLException {
        Vector<SGridRow> rows = new Vector<>();

        for (SSomProductionEstimateMovesVersion row : mvProductionEstimateMovesVersion) {
            rows.add(row);
        }

        moGridInventoryMoves.populateGrid(rows);
    }

    /*
    * Public methods
    */

    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {
        try {
            populatePaneGrid();
        }
        catch (SQLException e) {
            SLibUtils.showException(this, e);
        }

        miClient.getSession().populateCatalogue(moKeyUnit, SModConsts.SU_UNIT, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setValue(int type, Object value) {
         switch (type) {
            case SGuiConsts.PARAM_DATE:
                moDateDate.setValue(value);
                moDateDate.setEditable(false);
                break;
            case SModConsts.SU_UNIT:
                moKeyUnit.setValue(value);
                moKeyUnit.setEnabled(false);
                break;
            case SModConsts.SX_STK_PROD_EST:
                moDecQuantity.setValue(value);
            default:
        }
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent evt) {
        if (evt.getSource() instanceof JButton) {
            JButton button = (JButton) evt.getSource();

        }
    }
}
