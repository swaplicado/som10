/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import java.awt.BorderLayout;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import sa.lib.SLibConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;
import som.mod.SModConsts;
import som.mod.som.db.SRowWarehouseCardex;

/**
 * Forma que muestra en un grid, el histórico de cálculos ponderados de humedad y aceite en un almacén.
 * @author Isabel Servín
 */
public class SFormWarehouseCardex extends SBeanFormDialog {

    private final int[] moPk;
    
    private Vector<SRowWarehouseCardex> moRowsWarehouseCardex;
    private SGridPaneForm moGridWarehouseCardex;


    /**
     * Creates new form SFormWarehouseCardex
     * @param client
     * @param pk
     */
    public SFormWarehouseCardex(SGuiClient client, int[] pk) {
        setTitle("Historial de almacén");
        miClient = client;
        moPk = pk;
        
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel = new javax.swing.JPanel();
        jpTable = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jlWarehouse = new javax.swing.JLabel();
        jtfWarehouse = new javax.swing.JTextField();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Historial almacén:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel.setLayout(new java.awt.BorderLayout());

        jpTable.setLayout(new java.awt.BorderLayout());
        jPanel.add(jpTable, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlWarehouse.setText("Almacén:");
        jlWarehouse.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jlWarehouse);

        jtfWarehouse.setEditable(false);
        jtfWarehouse.setFocusable(false);
        jtfWarehouse.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel2.add(jtfWarehouse);

        jPanel.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel1.add(jPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel jlWarehouse;
    private javax.swing.JPanel jpTable;
    private javax.swing.JTextField jtfWarehouse;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 960, 600);
        
        jbSave.setVisible(false);
        jbCancel.setText("Cerrar"); 
        
        moGridWarehouseCardex = new SGridPaneForm(miClient, SModConsts.SX_QA_OIL_MOI_POND, SLibConsts.UNDEFINED, "Historial almacén") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                SGridColumnForm[] columns = new SGridColumnForm[11];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Inicio almacén");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Final almacén");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_L, "Ítem");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_0D, "Boletos c/resultados lab.");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_0D, "Boletos s/resultados lab.");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_0D, "Total boletos");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Peso c/resultados lab.(kg)");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Peso s/resultados lab.(kg)");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Total peso almacenado(kg)");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_PER_2D, "Aceite ponderado(%)");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_PER_2D, "Humedad ponderado(%)");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        jpTable.add(moGridWarehouseCardex, BorderLayout.CENTER);
        
        try {
            populateLaboratoryTest();
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }

    private void populateLaboratoryTest() throws SQLException {
        populateVector();
        
        Vector<SGridRow> rows = new Vector<>();

        for (SRowWarehouseCardex row : moRowsWarehouseCardex) {
            rows.add(row);
        }
        
        moGridWarehouseCardex.populateGrid(rows);
        moGridWarehouseCardex.initSortKeysDescending();
    }
    
    private void populateVector() {
        String almacen = ""; 
        moRowsWarehouseCardex = new Vector<>();
        try {
            String sql = "SELECT " 
                        + "avg_tic.dt_start, " 
                        + "avg_tic.date_end, "
                        + "avg_tic.id_item, " 
                        + "avg_tic.item, " 
                        + "w.code, " 
                        + "w.name, " 
                        + "SUM(avg_tic.wei_des_net_r) AS _sum_all_wei, "
                        + "SUM(IF(avg_tic.id_lab IS NULL, 0, avg_tic.wei_des_net_r)) AS _sum_lab_wei, " 
                        + "SUM(IF(avg_tic.id_lab IS NOT NULL, 0, avg_tic.wei_des_net_r)) AS _sum_n_lab_wei, " 
                        + "SUM(1) AS _sum_all_tic, " 
                        + "SUM(IF(avg_tic.id_lab IS NULL, 0, 1)) AS _sum_lab_tic, " 
                        + "SUM(IF(avg_tic.id_lab IS NOT NULL, 0, 1)) AS _sum_n_lab_tic, " 
                        + "SUM(avg_tic._res_wei_oil) AS _sum_wei_oil, " 
                        + "SUM(avg_tic._res_wei_moi) AS _sum_wei_moi, "
                        + "SUM(avg_tic._res_wei_oil)/SUM(IF(avg_tic.id_lab IS NULL, 0, avg_tic.wei_des_net_r)) AS _pond_oil, " 
                        + "SUM(avg_tic._res_wei_moi)/SUM(IF(avg_tic.id_lab IS NULL, 0, avg_tic.wei_des_net_r)) AS _pond_moi " 
                        + "FROM cu_wah AS w " 
                        + "INNER JOIN " 
                        + "(" 
                        + "SELECT wah_date.dt_start, wah_date.date_end, t.dt, t.fk_wah_unld_co_n, t.fk_wah_unld_cob_n, t.fk_wah_unld_wah_n, i.id_item, i.name AS item, t.num, t.wei_des_net_r, l.id_lab, avg(lt.oil_per) AS oil, avg(lt.moi_per) AS moi, " 
                        + "t.wei_des_net_r * avg(lt.oil_per) AS _res_wei_oil, t.wei_des_net_r * avg(lt.moi_per) AS _res_wei_moi " 
                        + "FROM s_tic AS t " 
                        + "INNER JOIN " 
                        + "(" 
                        + "SELECT a.dt_start, IF(a.date_end IS NULL, CURDATE(), a.date_end) AS date_end, a.fk_wah_co, a.fk_wah_cob, a.fk_wah_wah FROM( "
                        + "SELECT ws1.dt_start AS dt_start, " 
                        + "DATE_ADD((SELECT ws2.dt_start FROM s_wah_start AS ws2 WHERE ws2.dt_start > ws1.dt_start AND ws2.fk_wah_co = ws1.fk_wah_co AND ws2.fk_wah_cob = ws1.fk_wah_cob AND ws2.fk_wah_wah = ws1.fk_wah_wah AND NOT ws2.b_del " 
                        + "ORDER BY ws2.dt_start LIMIT 1), interval -1 day) AS date_end, " 
                        + "ws1.fk_wah_co, ws1.fk_wah_cob, ws1.fk_wah_wah " 
                        + "FROM s_wah_start AS ws1 WHERE ws1.fk_wah_co = " + moPk[0] + " AND ws1.fk_wah_cob = " + moPk[1] + " AND ws1.fk_wah_wah = " + moPk[2] + ") AS a) AS wah_date " 
                        + "ON wah_date.fk_wah_co = t.fk_wah_unld_co_n AND wah_date.fk_wah_cob = t.fk_wah_unld_cob_n AND wah_date.fk_wah_wah = t.fk_wah_unld_wah_n AND wah_date.dt_start <= t.dt AND wah_date.date_end >= t.dt "
                        + "INNER JOIN su_item AS i ON t.fk_item = i.id_item " 
                        + "LEFT OUTER JOIN s_lab AS l ON t.fk_lab_n = l.id_lab " 
                        + "LEFT OUTER JOIN s_lab_test AS lt ON l.id_lab = lt.id_lab " 
                        + "WHERE NOT t.b_del " 
                        + "GROUP BY l.id_lab, t.fk_wah_unld_co_n, t.fk_wah_unld_cob_n, t.fk_wah_unld_wah_n " 
                        + "ORDER BY wah_date.dt_start) AS avg_tic ON w.id_co = avg_tic.fk_wah_unld_co_n AND w.id_cob = avg_tic.fk_wah_unld_cob_n AND w.id_wah = avg_tic.fk_wah_unld_wah_n " 
                        + "GROUP BY avg_tic.dt_start, avg_tic.id_item " 
                        + "ORDER BY avg_tic.dt_start DESC;";
            
            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
            while (resultSet.next()) {
                SRowWarehouseCardex row = new SRowWarehouseCardex();
                row.setDateStart(resultSet.getDate("dt_start"));
                row.setDateEnd(resultSet.getDate("date_end"));
                row.setItem(resultSet.getString("item"));
                row.setLabTic(resultSet.getInt("_sum_lab_tic"));
                row.setNLabTic(resultSet.getInt("_sum_n_lab_tic"));
                row.setAllTic(resultSet.getInt("_sum_all_tic"));
                row.setLabWei(resultSet.getDouble("_sum_lab_wei")); 
                row.setNLabWei(resultSet.getDouble("_sum_n_lab_wei")); 
                row.setAllWei(resultSet.getDouble("_sum_all_wei")); 
                row.setPondOil(resultSet.getDouble("_pond_oil"));
                row.setPondMoi(resultSet.getDouble("_pond_moi"));
                almacen = resultSet.getString("w.code") + " - " + resultSet.getString("w.name");
                moRowsWarehouseCardex.add(row);
            }
            jtfWarehouse.setText(almacen);
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }

    @Override
    public void addAllListeners() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void removeAllListeners() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void reloadCatalogues() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setRegistry(SDbRegistry sdr) throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SGuiValidation validateForm() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    
}
