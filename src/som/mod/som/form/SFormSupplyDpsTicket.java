/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.som.form;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.JButton;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;
import som.mod.SModConsts;
import som.mod.som.db.SDbProducer;
import som.mod.som.db.SRowSupplyDpsTicket;
import som.mod.som.db.SSomConsts;

/**
 *
 * @author Néstor Ávalos, Sergio Flores
 */
public class SFormSupplyDpsTicket extends SBeanForm implements ActionListener {

    private SRowSupplyDpsTicket moRegistry;
    private SDbProducer moProducer;
    private SGridPaneForm moGridTickets;

    /**
     * Creates new form SFormUser
     */
    public SFormSupplyDpsTicket(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.SX_EXT_DPS, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlProducerName = new javax.swing.JLabel();
        moTextProducerName = new sa.lib.gui.bean.SBeanFieldText();
        jPanel8 = new javax.swing.JPanel();
        jlProducerCode = new javax.swing.JLabel();
        moTextProducerCode = new sa.lib.gui.bean.SBeanFieldText();
        jPanel9 = new javax.swing.JPanel();
        jlItemName = new javax.swing.JLabel();
        moTextItemName = new sa.lib.gui.bean.SBeanFieldText();
        jPanel10 = new javax.swing.JPanel();
        jlItemCode = new javax.swing.JLabel();
        moTextItemCode = new sa.lib.gui.bean.SBeanFieldText();
        jPanel5 = new javax.swing.JPanel();
        jlFkExternalDps = new javax.swing.JLabel();
        moKeyFkExternalDps = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel4 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDpsSupplyDate_n = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel6 = new javax.swing.JPanel();
        jpTickets = new javax.swing.JPanel();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(6, 1, 0, 5));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProducerName.setText("Proveedor:");
        jlProducerName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlProducerName);

        moTextProducerName.setText("PRODUCER");
        moTextProducerName.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel7.add(moTextProducerName);

        jPanel2.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProducerCode.setText("Proveedor código:");
        jlProducerCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlProducerCode);

        moTextProducerCode.setText("PRODUCER CODE");
        jPanel8.add(moTextProducerCode);

        jPanel2.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemName.setText("Ítem:");
        jlItemName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlItemName);

        moTextItemName.setText("ITEM");
        moTextItemName.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel9.add(moTextItemName);

        jPanel2.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemCode.setText("Ítem código:");
        jlItemCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlItemCode);

        moTextItemCode.setText("ITEM CODE");
        jPanel10.add(moTextItemCode);

        jPanel2.add(jPanel10);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFkExternalDps.setText("Partida docto. CV:*");
        jlFkExternalDps.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlFkExternalDps);

        moKeyFkExternalDps.setPreferredSize(new java.awt.Dimension(500, 23));
        jPanel5.add(moKeyFkExternalDps);

        jPanel2.add(jPanel5);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha:*");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlDate);

        moDpsSupplyDate_n.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(moDpsSupplyDate_n);

        jPanel2.add(jPanel4);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel6.setLayout(new java.awt.GridLayout(1, 2));

        jpTickets.setBorder(javax.swing.BorderFactory.createTitledBorder("Boletos por facturar:"));
        jpTickets.setLayout(new java.awt.BorderLayout());
        jPanel6.add(jpTickets);

        jPanel1.add(jPanel6, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlFkExternalDps;
    private javax.swing.JLabel jlItemCode;
    private javax.swing.JLabel jlItemName;
    private javax.swing.JLabel jlProducerCode;
    private javax.swing.JLabel jlProducerName;
    private javax.swing.JPanel jpTickets;
    private sa.lib.gui.bean.SBeanFieldDate moDpsSupplyDate_n;
    private sa.lib.gui.bean.SBeanFieldKey moKeyFkExternalDps;
    private sa.lib.gui.bean.SBeanFieldText moTextItemCode;
    private sa.lib.gui.bean.SBeanFieldText moTextItemName;
    private sa.lib.gui.bean.SBeanFieldText moTextProducerCode;
    private sa.lib.gui.bean.SBeanFieldText moTextProducerName;
    // End of variables declaration//GEN-END:variables

    /*
    * Private methods
    */

    private void initComponentsCustom() {
        moProducer = new SDbProducer();

        SGuiUtils.setWindowBounds(this, 800, 500);

        moTextProducerName.setTextSettings(jlProducerName.getText(), 200, 0);
        moTextProducerCode.setTextSettings(jlProducerCode.getText(), 100, 0);
        moTextItemName.setTextSettings(jlItemName.getText(), 200, 0);
        moTextItemCode.setTextSettings(jlItemCode.getText(), 100, 0);
        moKeyFkExternalDps.setKeySettings(miClient, SGuiUtils.getLabelName(jlFkExternalDps.getText()), true);
        moDpsSupplyDate_n.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate.getText()), true);

        moFields.addField(moTextProducerName);
        moFields.addField(moTextProducerCode);
        moFields.addField(moTextItemName);
        moFields.addField(moTextItemCode);
        moFields.addField(moKeyFkExternalDps);
        moFields.addField(moDpsSupplyDate_n);

        moFields.setFormButton(jbSave);

        moGridTickets = new SGridPaneForm(miClient, SModConsts.SX_EXT_DPS, SLibConsts.UNDEFINED, "Boletos por facturar") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                SGridColumnForm[] columns = new SGridColumnForm[17];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Báscula");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Boleto", 75);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Ítem");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ITM, "Ítem código");
                columns[col] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Facturar");
                columns[col++].setEditable(true);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_REG_NUM, "Docto inv");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Cantidad");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Peso carga origen (" + SSomConsts.KG + ")");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Peso carga entrada (" + SSomConsts.KG + ")");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Peso carga salida (" + SSomConsts.KG + ")");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Peso carga destino (" + SSomConsts.KG + ")");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Temporada");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Región");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Placas");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Chofer");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        mvFormGrids.add(moGridTickets);
        moGridTickets.setForm(null);
        moGridTickets.setPaneFormOwner(null);
        jpTickets.add(moGridTickets, BorderLayout.CENTER);

        /* XXX Cell renderers not implemented yet in XML
        mvFormGrids.add(moGridUserRights);
        mvFormGrids.add(moGridUserScales);
        */
    }

    private void populateTickets() throws SQLException {
        Vector<SGridRow> rows = new Vector<>();

        for (SRowSupplyDpsTicket supplyDpsTicket : moRegistry.getSupplyDpsTickets()) {
            rows.add(supplyDpsTicket);
        }

        moGridTickets.populateGrid(rows);
    }

    /*
    * Private methods
    */

    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyFkExternalDps, SModConsts.SX_EXT_DPS, SLibConsts.UNDEFINED,
                new SGuiParams(new int[] { moProducer.getFkExternalProducerId_n(), moRegistry.getXtaFkItem() }));

        try {
            populateTickets();
        }
        catch (SQLException e) {
            SLibUtils.showException(this, e);
        }
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SRowSupplyDpsTicket) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) { }
        moDpsSupplyDate_n.setValue(miClient.getSession().getWorkingDate());
        jtfRegistryKey.setText("");

        moTextProducerName.setValue(moProducer.getName());
        moTextProducerCode.setValue(moProducer.getCode());
        moTextItemName.setValue(moRegistry.getXtaItem());
        moTextItemCode.setValue(moRegistry.getXtaItemCode());

        setFormEditable(true);

        if (moKeyFkExternalDps.getModel().getSize() == 2) {
            moKeyFkExternalDps.setSelectedIndex(1);
        }

        moTextProducerName.setEditable(false);
        moTextProducerCode.setEditable(false);
        moTextItemName.setEditable(false);
        moTextItemCode.setEditable(false);

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SRowSupplyDpsTicket registry = moRegistry.clone();

        if (registry.isRegistryNew()) {}

        registry.setFkExternalDpsYearId_n(moKeyFkExternalDps.getValue()[0]);
        registry.setFkExternalDpsDocId_n(moKeyFkExternalDps.getValue()[1]);
        registry.setFkExternalDpsEntryId_n(moKeyFkExternalDps.getValue()[2]);
        registry.setDpsSupplyDate_n(moDpsSupplyDate_n.getValue());

        registry.getSupplyDpsTickets().clear();
        for (SGridRow row : moGridTickets.getModel().getGridRows()) {
            if (((SRowSupplyDpsTicket) row).isDpsSupply()) {
                registry.getSupplyDpsTickets().add((SRowSupplyDpsTicket) row);
            }
        }

        return registry;
    }

    @Override
    public void setValue(int type, Object value) {
        switch(type) {
            case SModConsts.SU_PROD:
                moProducer = (SDbProducer) value;
                break;
            default:
        }
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent evt) {
        if (evt.getSource() instanceof JButton) {
            JButton button = (JButton) evt.getSource();

        }
    }
}
