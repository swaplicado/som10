/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.cfg.form;

import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.mod.SModConsts;
import erp.data.SDataConstants;
import som.mod.cfg.db.SDbLinkItemParameter;
import java.awt.event.ItemEvent;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import som.mod.SModSysConsts;

/**
 *
 * @author Edwin Carmona
 */
public class SFormLinkItemParam extends sa.lib.gui.bean.SBeanForm {

    private SDbLinkItemParameter moRegistry;
    
    /**
     * Creates new form SFormTaxItemLink
     */
    public SFormLinkItemParam(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.FIN_ABP_ITEM_LINK, SLibConstants.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moKeyItem = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel26 = new javax.swing.JPanel();
        jlParameter = new javax.swing.JLabel();
        moKeyParameter = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel27 = new javax.swing.JPanel();
        jlOrder = new javax.swing.JLabel();
        moIntOrder = new sa.lib.gui.bean.SBeanFieldInteger();

        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel23.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setForeground(new java.awt.Color(0, 0, 255));
        jlItem.setText("ítem: *");
        jlItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel22.add(jlItem);

        moKeyItem.setPreferredSize(new java.awt.Dimension(300, 23));
        moKeyItem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                moKeyItemItemStateChanged(evt);
            }
        });
        jPanel22.add(moKeyItem);

        jPanel23.add(jPanel22);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlParameter.setText("Parámetro: *");
        jlParameter.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel26.add(jlParameter);

        moKeyParameter.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel26.add(moKeyParameter);

        jPanel23.add(jPanel26);

        jPanel27.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlOrder.setText("Orden de captura: *");
        jlOrder.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel27.add(jlOrder);
        jPanel27.add(moIntOrder);

        jPanel23.add(jPanel27);

        jPanel2.add(jPanel23, java.awt.BorderLayout.NORTH);

        jPanel1.add(jPanel2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void moKeyItemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_moKeyItemItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            itemStateChangedLinkType();
        }
    }//GEN-LAST:event_moKeyItemItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlOrder;
    private javax.swing.JLabel jlParameter;
    private sa.lib.gui.bean.SBeanFieldInteger moIntOrder;
    private sa.lib.gui.bean.SBeanFieldKey moKeyItem;
    private sa.lib.gui.bean.SBeanFieldKey moKeyParameter;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 480, 300);
        
        moKeyItem.setKeySettings(miClient, SGuiUtils.getLabelName(jlItem.getText()), true);
        moKeyParameter.setKeySettings(miClient, SGuiUtils.getLabelName(jlParameter.getText()), true);
        moIntOrder.setIntegerSettings(SGuiUtils.getLabelName(jlOrder.getText()), SGuiConsts.GUI_TYPE_INT_RAW, true);
        
        moFields.addField(moKeyItem);
        moFields.addField(moKeyParameter);
        moFields.addField(moIntOrder);

        moFields.setFormButton(jbSave);
    }

    private void itemStateChangedLinkType() {
        try {
            if (moKeyItem.getSelectedIndex() > 0) {
//                miClient.getSession().populateCatalogue(moKeyItem, SModConsts.ITMU_ITEM, SLibConsts.UNDEFINED, null);
            }
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
    }

    @Override
    public void addAllListeners() {
        
    }

    @Override
    public void removeAllListeners() {
        
    }

    @Override
    public void reloadCatalogues() {
        SGuiParams params = new SGuiParams();
        
        miClient.getSession().populateCatalogue(moKeyParameter, som.mod.SModConsts.CU_PARAMS, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyItem, som.mod.SModConsts.SU_ITEM, SModSysConsts.SS_ITEM_TP_RM, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        int[] key = null;
        moRegistry = (SDbLinkItemParameter) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        key = moRegistry.getPrimaryKey();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }
        
        moKeyItem.setValue(new int[] { moRegistry.getFkItemId() });
        moKeyParameter.setValue(new int[] { moRegistry.getFkParameterId()});
        
        setFormEditable(true);
        
        if (moRegistry.isRegistryNew()) {
            itemStateChangedLinkType();
        }
        else {
            moKeyItem.setEnabled(false);
        }
        
        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbLinkItemParameter registry = moRegistry.clone();
        
        if (registry.isRegistryNew()) {}
        
        moRegistry.setFkItemId(moKeyItem.getValue()[0]);
        
        moRegistry.setFkParameterId(moKeyParameter.getValue()[0]);
        
        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        return validation;
    }
}
