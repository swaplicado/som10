/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.cfg.form;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.JButton;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;
import som.mod.SModConsts;
import som.mod.SModSysConsts;
import som.mod.cfg.db.SDbUser;
import som.mod.cfg.db.SDbUserInputCategory;
import som.mod.cfg.db.SDbUserRight;
import som.mod.cfg.db.SDbUserScale;

/**
 *
 * @author Sergio Flores, Isabel Servín 
 */
public class SFormUser extends SBeanForm implements ActionListener {

    private SDbUser moRegistry;
    private SGridPaneForm moGridUserRights;
    private SGridPaneForm moGridUserScales;
    private SGridPaneForm moGridUserInputCategories;

    /**
     * Creates new form SFormUser
     * @param client
     * @param title
     */
    public SFormUser(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.CU_USR, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        moTextName = new sa.lib.gui.bean.SBeanFieldText();
        jPanel4 = new javax.swing.JPanel();
        jlPassword = new javax.swing.JLabel();
        moPswdPassword = new sa.lib.gui.bean.SBeanFieldPassword();
        jbPassword = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jlUserType = new javax.swing.JLabel();
        moKeyUserType = new sa.lib.gui.bean.SBeanFieldKey();
        jbUserType = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jpUserRights = new javax.swing.JPanel();
        jpUserScales = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jpUserInputCategories = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlName.setText("Nombre:*");
        jlName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlName);

        moTextName.setText("sBeanFieldText1");
        moTextName.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel3.add(moTextName);

        jPanel2.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPassword.setText("Contraseña:*");
        jlPassword.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlPassword);

        moPswdPassword.setText("sBeanFieldPassword1");
        moPswdPassword.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel4.add(moPswdPassword);

        jbPassword.setText("<");
        jbPassword.setToolTipText("Modificar contraseña");
        jbPassword.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jbPassword.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbPassword);

        jPanel2.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUserType.setText("Tipo:*");
        jlUserType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlUserType);

        moKeyUserType.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel5.add(moKeyUserType);

        jbUserType.setText("<");
        jbUserType.setToolTipText("Modificar tipo");
        jbUserType.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jbUserType.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbUserType);

        jPanel2.add(jPanel5);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel6.setLayout(new java.awt.GridLayout(1, 3));

        jpUserRights.setBorder(javax.swing.BorderFactory.createTitledBorder("Derechos de usuario:"));
        jpUserRights.setLayout(new java.awt.BorderLayout());
        jPanel6.add(jpUserRights);

        jpUserScales.setBorder(javax.swing.BorderFactory.createTitledBorder("Acceso a básculas:"));
        jpUserScales.setLayout(new java.awt.BorderLayout());
        jpUserScales.add(jPanel7, java.awt.BorderLayout.CENTER);

        jPanel6.add(jpUserScales);

        jpUserInputCategories.setBorder(javax.swing.BorderFactory.createTitledBorder("Acceso a categorías de insumo:"));
        jpUserInputCategories.setLayout(new java.awt.BorderLayout());
        jpUserInputCategories.add(jPanel8, java.awt.BorderLayout.CENTER);

        jPanel6.add(jpUserInputCategories);

        jPanel1.add(jPanel6, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JButton jbPassword;
    private javax.swing.JButton jbUserType;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlPassword;
    private javax.swing.JLabel jlUserType;
    private javax.swing.JPanel jpUserInputCategories;
    private javax.swing.JPanel jpUserRights;
    private javax.swing.JPanel jpUserScales;
    private sa.lib.gui.bean.SBeanFieldKey moKeyUserType;
    private sa.lib.gui.bean.SBeanFieldPassword moPswdPassword;
    private sa.lib.gui.bean.SBeanFieldText moTextName;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 880, 550);

        moTextName.setTextSettings(SGuiUtils.getLabelName(jlName.getText()), 16);
        moTextName.setTextCaseType(SGuiConsts.TEXT_CASE_LOWER);
        moPswdPassword.setTextSettings(SGuiUtils.getLabelName(jlPassword.getText()), 16);
        moKeyUserType.setKeySettings(miClient, SGuiUtils.getLabelName(jlUserType.getText()), true);

        moFields.addField(moTextName);
        moFields.addField(moPswdPassword);
        moFields.addField(moKeyUserType);

        moFields.setFormButton(jbSave);

        jbPassword.addActionListener(this);
        jbUserType.addActionListener(this);

        moGridUserRights = new SGridPaneForm(miClient, SModConsts.CU_USR_SCA, SLibConsts.UNDEFINED, "Usuarios vs. derechos") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                SGridColumnForm[] columns = new SGridColumnForm[2];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Derecho");
                columns[col] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Seleccionado");
                columns[col++].setEditable(true);

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        moGridUserRights.setForm(null);
        moGridUserRights.setPaneFormOwner(null);
        jpUserRights.add(moGridUserRights, BorderLayout.CENTER);

        moGridUserScales = new SGridPaneForm(miClient, SModConsts.CU_USR_SCA, SLibConsts.UNDEFINED, "Usuarios vs. básculas") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                SGridColumnForm[] columns = new SGridColumnForm[2];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Báscula");
                columns[col] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Seleccionado");
                columns[col++].setEditable(true);

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        moGridUserScales.setForm(null);
        moGridUserScales.setPaneFormOwner(null);
        jpUserScales.add(moGridUserScales, BorderLayout.CENTER);
        
        /* XXX Cell renderers not implemented yet in XML
        mvFormGrids.add(moGridUserRights);
        mvFormGrids.add(moGridUserScales);
        */
        
        moGridUserInputCategories = new SGridPaneForm(miClient, SModConsts.CU_USR_SCA, SLibConsts.UNDEFINED, "Usuarios vs. categorias de insumos") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                SGridColumnForm[] columns = new SGridColumnForm[2];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Categorías de insumo");
                columns[col] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Seleccionado");
                columns[col++].setEditable(true);

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        moGridUserInputCategories.setForm(null);
        moGridUserInputCategories.setPaneFormOwner(null);
        jpUserInputCategories.add(moGridUserInputCategories, BorderLayout.CENTER);
        
    }

    private void actionPassword() {
        jbPassword.setEnabled(false);
        moPswdPassword.setEditable(true);
        moPswdPassword.requestFocus();
    }

    private void actionUserType() {
        jbUserType.setEnabled(false);
        moKeyUserType.setEnabled(true);
        moKeyUserType.requestFocus();
    }

    private void populateUserRights() throws SQLException {
        Vector<SGridRow> rows = new Vector<>();
        String sql = "SELECT id_rig, name FROM " + SModConsts.TablesMap.get(SModConsts.CS_RIG) + " WHERE b_del = 0 ORDER BY sort ";
        
        try (ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql)) {
            while (resultSet.next()) {
                SDbUserRight row = new SDbUserRight();
                row.setPkRightId(resultSet.getInt(1));
                row.setXtaRight(resultSet.getString(2));
                rows.add(row);
            }
        }

        moGridUserRights.populateGrid(rows);
    }

    private void populateUserScales() throws SQLException {
        Vector<SGridRow> rows = new Vector<>();
        String sql = "SELECT id_sca, name FROM " + SModConsts.TablesMap.get(SModConsts.SU_SCA) + " WHERE b_del = 0 ORDER BY name, id_sca ";
        
        try (ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql)) {
            while (resultSet.next()) {
                SDbUserScale row = new SDbUserScale();
                row.setPkScaleId(resultSet.getInt(1));
                row.setXtaScale(resultSet.getString(2));
                rows.add(row);
            }
        }

        moGridUserScales.populateGrid(rows);
    }
    
    private void populateUserInputCategories() throws SQLException {
        Vector<SGridRow> rows = new Vector<>();
        String sql = "SELECT id_inp_ct, name FROM " + SModConsts.TablesMap.get(SModConsts.SU_INP_CT) + " WHERE b_del = 0 ORDER BY name, id_inp_ct ";
        
        try (ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql)) {
            while (resultSet.next()) {
                SDbUserInputCategory row = new SDbUserInputCategory();
                row.setPkInputCategoryId(resultSet.getInt(1));
                row.setXtaInputCategoryName(resultSet.getString(2));
                rows.add(row);
            }
        }

        moGridUserInputCategories.populateGrid(rows);
    }

    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyUserType, SModConsts.CS_USR_TP, SLibConsts.UNDEFINED, null);

        try {
            populateUserRights();
            populateUserScales();
            populateUserInputCategories();
        }
        catch (SQLException e) {
            SLibUtils.showException(this, e);
        }
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbUser) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
            moRegistry.setFkUserTypeId(SModSysConsts.CS_USR_TP_USR);
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moTextName.setValue(moRegistry.getName());
        moPswdPassword.setValue("");
        moKeyUserType.setValue(new int[] { moRegistry.getFkUserTypeId() });

        for (SDbUserRight right : moRegistry.getChildUserRights()) {
            for (SGridRow row : moGridUserRights.getModel().getGridRows()) {
                if (right.getPkRightId() == ((SDbUserRight) row).getPkRightId()) {
                    ((SDbUserRight) row).setXtaSelected(true);
                }
            }
        }

        for (SDbUserScale scale : moRegistry.getChildUserScales()) {
            for (SGridRow row : moGridUserScales.getModel().getGridRows()) {
                if (scale.getPkScaleId() == ((SDbUserScale) row).getPkScaleId()) {
                    ((SDbUserScale) row).setXtaSelected(true);
                }
            }
        }
        
        for (SDbUserInputCategory inputCategory : moRegistry.getChildUserInputCategories()) {
            for (SGridRow row : moGridUserInputCategories.getModel().getGridRows()) {
                if (inputCategory.getPkInputCategoryId() == ((SDbUserInputCategory) row).getPkInputCategoryId()) {
                    ((SDbUserInputCategory) row).setXtaSelected(true);
                }
            }
        }

        setFormEditable(true);

        if (moRegistry.isRegistryNew()) {
            jbPassword.setEnabled(false);
        }
        else {
            moPswdPassword.setEditable(false);
            jbPassword.setEnabled(true);
        }

        moKeyUserType.setEnabled(false);
        jbUserType.setEnabled(true);

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbUser registry = moRegistry.clone();

        if (registry.isRegistryNew()) {}

        if (moPswdPassword.isEditable()) {
            registry.setPassword(moPswdPassword.getValue());
        }

        registry.setName(moTextName.getValue());
        registry.setFkUserTypeId(moKeyUserType.getValue()[0]);

        registry.getChildUserRights().clear();
        for (SGridRow row : moGridUserRights.getModel().getGridRows()) {
            if (((SDbUserRight) row).isXtaSelected()) {
                registry.getChildUserRights().add((SDbUserRight) row);
            }
        }

        registry.getChildUserScales().clear();
        for (SGridRow row : moGridUserScales.getModel().getGridRows()) {
            if (((SDbUserScale) row).isXtaSelected()) {
                registry.getChildUserScales().add((SDbUserScale) row);
            }
        }
        
        registry.getChildUserInputCategories().clear();
        for (SGridRow row : moGridUserInputCategories.getModel().getGridRows()) {
            if (((SDbUserInputCategory) row).isXtaSelected()) {
                registry.getChildUserInputCategories().add((SDbUserInputCategory) row);
            }
        } 

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent evt) {
        if (evt.getSource() instanceof JButton) {
            JButton button = (JButton) evt.getSource();

            if (button == jbPassword) {
                actionPassword();
            }
            else if (button == jbUserType) {
                actionUserType();
            }
        }
    }
}
