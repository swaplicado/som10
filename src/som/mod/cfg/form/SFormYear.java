/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package som.mod.cfg.form;

import java.awt.BorderLayout;
import java.util.Vector;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;
import som.mod.SModConsts;
import som.mod.cfg.db.SDbYear;
import som.mod.cfg.db.SDbYearPeriod;

/**
 *
 * @author Sergio Flores
 */
public class SFormYear extends SBeanForm {

    private SDbYear moRegistry;
    private SGridPaneForm moGridPeriods;

    /**
     * Creates new form SFormUser
     */
    public SFormYear(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.CU_YEAR, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlYear = new javax.swing.JLabel();
        moIntYear = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel4 = new javax.swing.JPanel();
        moBoolClosed = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel6 = new javax.swing.JPanel();
        jpPeriods = new javax.swing.JPanel();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlYear.setForeground(new java.awt.Color(0, 0, 255));
        jlYear.setText("Ejercicio:*");
        jlYear.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlYear);

        moIntYear.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel3.add(moIntYear);

        jPanel2.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolClosed.setText("Cerrado");
        jPanel4.add(moBoolClosed);

        jPanel2.add(jPanel4);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel6.setLayout(new java.awt.BorderLayout());

        jpPeriods.setBorder(javax.swing.BorderFactory.createTitledBorder("Períodos del ejercicio:"));
        jpPeriods.setLayout(new java.awt.BorderLayout());
        jPanel6.add(jpPeriods, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel6, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel jlYear;
    private javax.swing.JPanel jpPeriods;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolClosed;
    private sa.lib.gui.bean.SBeanFieldInteger moIntYear;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 640, 400);

        moIntYear.setIntegerSettings(SGuiUtils.getLabelName(jlYear.getText()), SGuiConsts.GUI_TYPE_INT_CAL_YEAR, true);
        moIntYear.setMinInteger(2000);
        moIntYear.setMaxInteger(2100);
        moBoolClosed.setBooleanSettings(SGuiUtils.getLabelName(moBoolClosed.getText()), false);

        moFields.addField(moIntYear);
        moFields.addField(moBoolClosed);

        moFields.setFormButton(jbSave);

        moGridPeriods = new SGridPaneForm(miClient, SModConsts.CU_YEAR_PER, SLibConsts.UNDEFINED, "Períodos") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                SGridColumnForm[] columns = new SGridColumnForm[3];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_INT_CAL_MONTH, "#");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Período");
                columns[col] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_M, "Cerrado");
                columns[col++].setEditable(true);

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        moGridPeriods.setForm(null);
        moGridPeriods.setPaneFormOwner(null);
        jpPeriods.add(moGridPeriods, BorderLayout.CENTER);

        /* XXX Cell renderers not implemented yet in XML
        mvFormGrids.add(moGridPeriods);
        */
    }

    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {

    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbYear) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            moRegistry.setPkYearId(miClient.getSession().getWorkingYear());
            moRegistry.createPeriods();
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moIntYear.setValue(moRegistry.getPkYearId());
        moBoolClosed.setValue(moRegistry.isClosed());

        moGridPeriods.populateGrid((new Vector<SGridRow>(moRegistry.getChildPeriods())));
        moGridPeriods.clearSortKeys();
        moGridPeriods.setSelectedGridRow(0);

        setFormEditable(true);

        if (moRegistry.isRegistryNew()) {

        }
        else {
            moIntYear.setEditable(false);
        }

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbYear registry = moRegistry.clone();

        if (registry.isRegistryNew()) {
            registry.setPkYearId(moIntYear.getValue());
        }

        registry.setClosed(moBoolClosed.getValue());

        registry.getChildPeriods().clear();
        for (SGridRow row : moGridPeriods.getModel().getGridRows()) {
            registry.getChildPeriods().add((SDbYearPeriod) row);
        }

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (moBoolClosed.isSelected()) {
                for (SGridRow row : moGridPeriods.getModel().getGridRows()) {
                    if (!((SDbYearPeriod) row).isClosed()) {
                        validation.setMessage("Todos los períodos del ejercicio deben estar cerrados para cerrar el ejercicio.");
                        break;
                    }
                }
            }
        }

        return validation;
    }
}
